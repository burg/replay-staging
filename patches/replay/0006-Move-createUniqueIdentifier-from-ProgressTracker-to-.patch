From 7b97800b6ae22acd28e6416589e0246d376883f3 Mon Sep 17 00:00:00 2001
From: "Brian J. Burg" <burg@cs.washington.edu>
Date: Thu, 12 Jun 2014 09:30:20 -0700
Subject: [PATCH] Move createUniqueIdentifier() from ProgressTracker to
 DocumentLoader https://bugs.webkit.org/show_bug.cgi?id=130865

Reviewed by NOBODY (OOPS!).

In preparation for supporting replay of resource loader callbacks, this patch
moves vending of resource load identifiers to the main frame's document loader.
This will enable tracking of resource load identifiers on a per-Page basis.

No new tests, no behavior was changed.

* Modules/websockets/WebSocketChannel.cpp:
(WebCore::WebSocketChannel::WebSocketChannel):
* html/HTMLMediaElement.cpp:
(WebCore::HTMLMediaElement::parseAttribute):
* inspector/InspectorResourceAgent.cpp:
(WebCore::InspectorResourceAgent::didLoadResourceFromMemoryCache):
* loader/DocumentLoader.cpp:
(WebCore::DocumentLoader::createUniqueIdentifier):
(WebCore::DocumentLoader::startLoadingMainResource):
* loader/DocumentLoader.h:
* loader/FrameLoader.cpp:
(WebCore::FrameLoader::requestFromDelegate):
* loader/PingLoader.cpp:
(WebCore::PingLoader::PingLoader):
* loader/ProgressTracker.cpp:
* loader/ProgressTracker.h:
* loader/ResourceLoader.cpp:
(WebCore::ResourceLoader::willSendRequest):
* loader/appcache/ApplicationCacheGroup.cpp:
(WebCore::ApplicationCacheGroup::createResourceHandle):
---
 Source/WebCore/ChangeLog                           | 36 +++++++++++++++++++++-
 .../Modules/websockets/WebSocketChannel.cpp        |  8 ++---
 Source/WebCore/html/HTMLMediaElement.cpp           |  3 +-
 .../WebCore/inspector/InspectorResourceAgent.cpp   |  4 +--
 Source/WebCore/loader/DocumentLoader.cpp           | 13 ++++++--
 Source/WebCore/loader/DocumentLoader.h             |  4 +++
 Source/WebCore/loader/FrameLoader.cpp              |  7 ++---
 Source/WebCore/loader/PingLoader.cpp               |  6 ++--
 Source/WebCore/loader/ProgressTracker.cpp          |  7 -----
 Source/WebCore/loader/ProgressTracker.h            |  2 --
 Source/WebCore/loader/ResourceLoader.cpp           |  4 +--
 .../loader/appcache/ApplicationCacheGroup.cpp      |  3 +-
 12 files changed, 64 insertions(+), 33 deletions(-)

diff --git a/Source/WebCore/ChangeLog b/Source/WebCore/ChangeLog
index 161990c..bb84127 100644
--- a/Source/WebCore/ChangeLog
+++ b/Source/WebCore/ChangeLog
@@ -1,11 +1,45 @@
-2014-04-12  Brian J. Burg  <burg@cs.washington.edu>
+2014-06-12  Brian Burg  <burg@cs.washington.edu>
+
+        Move createUniqueIdentifier() from ProgressTracker to DocumentLoader
+        https://bugs.webkit.org/show_bug.cgi?id=130865
+
+        Reviewed by NOBODY (OOPS!).
+
+        In preparation for supporting replay of resource loader callbacks, this patch
+        moves vending of resource load identifiers to the main frame's document loader.
+        This will enable tracking of resource load identifiers on a per-Page basis.
+
+        No new tests, no behavior was changed.
+
+        * Modules/websockets/WebSocketChannel.cpp:
+        (WebCore::WebSocketChannel::WebSocketChannel):
+        * html/HTMLMediaElement.cpp:
+        (WebCore::HTMLMediaElement::parseAttribute):
+        * inspector/InspectorResourceAgent.cpp:
+        (WebCore::InspectorResourceAgent::didLoadResourceFromMemoryCache):
+        * loader/DocumentLoader.cpp:
+        (WebCore::DocumentLoader::createUniqueIdentifier):
+        (WebCore::DocumentLoader::startLoadingMainResource):
+        * loader/DocumentLoader.h:
+        * loader/FrameLoader.cpp:
+        (WebCore::FrameLoader::requestFromDelegate):
+        * loader/PingLoader.cpp:
+        (WebCore::PingLoader::PingLoader):
+        * loader/ProgressTracker.cpp:
+        * loader/ProgressTracker.h:
+        * loader/ResourceLoader.cpp:
+        (WebCore::ResourceLoader::willSendRequest):
+        * loader/appcache/ApplicationCacheGroup.cpp:
+        (WebCore::ApplicationCacheGroup::createResourceHandle):
+
+2014-06-11  Brian J. Burg  <burg@cs.washington.edu>
 
         Web Replay: add page-level setting to bypass the MemoryCache
         https://bugs.webkit.org/show_bug.cgi?id=130728
 
         Reviewed by NOBODY (OOPS!).
 
         When replaying a specific Page we don't want to store its cached resources in the
         MemoryCache. This patch adds a page setting to prevent the page's resources from
         being saved in the MemoryCache.
 
diff --git a/Source/WebCore/Modules/websockets/WebSocketChannel.cpp b/Source/WebCore/Modules/websockets/WebSocketChannel.cpp
index b0498af..6e0ae8f 100644
--- a/Source/WebCore/Modules/websockets/WebSocketChannel.cpp
+++ b/Source/WebCore/Modules/websockets/WebSocketChannel.cpp
@@ -30,28 +30,28 @@
 
 #include "config.h"
 
 #if ENABLE(WEB_SOCKETS)
 
 #include "WebSocketChannel.h"
 
 #include "Blob.h"
 #include "CookieJar.h"
 #include "Document.h"
+#include "DocumentLoader.h"
 #include "ExceptionCodePlaceholder.h"
 #include "FileError.h"
 #include "FileReaderLoader.h"
 #include "Frame.h"
 #include "InspectorInstrumentation.h"
 #include "Logging.h"
-#include "Page.h"
-#include "ProgressTracker.h"
+#include "MainFrame.h"
 #include "ResourceRequest.h"
 #include "ScriptExecutionContext.h"
 #include "Settings.h"
 #include "SocketStreamError.h"
 #include "SocketStreamHandle.h"
 #include "WebSocketChannelClient.h"
 #include "WebSocketHandshake.h"
 #include <runtime/ArrayBuffer.h>
 #include <wtf/Deque.h>
 #include <wtf/FastMalloc.h>
@@ -74,22 +74,22 @@ WebSocketChannel::WebSocketChannel(Document* document, WebSocketChannelClient* c
     , m_closingTimer(*this, &WebSocketChannel::closingTimerFired)
     , m_closed(false)
     , m_shouldDiscardReceivedData(false)
     , m_unhandledBufferedAmount(0)
     , m_identifier(0)
     , m_hasContinuousFrame(false)
     , m_closeEventCode(CloseEventCodeAbnormalClosure)
     , m_outgoingFrameQueueStatus(OutgoingFrameQueueOpen)
     , m_blobLoaderStatus(BlobLoaderNotStarted)
 {
-    if (Page* page = m_document->page())
-        m_identifier = page->progress().createUniqueIdentifier();
+    if (Frame* frame = m_document->frame())
+        m_identifier = frame->mainFrame().loader().activeDocumentLoader()->createUniqueIdentifier();
 
     LOG(Network, "WebSocketChannel %p ctor, identifier %lu", this, m_identifier);
 }
 
 WebSocketChannel::~WebSocketChannel()
 {
     LOG(Network, "WebSocketChannel %p dtor", this);
 }
 
 void WebSocketChannel::connect(const URL& url, const String& protocol)
diff --git a/Source/WebCore/html/HTMLMediaElement.cpp b/Source/WebCore/html/HTMLMediaElement.cpp
index f7eb8fd..a755e6f 100644
--- a/Source/WebCore/html/HTMLMediaElement.cpp
+++ b/Source/WebCore/html/HTMLMediaElement.cpp
@@ -61,21 +61,20 @@
 #include "MediaError.h"
 #include "MediaFragmentURIParser.h"
 #include "MediaKeyEvent.h"
 #include "MediaList.h"
 #include "MediaQueryEvaluator.h"
 #include "MediaResourceLoader.h"
 #include "MediaSessionManager.h"
 #include "NetworkingContext.h"
 #include "PageGroup.h"
 #include "PageThrottler.h"
-#include "ProgressTracker.h"
 #include "RenderLayerCompositor.h"
 #include "RenderVideo.h"
 #include "RenderView.h"
 #include "ScriptController.h"
 #include "ScriptSourceCode.h"
 #include "SecurityPolicy.h"
 #include "SessionID.h"
 #include "Settings.h"
 #include "ShadowRoot.h"
 #include "TimeRanges.h"
@@ -5755,21 +5754,21 @@ bool HTMLMediaElement::mediaPlayerShouldWaitForResponseToAuthenticationChallenge
     if (!frame)
         return false;
 
     Page* page = frame->page();
     if (!page)
         return false;
 
     ResourceRequest request(m_currentSrc);
     ResourceLoadNotifier& notifier = frame->loader().notifier();
     DocumentLoader* documentLoader = document().loader();
-    unsigned long identifier = page->progress().createUniqueIdentifier();
+    unsigned long identifier = frame->mainFrame().loader().activeDocumentLoader()->createUniqueIdentifier();
 
     notifier.assignIdentifierToInitialRequest(identifier, documentLoader, request);
     notifier.didReceiveAuthenticationChallenge(identifier, documentLoader, challenge);
 
     return true;
 }
 
 String HTMLMediaElement::mediaPlayerSourceApplicationIdentifier() const
 {
     if (Frame* frame = document().frame()) {
diff --git a/Source/WebCore/inspector/InspectorResourceAgent.cpp b/Source/WebCore/inspector/InspectorResourceAgent.cpp
index 4922f31..0592670 100644
--- a/Source/WebCore/inspector/InspectorResourceAgent.cpp
+++ b/Source/WebCore/inspector/InspectorResourceAgent.cpp
@@ -41,24 +41,24 @@
 #include "Frame.h"
 #include "FrameLoader.h"
 #include "HTTPHeaderMap.h"
 #include "HTTPHeaderNames.h"
 #include "IconController.h"
 #include "InspectorClient.h"
 #include "InspectorPageAgent.h"
 #include "InspectorTimelineAgent.h"
 #include "InstrumentingAgents.h"
 #include "JSMainThreadExecState.h"
+#include "MainFrame.h"
 #include "MemoryCache.h"
 #include "NetworkResourcesData.h"
 #include "Page.h"
-#include "ProgressTracker.h"
 #include "ResourceError.h"
 #include "ResourceLoader.h"
 #include "ResourceRequest.h"
 #include "ResourceResponse.h"
 #include "ScriptableDocumentParser.h"
 #include "SubresourceLoader.h"
 #include "ThreadableLoaderClient.h"
 #include "URL.h"
 #include "WebSocketFrame.h"
 #include "XMLHttpRequest.h"
@@ -437,21 +437,21 @@ void InspectorResourceAgent::didFailLoading(unsigned long identifier, DocumentLo
     }
 
     bool canceled = error.isCancellation();
     m_frontendDispatcher->loadingFailed(requestId, timestamp(), error.localizedDescription(), canceled ? &canceled : nullptr);
 }
 
 void InspectorResourceAgent::didLoadResourceFromMemoryCache(DocumentLoader& loader, CachedResource& resource)
 {
     String loaderId = m_pageAgent->loaderId(&loader);
     String frameId = m_pageAgent->frameId(loader.frame());
-    unsigned long identifier = loader.frame()->page()->progress().createUniqueIdentifier();
+    unsigned long identifier = loader.frame()->mainFrame().loader().activeDocumentLoader()->createUniqueIdentifier();
     String requestId = IdentifiersFactory::requestId(identifier);
     m_resourcesData->resourceCreated(requestId, loaderId);
     m_resourcesData->addCachedResource(requestId, &resource);
     if (resource.type() == CachedResource::RawResource) {
         String rawRequestId = IdentifiersFactory::requestId(downcast<CachedRawResource>(resource).identifier());
         m_resourcesData->reuseXHRReplayData(requestId, rawRequestId);
     }
 
     RefPtr<Inspector::Protocol::Network::Initiator> initiatorObject = buildInitiatorObject(loader.frame() ? loader.frame()->document() : nullptr);
 
diff --git a/Source/WebCore/loader/DocumentLoader.cpp b/Source/WebCore/loader/DocumentLoader.cpp
index 63d5e3a..2090d15 100644
--- a/Source/WebCore/loader/DocumentLoader.cpp
+++ b/Source/WebCore/loader/DocumentLoader.cpp
@@ -48,21 +48,20 @@
 #include "HTMLFrameOwnerElement.h"
 #include "HTTPHeaderNames.h"
 #include "HistoryItem.h"
 #include "IconController.h"
 #include "InspectorInstrumentation.h"
 #include "Logging.h"
 #include "MainFrame.h"
 #include "MemoryCache.h"
 #include "Page.h"
 #include "PolicyChecker.h"
-#include "ProgressTracker.h"
 #include "ResourceHandle.h"
 #include "SchemeRegistry.h"
 #include "SecurityPolicy.h"
 #include "Settings.h"
 #include "SubresourceLoader.h"
 #include "TextResourceDecoder.h"
 #include <wtf/Assertions.h>
 #include <wtf/NeverDestroyed.h>
 #include <wtf/Ref.h>
 #include <wtf/text/CString.h>
@@ -110,20 +109,22 @@ static bool areAllLoadersPageCacheAcceptable(const ResourceLoaderMap& loaders)
         if (!cachedResource)
             return false;
 
         // All non-image loads will prevent the page from entering the PageCache.
         if (!cachedResource->isImage())
             return false;
     }
     return true;
 }
 
+unsigned long DocumentLoader::s_uniqueIdentifier = 0;
+
 DocumentLoader::DocumentLoader(const ResourceRequest& req, const SubstituteData& substituteData)
     : m_deferMainResourceDataLoad(true)
     , m_frame(0)
     , m_cachedResourceLoader(CachedResourceLoader::create(this))
     , m_writer(m_frame)
     , m_originalRequest(req)
     , m_substituteData(substituteData)
     , m_originalRequestCopy(req)
     , m_request(req)
     , m_originalSubstituteDataWasValid(substituteData.isValid())
@@ -1324,20 +1325,26 @@ void DocumentLoader::setMainResourceDataBufferingPolicy(DataBufferingPolicy data
 void DocumentLoader::stopLoadingPlugIns()
 {
     cancelAll(m_plugInStreamLoaders);
 }
 
 void DocumentLoader::stopLoadingSubresources()
 {
     cancelAll(m_subresourceLoaders);
 }
 
+unsigned long DocumentLoader::createUniqueIdentifier()
+{
+    ASSERT(frame() && frame()->mainFrame().loader().activeDocumentLoader() == this);
+    return ++s_uniqueIdentifier;
+}
+
 void DocumentLoader::addSubresourceLoader(ResourceLoader* loader)
 {
     // The main resource's underlying ResourceLoader will ask to be added here.
     // It is much simpler to handle special casing of main resource loads if we don't
     // let it be added. In the main resource load case, mainResourceLoader()
     // will still be null at this point, but m_gotFirstByte should be false here if and only
     // if we are just starting the main resource load.
     if (!m_gotFirstByte)
         return;
     ASSERT(loader->identifier());
@@ -1416,21 +1423,21 @@ void DocumentLoader::startLoadingMainResource()
     timing().markFetchStart();
     willSendRequest(m_request, ResourceResponse());
 
     // willSendRequest() may lead to our Frame being detached or cancelling the load via nulling the ResourceRequest.
     if (!m_frame || m_request.isNull())
         return;
 
     m_applicationCacheHost->maybeLoadMainResource(m_request, m_substituteData);
 
     if (m_substituteData.isValid()) {
-        m_identifierForLoadWithoutResourceLoader = m_frame->page()->progress().createUniqueIdentifier();
+        m_identifierForLoadWithoutResourceLoader = m_frame->mainFrame().loader().activeDocumentLoader()->createUniqueIdentifier();
         frameLoader()->notifier().assignIdentifierToInitialRequest(m_identifierForLoadWithoutResourceLoader, this, m_request);
         frameLoader()->notifier().dispatchWillSendRequest(this, m_identifierForLoadWithoutResourceLoader, m_request, ResourceResponse());
         handleSubstituteDataLoadSoon();
         return;
     }
 
 #if PLATFORM(IOS)
     // FIXME: Remove PLATFORM(IOS)-guard once we upstream the iOS changes to ResourceRequest.h.
     m_request.deprecatedSetMainResourceRequest(true);
 #endif
@@ -1443,21 +1450,21 @@ void DocumentLoader::startLoadingMainResource()
         setRequest(ResourceRequest());
         // If the load was aborted by clearing m_request, it's possible the ApplicationCacheHost
         // is now in a state where starting an empty load will be inconsistent. Replace it with
         // a new ApplicationCacheHost.
         m_applicationCacheHost = adoptPtr(new ApplicationCacheHost(*this));
         maybeLoadEmpty();
         return;
     }
 
     if (!mainResourceLoader()) {
-        m_identifierForLoadWithoutResourceLoader = m_frame->page()->progress().createUniqueIdentifier();
+        m_identifierForLoadWithoutResourceLoader = m_frame->mainFrame().loader().activeDocumentLoader()->createUniqueIdentifier();
         frameLoader()->notifier().assignIdentifierToInitialRequest(m_identifierForLoadWithoutResourceLoader, this, request);
         frameLoader()->notifier().dispatchWillSendRequest(this, m_identifierForLoadWithoutResourceLoader, request, ResourceResponse());
     }
     m_mainResource->addClient(this);
 
     // A bunch of headers are set when the underlying ResourceLoader is created, and m_request needs to include those.
     if (mainResourceLoader())
         request = mainResourceLoader()->originalRequest();
     // If there was a fragment identifier on m_request, the cache will have stripped it. m_request should include
     // the fragment identifier, so add that back in.
diff --git a/Source/WebCore/loader/DocumentLoader.h b/Source/WebCore/loader/DocumentLoader.h
index 54d4bd9..2af407e 100644
--- a/Source/WebCore/loader/DocumentLoader.h
+++ b/Source/WebCore/loader/DocumentLoader.h
@@ -217,20 +217,22 @@ namespace WebCore {
         void continueIconLoadWithDecision(IconLoadDecision);
         void getIconLoadDecisionForIconURL(const String&);
         void getIconDataForIconURL(const String&);
 
         bool isLoadingMainResource() const { return m_loadingMainResource; }
         bool isLoadingMultipartContent() const { return m_isLoadingMultipartContent; }
 
         void stopLoadingPlugIns();
         void stopLoadingSubresources();
 
+        unsigned long createUniqueIdentifier();
+
         void addSubresourceLoader(ResourceLoader*);
         void removeSubresourceLoader(ResourceLoader*);
         WEBCORE_EXPORT void addPlugInStreamLoader(ResourceLoader*);
         WEBCORE_EXPORT void removePlugInStreamLoader(ResourceLoader*);
 
         void subresourceLoaderFinishedLoadingOnePart(ResourceLoader*);
 
         void setDeferMainResourceDataLoad(bool defer) { m_deferMainResourceDataLoad = defer; }
         
         void didTellClientAboutLoad(const String& url)
@@ -317,20 +319,22 @@ namespace WebCore {
 #endif
         void handleSubstituteDataLoadSoon();
         void handleSubstituteDataLoadNow();
         void startDataLoadTimer();
 
         void deliverSubstituteResourcesAfterDelay();
         void substituteResourceDeliveryTimerFired();
 
         void clearMainResource();
 
+        static unsigned long s_uniqueIdentifier;
+
         Frame* m_frame;
         Ref<CachedResourceLoader> m_cachedResourceLoader;
 
         CachedResourceHandle<CachedRawResource> m_mainResource;
         ResourceLoaderMap m_subresourceLoaders;
         ResourceLoaderMap m_multipartSubresourceLoaders;
         ResourceLoaderMap m_plugInStreamLoaders;
         
         mutable DocumentWriter m_writer;
 
diff --git a/Source/WebCore/loader/FrameLoader.cpp b/Source/WebCore/loader/FrameLoader.cpp
index 8906744..1524c45 100644
--- a/Source/WebCore/loader/FrameLoader.cpp
+++ b/Source/WebCore/loader/FrameLoader.cpp
@@ -2982,25 +2982,22 @@ void FrameLoader::continueLoadAfterNewWindowPolicy(const ResourceRequest& reques
         mainFrame->loader().setOpener(frame.ptr());
         mainFrame->document()->setReferrerPolicy(frame->document()->referrerPolicy());
     }
     mainFrame->loader().loadWithNavigationAction(request, NavigationAction(request), LockHistory::No, FrameLoadType::Standard, formState, allowNavigationToInvalidURL);
 }
 
 void FrameLoader::requestFromDelegate(ResourceRequest& request, unsigned long& identifier, ResourceError& error)
 {
     ASSERT(!request.isNull());
 
-    identifier = 0;
-    if (Page* page = m_frame.page()) {
-        identifier = page->progress().createUniqueIdentifier();
-        notifier().assignIdentifierToInitialRequest(identifier, m_documentLoader.get(), request);
-    }
+    identifier = m_frame.mainFrame().loader().activeDocumentLoader()->createUniqueIdentifier();
+    notifier().assignIdentifierToInitialRequest(identifier, m_documentLoader.get(), request);
 
     ResourceRequest newRequest(request);
     notifier().dispatchWillSendRequest(m_documentLoader.get(), identifier, newRequest, ResourceResponse());
 
     if (newRequest.isNull())
         error = cancelledError(request);
     else
         error = ResourceError();
 
     request = newRequest;
diff --git a/Source/WebCore/loader/PingLoader.cpp b/Source/WebCore/loader/PingLoader.cpp
index 04a68b1..3a50fd4 100644
--- a/Source/WebCore/loader/PingLoader.cpp
+++ b/Source/WebCore/loader/PingLoader.cpp
@@ -26,28 +26,28 @@
  * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  *
  */
 
 #include "config.h"
 #include "PingLoader.h"
 
 #include "Document.h"
+#include "DocumentLoader.h"
 #include "FormData.h"
 #include "Frame.h"
 #include "FrameLoader.h"
 #include "FrameLoaderClient.h"
 #include "HTTPHeaderNames.h"
 #include "InspectorInstrumentation.h"
-#include "Page.h"
-#include "ProgressTracker.h"
+#include "MainFrame.h"
 #include "ResourceHandle.h"
 #include "ResourceRequest.h"
 #include "ResourceResponse.h"
 #include "SecurityOrigin.h"
 #include "SecurityPolicy.h"
 #include <wtf/text/CString.h>
 
 namespace WebCore {
 
 void PingLoader::loadImage(Frame& frame, const URL& url)
@@ -110,21 +110,21 @@ void PingLoader::sendViolationReport(Frame& frame, const URL& reportURL, PassRef
 
 void PingLoader::createPingLoader(Frame& frame, ResourceRequest& request)
 {
     // No need to free the PingLoader object or manage it via a smart pointer - it will kill itself as soon as it receives a response.
     new PingLoader(frame, request);
 }
 
 PingLoader::PingLoader(Frame& frame, ResourceRequest& request)
     : m_timeout(*this, &PingLoader::timeoutTimerFired)
 {
-    unsigned long identifier = frame.page()->progress().createUniqueIdentifier();
+    unsigned long identifier = frame.mainFrame().loader().activeDocumentLoader()->createUniqueIdentifier();
     // FIXME: Why activeDocumentLoader? I would have expected documentLoader().
     // Itseems like the PingLoader should be associated with the current
     // Document in the Frame, but the activeDocumentLoader will be associated
     // with the provisional DocumentLoader if there is a provisional
     // DocumentLoader.
     m_shouldUseCredentialStorage = frame.loader().client().shouldUseCredentialStorage(frame.loader().activeDocumentLoader(), identifier);
     m_handle = ResourceHandle::create(frame.loader().networkingContext(), request, this, false, false);
 
     InspectorInstrumentation::continueAfterPingLoader(frame, identifier, frame.loader().activeDocumentLoader(), request, ResourceResponse());
 
diff --git a/Source/WebCore/loader/ProgressTracker.cpp b/Source/WebCore/loader/ProgressTracker.cpp
index 04054de..8a61f73 100644
--- a/Source/WebCore/loader/ProgressTracker.cpp
+++ b/Source/WebCore/loader/ProgressTracker.cpp
@@ -68,22 +68,20 @@ public:
     ProgressItem(long long length) 
         : bytesReceived(0)
         , estimatedLength(length)
     {
     }
     
     long long bytesReceived;
     long long estimatedLength;
 };
 
-unsigned long ProgressTracker::s_uniqueIdentifier = 0;
-
 ProgressTracker::ProgressTracker(ProgressTrackerClient& client)
     : m_client(client)
     , m_totalPageAndResourceBytesToLoad(0)
     , m_totalBytesReceived(0)
     , m_lastNotifiedProgressValue(0)
     , m_finalProgressChangedSent(false)
     , m_progressValue(0)
     , m_numProgressTrackedFrames(0)
     , m_progressHeartbeatTimer(*this, &ProgressTracker::progressHeartbeatTimerFired)
     , m_heartbeatsWithNoProgress(0)
@@ -282,25 +280,20 @@ void ProgressTracker::completeProgress(unsigned long identifier)
 
     ProgressItem& item = *it->value;
     
     // Adjust the total expected bytes to account for any overage/underage.
     long long delta = item.bytesReceived - item.estimatedLength;
     m_totalPageAndResourceBytesToLoad += delta;
 
     m_progressItems.remove(it);
 }
 
-unsigned long ProgressTracker::createUniqueIdentifier()
-{
-    return ++s_uniqueIdentifier;
-}
-
 bool ProgressTracker::isMainLoadProgressing() const
 {
     if (!m_originatingProgressFrame)
         return false;
 
     if (!m_isMainLoad)
         return false;
 
     return m_progressValue && m_progressValue < finalProgressValue && m_heartbeatsWithNoProgress < loadStalledHeartbeatCount;
 }
diff --git a/Source/WebCore/loader/ProgressTracker.h b/Source/WebCore/loader/ProgressTracker.h
index 7d9dca4..894d888 100644
--- a/Source/WebCore/loader/ProgressTracker.h
+++ b/Source/WebCore/loader/ProgressTracker.h
@@ -61,22 +61,20 @@ public:
     long long totalBytesReceived() const { return m_totalBytesReceived; }
 
     bool isMainLoadProgressing() const;
 
 private:
     void reset();
     void finalProgressComplete();
 
     void progressHeartbeatTimerFired();
     
-    static unsigned long s_uniqueIdentifier;
-    
     ProgressTrackerClient& m_client;
     long long m_totalPageAndResourceBytesToLoad;
     long long m_totalBytesReceived;
     double m_lastNotifiedProgressValue;
     std::chrono::steady_clock::time_point m_lastNotifiedProgressTime;
     bool m_finalProgressChangedSent;    
     double m_progressValue;
     RefPtr<Frame> m_originatingProgressFrame;
     
     int m_numProgressTrackedFrames;
diff --git a/Source/WebCore/loader/ResourceLoader.cpp b/Source/WebCore/loader/ResourceLoader.cpp
index 3cad7f1..cabe01d 100644
--- a/Source/WebCore/loader/ResourceLoader.cpp
+++ b/Source/WebCore/loader/ResourceLoader.cpp
@@ -36,21 +36,20 @@
 #include "DiagnosticLoggingKeys.h"
 #include "DocumentLoader.h"
 #include "Frame.h"
 #include "FrameLoader.h"
 #include "FrameLoaderClient.h"
 #include "InspectorInstrumentation.h"
 #include "LoaderStrategy.h"
 #include "MainFrame.h"
 #include "Page.h"
 #include "PlatformStrategies.h"
-#include "ProgressTracker.h"
 #include "ResourceError.h"
 #include "ResourceHandle.h"
 #include "ResourceLoadScheduler.h"
 #include "SecurityOrigin.h"
 #include "Settings.h"
 #include "SharedBuffer.h"
 #include <wtf/Ref.h>
 
 namespace WebCore {
 
@@ -260,25 +259,24 @@ bool ResourceLoader::isSubresourceLoader()
     return false;
 }
 
 void ResourceLoader::willSendRequest(ResourceRequest& request, const ResourceResponse& redirectResponse)
 {
     // Protect this in this delegate method since the additional processing can do
     // anything including possibly derefing this; one example of this is Radar 3266216.
     Ref<ResourceLoader> protect(*this);
 
     ASSERT(!m_reachedTerminalState);
-    
     // We need a resource identifier for all requests, even if FrameLoader is never going to see it (such as with CORS preflight requests).
     bool createdResourceIdentifier = false;
     if (!m_identifier) {
-        m_identifier = m_frame->page()->progress().createUniqueIdentifier();
+        m_identifier = m_frame->mainFrame().loader().activeDocumentLoader()->createUniqueIdentifier();
         createdResourceIdentifier = true;
     }
 
     if (m_options.sendLoadCallbacks() == SendCallbacks) {
         if (createdResourceIdentifier)
             frameLoader()->notifier().assignIdentifierToInitialRequest(m_identifier, documentLoader(), request);
 
 #if PLATFORM(IOS)
         // If this ResourceLoader was stopped as a result of assignIdentifierToInitialRequest, bail out
         if (m_reachedTerminalState)
diff --git a/Source/WebCore/loader/appcache/ApplicationCacheGroup.cpp b/Source/WebCore/loader/appcache/ApplicationCacheGroup.cpp
index 53e3574..7ee8981 100644
--- a/Source/WebCore/loader/appcache/ApplicationCacheGroup.cpp
+++ b/Source/WebCore/loader/appcache/ApplicationCacheGroup.cpp
@@ -32,20 +32,21 @@
 #include "ApplicationCacheStorage.h"
 #include "Chrome.h"
 #include "ChromeClient.h"
 #include "DOMApplicationCache.h"
 #include "DocumentLoader.h"
 #include "Frame.h"
 #include "FrameLoader.h"
 #include "FrameLoaderClient.h"
 #include "HTTPHeaderNames.h"
 #include "InspectorInstrumentation.h"
+#include "MainFrame.h"
 #include "ManifestParser.h"
 #include "Page.h"
 #include "ProgressTracker.h"
 #include "ResourceHandle.h"
 #include "SecurityOrigin.h"
 #include "Settings.h"
 #include <wtf/HashMap.h>
 #include <wtf/MainThread.h>
 
 namespace WebCore {
@@ -482,21 +483,21 @@ PassRefPtr<ResourceHandle> ApplicationCacheGroup::createResourceHandle(const URL
                 request.setHTTPHeaderField(HTTPHeaderName::IfModifiedSince, lastModified);
             if (!eTag.isEmpty())
                 request.setHTTPHeaderField(HTTPHeaderName::IfNoneMatch, eTag);
         }
     }
 
     RefPtr<ResourceHandle> handle = ResourceHandle::create(m_frame->loader().networkingContext(), request, this, false, true);
 
     // Because willSendRequest only gets called during redirects, we initialize
     // the identifier and the first willSendRequest here.
-    m_currentResourceIdentifier = m_frame->page()->progress().createUniqueIdentifier();
+    m_currentResourceIdentifier = m_frame->mainFrame().loader().activeDocumentLoader()->createUniqueIdentifier();
     ResourceResponse redirectResponse = ResourceResponse();
     InspectorInstrumentation::willSendRequest(m_frame, m_currentResourceIdentifier, m_frame->loader().documentLoader(), request, redirectResponse);
     return handle;
 }
 
 void ApplicationCacheGroup::didReceiveResponse(ResourceHandle* handle, const ResourceResponse& response)
 {
     DocumentLoader* loader = (handle == m_manifestHandle) ? nullptr : m_frame->loader().documentLoader();
     InspectorInstrumentationCookie cookie = InspectorInstrumentation::willReceiveResourceResponse(m_frame);
     InspectorInstrumentation::didReceiveResourceResponse(cookie, m_currentResourceIdentifier, loader, response, 0);
-- 
2.2.2

