From 21379af352cfa17358e402e7af0a561015e45ade Mon Sep 17 00:00:00 2001
From: "Brian J. Burg" <burg@cs.washington.edu>
Date: Mon, 2 Feb 2015 13:22:04 -0800
Subject: [PATCH] FIXUP enum phantom types /viewstate thing

---
 ...nerate-unchecked-enum.json-TestReplayInputs.cpp | 130 ++++++++++-----------
 ...generate-unchecked-enum.json-TestReplayInputs.h |  60 ++++++----
 .../scripts/tests/generate-unchecked-enum.json     |  40 ++++---
 3 files changed, 124 insertions(+), 106 deletions(-)

diff --git a/Source/JavaScriptCore/replay/scripts/tests/expected/generate-unchecked-enum.json-TestReplayInputs.cpp b/Source/JavaScriptCore/replay/scripts/tests/expected/generate-unchecked-enum.json-TestReplayInputs.cpp
index 02811e2..c82a7d1 100644
--- a/Source/JavaScriptCore/replay/scripts/tests/expected/generate-unchecked-enum.json-TestReplayInputs.cpp
+++ b/Source/JavaScriptCore/replay/scripts/tests/expected/generate-unchecked-enum.json-TestReplayInputs.cpp
@@ -24,200 +24,200 @@
  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  */
 
 // DO NOT EDIT THIS FILE. It is automatically generated from generate-unchecked-enum.json
 // by the script: JavaScriptCore/replay/scripts/CodeGeneratorReplayInputs.py
 
 #include "config.h"
 #include "generate-unchecked-enum.json-TestReplayInputs.h"
 
 #if ENABLE(WEB_REPLAY)
+#include "GamepadKey.h"
 #include "InternalNamespaceImplIncludeDummy.h"
 #include <platform/ExternalNamespaceImplIncludeDummy.h>
-#include <platform/GamepadKey.h>
 
 namespace Test {
-HandleViewStateChange::HandleViewStateChange(WebCore::ViewState::Flags flags)
+HandleViewStateChange::HandleViewStateChange(ViewState::Flags flags)
     : WebCore::EventLoopInput<HandleViewStateChange>()
     , m_flags(flags)
 {
 }
 
 HandleViewStateChange::~HandleViewStateChange()
 {
 }
 
-HandleGamepadPress::HandleGamepadPress(WebCore::GamepadKey keys)
+HandleGamepadPress::HandleGamepadPress(GamepadKey keys)
     : WebCore::EventLoopInput<HandleGamepadPress>()
     , m_keys(keys)
 {
 }
 
 HandleGamepadPress::~HandleGamepadPress()
 {
 }
 } // namespace Test
 
 namespace JSC {
-const AtomicString& InputTraits<Test::HandleViewStateChange>::type()
+const String& InputTraits<Test::HandleViewStateChange>::type()
 {
-    static NeverDestroyed<const AtomicString> type("HandleViewStateChange", AtomicString::ConstructFromLiteral);
+    static NeverDestroyed<const String> type(ASCIILiteral("HandleViewStateChange"));
     return type;
 }
 
 void InputTraits<Test::HandleViewStateChange>::encode(EncodedValue& encodedValue, const Test::HandleViewStateChange& input)
 {
-    encodedValue.put<Phantom<WebCore::UncheckedEnums, WebCore::UncheckedEnums::ViewStateFlags>>(ASCIILiteral("flags"), input.flags());
+    encodedValue.put<Phantom<Test::UncheckedEnums, Test::UncheckedEnums::ViewStateFlags>>(ASCIILiteral("flags"), input.flags());
 }
 
 bool InputTraits<Test::HandleViewStateChange>::decode(EncodedValue& encodedValue, std::unique_ptr<Test::HandleViewStateChange>& input)
 {
-    WebCore::ViewState::Flags flags;
-    if (!encodedValue.get<Phantom<WebCore::UncheckedEnums, WebCore::UncheckedEnums::ViewStateFlags>>(ASCIILiteral("flags"), flags))
+    Test::ViewState::Flags flags;
+    if (!encodedValue.get<Phantom<Test::UncheckedEnums, Test::UncheckedEnums::ViewStateFlags>>(ASCIILiteral("flags"), flags))
         return false;
 
     input = std::make_unique<Test::HandleViewStateChange>(flags);
     return true;
 }
 
-const AtomicString& InputTraits<Test::HandleGamepadPress>::type()
+const String& InputTraits<Test::HandleGamepadPress>::type()
 {
-    static NeverDestroyed<const AtomicString> type("HandleGamepadPress", AtomicString::ConstructFromLiteral);
+    static NeverDestroyed<const String> type(ASCIILiteral("HandleGamepadPress"));
     return type;
 }
 
 void InputTraits<Test::HandleGamepadPress>::encode(EncodedValue& encodedValue, const Test::HandleGamepadPress& input)
 {
-    encodedValue.put<Phantom<WebCore::UncheckedEnums, WebCore::UncheckedEnums::GamepadKey>>(ASCIILiteral("keys"), input.keys());
+    encodedValue.put<Phantom<Test::UncheckedEnums, Test::UncheckedEnums::GamepadKey>>(ASCIILiteral("keys"), input.keys());
 }
 
 bool InputTraits<Test::HandleGamepadPress>::decode(EncodedValue& encodedValue, std::unique_ptr<Test::HandleGamepadPress>& input)
 {
-    WebCore::GamepadKey keys;
-    if (!encodedValue.get<Phantom<WebCore::UncheckedEnums, WebCore::UncheckedEnums::GamepadKey>>(ASCIILiteral("keys"), keys))
+    Test::GamepadKey keys;
+    if (!encodedValue.get<Phantom<Test::UncheckedEnums, Test::UncheckedEnums::GamepadKey>>(ASCIILiteral("keys"), keys))
         return false;
 
     input = std::make_unique<Test::HandleGamepadPress>(keys);
     return true;
 }
-EncodedValue EncodingTraits<Phantom<WebCore::UncheckedEnums, WebCore::UncheckedEnums::GamepadKey>>::encodeValue(const WebCore::GamepadKey& enumValue)
+EncodedValue EncodingTraits<Phantom<Test::UncheckedEnums, Test::UncheckedEnums::GamepadKey>>::encodeValue(const Test::GamepadKey& enumValue)
 {
     EncodedValue encodedValue = EncodedValue::createArray();
-    if (enumValue & WebCore::OEM_UP) {
+    if (enumValue & Test::OEM_UP) {
         encodedValue.append<String>(ASCIILiteral("OEM_UP"));
-        if (enumValue == WebCore::OEM_UP)
+        if (enumValue == Test::OEM_UP)
             return encodedValue;
     }
-    if (enumValue & WebCore::OEM_DOWN) {
+    if (enumValue & Test::OEM_DOWN) {
         encodedValue.append<String>(ASCIILiteral("OEM_DOWN"));
-        if (enumValue == WebCore::OEM_DOWN)
+        if (enumValue == Test::OEM_DOWN)
             return encodedValue;
     }
-    if (enumValue & WebCore::OEM_LEFT) {
+    if (enumValue & Test::OEM_LEFT) {
         encodedValue.append<String>(ASCIILiteral("OEM_LEFT"));
-        if (enumValue == WebCore::OEM_LEFT)
+        if (enumValue == Test::OEM_LEFT)
             return encodedValue;
     }
-    if (enumValue & WebCore::OEM_RIGHT) {
+    if (enumValue & Test::OEM_RIGHT) {
         encodedValue.append<String>(ASCIILiteral("OEM_RIGHT"));
-        if (enumValue == WebCore::OEM_RIGHT)
+        if (enumValue == Test::OEM_RIGHT)
             return encodedValue;
     }
-    if (enumValue & WebCore::OEM_LT) {
+    if (enumValue & Test::OEM_LT) {
         encodedValue.append<String>(ASCIILiteral("OEM_LT"));
-        if (enumValue == WebCore::OEM_LT)
+        if (enumValue == Test::OEM_LT)
             return encodedValue;
     }
-    if (enumValue & WebCore::OEM_RT) {
+    if (enumValue & Test::OEM_RT) {
         encodedValue.append<String>(ASCIILiteral("OEM_RT"));
-        if (enumValue == WebCore::OEM_RT)
+        if (enumValue == Test::OEM_RT)
             return encodedValue;
     }
     return encodedValue;
 }
 
-bool EncodingTraits<Phantom<WebCore::UncheckedEnums, WebCore::UncheckedEnums::GamepadKey>>::decodeValue(EncodedValue& encodedValue, WebCore::GamepadKey& enumValue)
+bool EncodingTraits<Phantom<Test::UncheckedEnums, Test::UncheckedEnums::GamepadKey>>::decodeValue(EncodedValue& encodedValue, Test::GamepadKey& enumValue)
 {
     Vector<String> enumStrings;
     if (!EncodingTraits<Vector<String>>::decodeValue(encodedValue, enumStrings))
         return false;
 
-    for (String enumString : enumStrings) {
+    for (const String& enumString : enumStrings) {
         if (enumString == "OEM_UP")
-            enumValue = static_cast<WebCore::GamepadKey>(enumValue | WebCore::OEM_UP);
-        if (enumString == "OEM_DOWN")
-            enumValue = static_cast<WebCore::GamepadKey>(enumValue | WebCore::OEM_DOWN);
-        if (enumString == "OEM_LEFT")
-            enumValue = static_cast<WebCore::GamepadKey>(enumValue | WebCore::OEM_LEFT);
-        if (enumString == "OEM_RIGHT")
-            enumValue = static_cast<WebCore::GamepadKey>(enumValue | WebCore::OEM_RIGHT);
-        if (enumString == "OEM_LT")
-            enumValue = static_cast<WebCore::GamepadKey>(enumValue | WebCore::OEM_LT);
-        if (enumString == "OEM_RT")
-            enumValue = static_cast<WebCore::GamepadKey>(enumValue | WebCore::OEM_RT);
+            enumValue = static_cast<Test::GamepadKey>(enumValue | Test::OEM_UP);
+        else if (enumString == "OEM_DOWN")
+            enumValue = static_cast<Test::GamepadKey>(enumValue | Test::OEM_DOWN);
+        else if (enumString == "OEM_LEFT")
+            enumValue = static_cast<Test::GamepadKey>(enumValue | Test::OEM_LEFT);
+        else if (enumString == "OEM_RIGHT")
+            enumValue = static_cast<Test::GamepadKey>(enumValue | Test::OEM_RIGHT);
+        else if (enumString == "OEM_LT")
+            enumValue = static_cast<Test::GamepadKey>(enumValue | Test::OEM_LT);
+        else if (enumString == "OEM_RT")
+            enumValue = static_cast<Test::GamepadKey>(enumValue | Test::OEM_RT);
     }
 
     return true;
 }
 
-EncodedValue EncodingTraits<Phantom<WebCore::UncheckedEnums, WebCore::UncheckedEnums::ViewStateFlags>>::encodeValue(const WebCore::ViewState::Flags& enumValue)
+EncodedValue EncodingTraits<Phantom<Test::UncheckedEnums, Test::UncheckedEnums::ViewStateFlags>>::encodeValue(const Test::ViewState::Flags& enumValue)
 {
     EncodedValue encodedValue = EncodedValue::createArray();
-    if (enumValue & WebCore::ViewState::WindowIsActive) {
+    if (enumValue & Test::ViewState::WindowIsActive) {
         encodedValue.append<String>(ASCIILiteral("WindowIsActive"));
-        if (enumValue == WebCore::ViewState::WindowIsActive)
+        if (enumValue == Test::ViewState::WindowIsActive)
             return encodedValue;
     }
-    if (enumValue & WebCore::ViewState::IsFocused) {
+    if (enumValue & Test::ViewState::IsFocused) {
         encodedValue.append<String>(ASCIILiteral("IsFocused"));
-        if (enumValue == WebCore::ViewState::IsFocused)
+        if (enumValue == Test::ViewState::IsFocused)
             return encodedValue;
     }
-    if (enumValue & WebCore::ViewState::IsVisible) {
+    if (enumValue & Test::ViewState::IsVisible) {
         encodedValue.append<String>(ASCIILiteral("IsVisible"));
-        if (enumValue == WebCore::ViewState::IsVisible)
+        if (enumValue == Test::ViewState::IsVisible)
             return encodedValue;
     }
-    if (enumValue & WebCore::ViewState::IsVisibleOrOccluded) {
+    if (enumValue & Test::ViewState::IsVisibleOrOccluded) {
         encodedValue.append<String>(ASCIILiteral("IsVisibleOrOccluded"));
-        if (enumValue == WebCore::ViewState::IsVisibleOrOccluded)
+        if (enumValue == Test::ViewState::IsVisibleOrOccluded)
             return encodedValue;
     }
-    if (enumValue & WebCore::ViewState::IsInWindow) {
+    if (enumValue & Test::ViewState::IsInWindow) {
         encodedValue.append<String>(ASCIILiteral("IsInWindow"));
-        if (enumValue == WebCore::ViewState::IsInWindow)
+        if (enumValue == Test::ViewState::IsInWindow)
             return encodedValue;
     }
-    if (enumValue & WebCore::ViewState::IsVisuallyIdle) {
+    if (enumValue & Test::ViewState::IsVisuallyIdle) {
         encodedValue.append<String>(ASCIILiteral("IsVisuallyIdle"));
-        if (enumValue == WebCore::ViewState::IsVisuallyIdle)
+        if (enumValue == Test::ViewState::IsVisuallyIdle)
             return encodedValue;
     }
     return encodedValue;
 }
 
-bool EncodingTraits<Phantom<WebCore::UncheckedEnums, WebCore::UncheckedEnums::ViewStateFlags>>::decodeValue(EncodedValue& encodedValue, WebCore::ViewState::Flags& enumValue)
+bool EncodingTraits<Phantom<Test::UncheckedEnums, Test::UncheckedEnums::ViewStateFlags>>::decodeValue(EncodedValue& encodedValue, Test::ViewState::Flags& enumValue)
 {
     Vector<String> enumStrings;
     if (!EncodingTraits<Vector<String>>::decodeValue(encodedValue, enumStrings))
         return false;
 
-    for (String enumString : enumStrings) {
+    for (const String& enumString : enumStrings) {
         if (enumString == "WindowIsActive")
-            enumValue = static_cast<WebCore::ViewState::Flags>(enumValue | WebCore::ViewState::WindowIsActive);
-        if (enumString == "IsFocused")
-            enumValue = static_cast<WebCore::ViewState::Flags>(enumValue | WebCore::ViewState::IsFocused);
-        if (enumString == "IsVisible")
-            enumValue = static_cast<WebCore::ViewState::Flags>(enumValue | WebCore::ViewState::IsVisible);
-        if (enumString == "IsVisibleOrOccluded")
-            enumValue = static_cast<WebCore::ViewState::Flags>(enumValue | WebCore::ViewState::IsVisibleOrOccluded);
-        if (enumString == "IsInWindow")
-            enumValue = static_cast<WebCore::ViewState::Flags>(enumValue | WebCore::ViewState::IsInWindow);
-        if (enumString == "IsVisuallyIdle")
-            enumValue = static_cast<WebCore::ViewState::Flags>(enumValue | WebCore::ViewState::IsVisuallyIdle);
+            enumValue = static_cast<Test::ViewState::Flags>(enumValue | Test::ViewState::WindowIsActive);
+        else if (enumString == "IsFocused")
+            enumValue = static_cast<Test::ViewState::Flags>(enumValue | Test::ViewState::IsFocused);
+        else if (enumString == "IsVisible")
+            enumValue = static_cast<Test::ViewState::Flags>(enumValue | Test::ViewState::IsVisible);
+        else if (enumString == "IsVisibleOrOccluded")
+            enumValue = static_cast<Test::ViewState::Flags>(enumValue | Test::ViewState::IsVisibleOrOccluded);
+        else if (enumString == "IsInWindow")
+            enumValue = static_cast<Test::ViewState::Flags>(enumValue | Test::ViewState::IsInWindow);
+        else if (enumString == "IsVisuallyIdle")
+            enumValue = static_cast<Test::ViewState::Flags>(enumValue | Test::ViewState::IsVisuallyIdle);
     }
 
     return true;
 }
 } // namespace JSC
 
 #endif // ENABLE(WEB_REPLAY)
diff --git a/Source/JavaScriptCore/replay/scripts/tests/expected/generate-unchecked-enum.json-TestReplayInputs.h b/Source/JavaScriptCore/replay/scripts/tests/expected/generate-unchecked-enum.json-TestReplayInputs.h
index 33d492b..b686007 100644
--- a/Source/JavaScriptCore/replay/scripts/tests/expected/generate-unchecked-enum.json-TestReplayInputs.h
+++ b/Source/JavaScriptCore/replay/scripts/tests/expected/generate-unchecked-enum.json-TestReplayInputs.h
@@ -25,90 +25,106 @@
  */
 
 // DO NOT EDIT THIS FILE. It is automatically generated from generate-unchecked-enum.json
 // by the script: JavaScriptCore/replay/scripts/CodeGeneratorReplayInputs.py
 
 #ifndef generate_unchecked_enum_json_TestReplayInputs_h
 #define generate_unchecked_enum_json_TestReplayInputs_h
 
 #if ENABLE(WEB_REPLAY)
 #include "InternalNamespaceHeaderIncludeDummy.h"
-#include <page/ViewState.h>
+#include "ViewState.h"
 #include <platform/ExternalNamespaceHeaderIncludeDummy.h>
 
-namespace WebCore {
+namespace Test {
 enum GamepadKey : unsigned;
 }
 
 
 namespace Test {
 class HandleViewStateChange;
 class HandleGamepadPress;
 } // namespace Test
 
+namespace Test {
+enum class UncheckedEnums {
+    GamepadKey,
+    ViewStateFlags,
+};
+}
 
 namespace JSC {
-template<> struct InputTraits<Test::HandleViewStateChange> {
+template<> struct TEST_EXPORT_MACRO InputTraits<Test::HandleViewStateChange> {
     static InputQueue queue() { return InputQueue::EventLoopInput; }
-    static const AtomicString& type();
+    static const String& type();
 
     static void encode(JSC::EncodedValue&, const Test::HandleViewStateChange&);
     static bool decode(JSC::EncodedValue&, std::unique_ptr<Test::HandleViewStateChange>&);
 };
 
-template<> struct InputTraits<Test::HandleGamepadPress> {
+template<> struct TEST_EXPORT_MACRO InputTraits<Test::HandleGamepadPress> {
     static InputQueue queue() { return InputQueue::EventLoopInput; }
-    static const AtomicString& type();
+    static const String& type();
 
     static void encode(JSC::EncodedValue&, const Test::HandleGamepadPress&);
     static bool decode(JSC::EncodedValue&, std::unique_ptr<Test::HandleGamepadPress>&);
 };
-template<> struct EncodingTraits<Phantom<WebCore::UncheckedEnums, WebCore::UncheckedEnums::GamepadKey>> {
-    typedef WebCore::GamepadKey DecodedType;
+template<> struct TEST_EXPORT_MACRO EncodingTraits<Phantom<Test::UncheckedEnums, Test::UncheckedEnums::GamepadKey>> {
+    typedef const Test::GamepadKey InputType;
+    typedef Test::GamepadKey OutputType;
 
-    static EncodedValue encodeValue(const WebCore::GamepadKey& value);
-    static bool decodeValue(EncodedValue&, WebCore::GamepadKey& value);
+    static EncodedValue encodeValue(const Test::GamepadKey& value);
+    static bool decodeValue(EncodedValue&, Test::GamepadKey& value);
 };
 
-template<> struct EncodingTraits<Phantom<WebCore::UncheckedEnums, WebCore::UncheckedEnums::ViewStateFlags>> {
-    typedef WebCore::ViewState::Flags DecodedType;
+template<> struct TEST_EXPORT_MACRO EncodingTraits<Phantom<Test::UncheckedEnums, Test::UncheckedEnums::ViewStateFlags>> {
+    typedef const Test::ViewState::Flags InputType;
+    typedef Test::ViewState::Flags OutputType;
 
-    static EncodedValue encodeValue(const WebCore::ViewState::Flags& value);
-    static bool decodeValue(EncodedValue&, WebCore::ViewState::Flags& value);
+    static EncodedValue encodeValue(const Test::ViewState::Flags& value);
+    static bool decodeValue(EncodedValue&, Test::ViewState::Flags& value);
 };
 } // namespace JSC
 
 namespace Test {
 class HandleViewStateChange : public WebCore::EventLoopInput<HandleViewStateChange> {
 public:
-    HandleViewStateChange(WebCore::ViewState::Flags flags);
+    TEST_EXPORT_MACRO HandleViewStateChange(ViewState::Flags flags);
     virtual ~HandleViewStateChange();
 
     // EventLoopInput API
-    virtual void dispatchOnPage(WebCore::Page&) override final;
-    WebCore::ViewState::Flags flags() const { return m_flags; }
+    virtual void dispatch(WebCore::Page&) override final;
+    ViewState::Flags flags() const { return m_flags; }
 private:
-    WebCore::ViewState::Flags m_flags;
+    ViewState::Flags m_flags;
 };
 
 class HandleGamepadPress : public WebCore::EventLoopInput<HandleGamepadPress> {
 public:
-    HandleGamepadPress(WebCore::GamepadKey keys);
+    TEST_EXPORT_MACRO HandleGamepadPress(GamepadKey keys);
     virtual ~HandleGamepadPress();
 
     // EventLoopInput API
-    virtual void dispatchOnPage(WebCore::Page&) override final;
-    WebCore::GamepadKey keys() const { return m_keys; }
+    virtual void dispatch(WebCore::Page&) override final;
+    GamepadKey keys() const { return m_keys; }
 private:
-    WebCore::GamepadKey m_keys;
+    GamepadKey m_keys;
 };
 } // namespace Test
 
+SPECIALIZE_TYPE_TRAITS_BEGIN(Test::HandleViewStateChange)
+    static bool isType(const NondeterministicInputBase& input) { return input.type() == InputTraits<Test::HandleViewStateChange>::type(); }
+SPECIALIZE_TYPE_TRAITS_END()
+
+SPECIALIZE_TYPE_TRAITS_BEGIN(Test::HandleGamepadPress)
+    static bool isType(const NondeterministicInputBase& input) { return input.type() == InputTraits<Test::HandleGamepadPress>::type(); }
+SPECIALIZE_TYPE_TRAITS_END()
+
 #define TEST_REPLAY_INPUT_NAMES_FOR_EACH(macro) \
     macro(HandleViewStateChange) \
     macro(HandleGamepadPress) \
     \
 // end of TEST_REPLAY_INPUT_NAMES_FOR_EACH
 
 #endif // ENABLE(WEB_REPLAY)
 
 #endif // generate-unchecked-enum.json-TestReplayInputs_h
diff --git a/Source/JavaScriptCore/replay/scripts/tests/generate-unchecked-enum.json b/Source/JavaScriptCore/replay/scripts/tests/generate-unchecked-enum.json
index 811420d..150cf07 100644
--- a/Source/JavaScriptCore/replay/scripts/tests/generate-unchecked-enum.json
+++ b/Source/JavaScriptCore/replay/scripts/tests/generate-unchecked-enum.json
@@ -1,13 +1,13 @@
 {
     "types": {
-        "WebCore": [
+        "Test": [
             {
                 "name": "Flags", "mode": "SCALAR",
                 "flags": ["ENUM", "UNCHECKED"],
                 "enclosing_class": "ViewState",
                 "values": [
                     "WindowIsActive",
                     "IsFocused",
                     "IsVisible",
                     "IsVisibleOrOccluded",
                     "IsInWindow",
@@ -24,29 +24,31 @@
                     "OEM_LEFT",
                     "OEM_RIGHT",
                     "OEM_LT",
                     "OEM_RT"
                 ],
                 "header": "platform/GamepadKey.h"
             }
         ]
     },
 
-    "inputs": [
-        {
-            "name": "HandleViewStateChange",
-            "description": "",
-            "queue": "EVENT_LOOP",
-            "members": [
-                { "name": "flags", "type": "ViewState::Flags" }
-            ]
-        },
-        {
-            "name": "HandleGamepadPress",
-            "description": "",
-            "queue": "EVENT_LOOP",
-            "members": [
-                { "name": "keys", "type": "GamepadKey" }
-            ]
-        }
-    ]
+    "inputs": {
+        "Test": [
+            {
+                "name": "HandleViewStateChange",
+                "description": "",
+                "queue": "EVENT_LOOP",
+                "members": [
+                    { "name": "flags", "type": "ViewState::Flags" }
+                ]
+            },
+            {
+                "name": "HandleGamepadPress",
+                "description": "",
+                "queue": "EVENT_LOOP",
+                "members": [
+                    { "name": "keys", "type": "GamepadKey" }
+                ]
+            }
+        ]
+    }
 }
-- 
2.2.2

