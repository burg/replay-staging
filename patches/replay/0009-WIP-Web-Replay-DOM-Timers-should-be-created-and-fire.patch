From a6b3976fcb3809157db2685743b222ea4d7998ef Mon Sep 17 00:00:00 2001
From: "Brian J. Burg" <burg@cs.washington.edu>
Date: Wed, 16 Jul 2014 14:58:22 -0700
Subject: [PATCH] [WIP] Web Replay: DOM Timers should be created and fired
 deterministically Need the bug URL (OOPS!).

Reviewed by NOBODY (OOPS!).

Async mechanisms such as window.setTimeout are nondeterministic because the
interleaving of callbacks and other event loop items (which run JS) is also
nondeterministic.

This patch makes DOMTimer optionally deterministic by using custom subclasses
during capturing and replaying. InstrumentedDOMTimer captures timeoutId when
the timer is created, and also captures the instant when the callback fires
relative to other event loop inputs. DeterministicDOMTimer uses the memoized
timeoutId input, and manually invokes timer callbacks rather than scheduling
them through the normal timer heap.

In order to intercept timer creation and firing with subclasses, DOMTimer was
refactored to poison replay-scheduled timers and split callback setup from
the timer constructor.

WIP NOTE: The memoized timeoutId is only used for debugging purposes.

WIP NOTE: ideally, we would not need to use subclasses, and DOMTimer would inherit
from ReplayableTimer rather than SuspendableTimer. This patch may be rewritten
when ReplayableTimer is able to support SuspendableTimer operations.

No new tests (OOPS!).

[TEST STRATEGY]
 * Create and fire multiple DOM timers.
 * Test that timer does not fire if playback is paused.

* page/DOMTimer.cpp:
(WebCore::InstrumentedDOMTimer::~InstrumentedDOMTimer): Added.
(WebCore::InstrumentedDOMTimer::InstrumentedDOMTimer): Added.
(WebCore::InstrumentedDOMTimer::start): Save the timeoutId as a memoized input.
(WebCore::InstrumentedDOMTimer::fired): Save the firing as an event loop input.
(WebCore::DeterministicDOMTimer::~DeterministicDOMTimer): Added.
(WebCore::DeterministicDOMTimer::DeterministicDOMTimer):
(WebCore::DeterministicDOMTimer::start): Use the memoized timeoutId.
(WebCore::DOMTimer::DOMTimer): Split construction from scheduling the timer.
Move the singleShot parameter to DOMTimer::start since it isn't used here now.
(WebCore::DOMTimer::~DOMTimer):
(WebCore::DOMTimer::start): Actually schedule the timer here.
(WebCore::DOMTimer::install): Create instrumented timers during capture/replay.
(WebCore::DOMTimer::fired):

* page/DOMTimer.h: Remove final keyword from class, adjust visibility.
* replay/ReplayInputDispatchMethods.cpp:
(WebCore::DOMTimerFired::dispatch): Added.
* replay/WebInputs.json: Add DOMTimerFired and DOMTimerCreated.
---
 Source/WebCore/ChangeLog                           |  54 ++++++++
 Source/WebCore/page/DOMTimer.cpp                   | 137 +++++++++++++++++++--
 Source/WebCore/page/DOMTimer.h                     |  19 ++-
 .../WebCore/replay/ReplayInputDispatchMethods.cpp  |  11 ++
 Source/WebCore/replay/WebInputs.json               |  18 +++
 5 files changed, 225 insertions(+), 14 deletions(-)

diff --git a/Source/WebCore/ChangeLog b/Source/WebCore/ChangeLog
index 777b979..b69e324 100644
--- a/Source/WebCore/ChangeLog
+++ b/Source/WebCore/ChangeLog
@@ -1,10 +1,64 @@
+2014-07-16  Brian J. Burg  <burg@cs.washington.edu>
+
+        [WIP] Web Replay: DOM Timers should be created and fired deterministically
+        Need the bug URL (OOPS!).
+
+        Reviewed by NOBODY (OOPS!).
+
+        Async mechanisms such as window.setTimeout are nondeterministic because the
+        interleaving of callbacks and other event loop items (which run JS) is also
+        nondeterministic.
+
+        This patch makes DOMTimer optionally deterministic by using custom subclasses
+        during capturing and replaying. InstrumentedDOMTimer captures timeoutId when
+        the timer is created, and also captures the instant when the callback fires
+        relative to other event loop inputs. DeterministicDOMTimer uses the memoized
+        timeoutId input, and manually invokes timer callbacks rather than scheduling
+        them through the normal timer heap.
+
+        In order to intercept timer creation and firing with subclasses, DOMTimer was
+        refactored to poison replay-scheduled timers and split callback setup from
+        the timer constructor.
+
+        WIP NOTE: The memoized timeoutId is only used for debugging purposes.
+
+        WIP NOTE: ideally, we would not need to use subclasses, and DOMTimer would inherit
+        from ReplayableTimer rather than SuspendableTimer. This patch may be rewritten
+        when ReplayableTimer is able to support SuspendableTimer operations.
+
+        No new tests (OOPS!).
+
+        [TEST STRATEGY]
+         * Create and fire multiple DOM timers.
+         * Test that timer does not fire if playback is paused.
+
+        * page/DOMTimer.cpp:
+        (WebCore::InstrumentedDOMTimer::~InstrumentedDOMTimer): Added.
+        (WebCore::InstrumentedDOMTimer::InstrumentedDOMTimer): Added.
+        (WebCore::InstrumentedDOMTimer::start): Save the timeoutId as a memoized input.
+        (WebCore::InstrumentedDOMTimer::fired): Save the firing as an event loop input.
+        (WebCore::DeterministicDOMTimer::~DeterministicDOMTimer): Added.
+        (WebCore::DeterministicDOMTimer::DeterministicDOMTimer):
+        (WebCore::DeterministicDOMTimer::start): Use the memoized timeoutId.
+        (WebCore::DOMTimer::DOMTimer): Split construction from scheduling the timer.
+        Move the singleShot parameter to DOMTimer::start since it isn't used here now.
+        (WebCore::DOMTimer::~DOMTimer):
+        (WebCore::DOMTimer::start): Actually schedule the timer here.
+        (WebCore::DOMTimer::install): Create instrumented timers during capture/replay.
+        (WebCore::DOMTimer::fired):
+
+        * page/DOMTimer.h: Remove final keyword from class, adjust visibility.
+        * replay/ReplayInputDispatchMethods.cpp:
+        (WebCore::DOMTimerFired::dispatch): Added.
+        * replay/WebInputs.json: Add DOMTimerFired and DOMTimerCreated.
+
 2014-07-15  Brian J. Burg  <burg@cs.washington.edu>
 
         Web Replay: save and restore page history state at main frame navigations
         https://bugs.webkit.org/show_bug.cgi?id=131043
 
         Reviewed by NOBODY (OOPS!).
 
         To make uses of window.history deterministic, we must save and restore
         the contents of the back-forward list at each main frame navigation.
         This can be done before the initial navigation that's kicked off when
diff --git a/Source/WebCore/page/DOMTimer.cpp b/Source/WebCore/page/DOMTimer.cpp
index 9c3d794..297a0b1 100644
--- a/Source/WebCore/page/DOMTimer.cpp
+++ b/Source/WebCore/page/DOMTimer.cpp
@@ -20,20 +20,21 @@
  * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
  * OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  *
  */
 
 #include "config.h"
 #include "DOMTimer.h"
 
+#include "Document.h"
 #include "FrameView.h"
 #include "HTMLPlugInElement.h"
 #include "InspectorInstrumentation.h"
 #include "Logging.h"
 #include "Page.h"
 #include "PluginViewBase.h"
 #include "ScheduledAction.h"
 #include "ScriptExecutionContext.h"
 #include "Settings.h"
 #include "UserGestureIndicator.h"
@@ -43,20 +44,26 @@
 #include <wtf/NeverDestroyed.h>
 #include <wtf/StdLibExtras.h>
 
 #if PLATFORM(IOS)
 #include "Chrome.h"
 #include "ChromeClient.h"
 #include "Frame.h"
 #include "WKContentObservation.h"
 #endif
 
+#if ENABLE(WEB_REPLAY)
+#include "CapturingInputCursor.h"
+#include "SerializationMethods.h"
+#include "WebReplayInputs.h"
+#endif
+
 namespace WebCore {
 
 static const int maxIntervalForUserGestureForwarding = 1000; // One second matches Gecko.
 static const int minIntervalForNonUserObservableChangeTimers = 1000; // Empirically determined to maximize battery life.
 static const int maxTimerNestingLevel = 5;
 static const double oneMillisecond = 0.001;
 
 class DOMTimerFireState {
 public:
     explicit DOMTimerFireState(ScriptExecutionContext& context)
@@ -179,67 +186,179 @@ private:
 
 bool NestedTimersMap::isTrackingNestedTimers = false;
 
 static inline bool shouldForwardUserGesture(int interval, int nestingLevel)
 {
     return UserGestureIndicator::processingUserGesture()
         && interval <= maxIntervalForUserGestureForwarding
         && !nestingLevel; // Gestures should not be forwarded to nested timers.
 }
 
-DOMTimer::DOMTimer(ScriptExecutionContext& context, std::unique_ptr<ScheduledAction> action, int interval, bool singleShot)
+#if ENABLE(WEB_REPLAY)
+class InstrumentedDOMTimer final : public DOMTimer {
+public:
+    InstrumentedDOMTimer(ScriptExecutionContext&, std::unique_ptr<ScheduledAction>, int originalInterval);
+    virtual ~InstrumentedDOMTimer() { }
+protected:
+    virtual void start(bool singleShot) override;
+    virtual void fired() override;
+};
+
+class DeterministicDOMTimer final : public DOMTimer {
+public:
+    DeterministicDOMTimer(ScriptExecutionContext&, std::unique_ptr<ScheduledAction>, int originalInterval);
+    virtual ~DeterministicDOMTimer() { }
+protected:
+    virtual void start(bool singleShot) override;
+};
+
+InstrumentedDOMTimer::InstrumentedDOMTimer(ScriptExecutionContext& context, std::unique_ptr<ScheduledAction> action, int originalInterval)
+    : DOMTimer(context, WTF::move(action), originalInterval)
+{
+}
+
+void InstrumentedDOMTimer::start(bool singleShot)
+{
+    // Schedule the timer normally, then save the timeoutId assigned by the execution context.
+    DOMTimer::start(singleShot);
+    if (!scriptExecutionContext()->isDocument())
+        return;
+
+    Document& document = downcast<Document>(*scriptExecutionContext());
+    InputCursor& cursor = document.inputCursor();
+    ASSERT(cursor.isCapturing());
+
+    cursor.appendInput<DOMTimerCreated>(frameIndexFromDocument(&document), m_timeoutId);
+}
+
+void InstrumentedDOMTimer::fired()
+{
+    ASSERT(scriptExecutionContext());
+    if (!scriptExecutionContext()->isDocument()) {
+        DOMTimer::fired();
+        return;
+    }
+
+    Document& document = downcast<Document>(*scriptExecutionContext());
+    InputCursor& cursor = document.inputCursor();
+    // The timer could fire after capturing has stopped, since we don't replace
+    // instrumented DOM timers with normal DOM timers.
+    if (!cursor.isCapturing()) {
+        DOMTimer::fired();
+        return;
+    }
+
+    cursor.appendInput<DOMTimerFired>(frameIndexFromDocument(&document), m_timeoutId);
+
+    EventLoopInputExtent extent(cursor);
+    DOMTimer::fired();
+}
+
+DeterministicDOMTimer::DeterministicDOMTimer(ScriptExecutionContext& context, std::unique_ptr<ScheduledAction> action, int originalInterval)
+    : DOMTimer(context, WTF::move(action), originalInterval)
+{
+    // override the default behavior set in DOMTimer constructor.
+    m_shouldScheduleNormally = false;
+}
+
+void DeterministicDOMTimer::start(bool singleShot)
+{
+    if (!scriptExecutionContext()->isDocument())
+        return;
+
+    Document& document = downcast<Document>(*scriptExecutionContext());
+    InputCursor& cursor = document.inputCursor();
+    ASSERT(cursor.isReplaying());
+
+    DOMTimerCreated* input = cursor.fetchInput<DOMTimerCreated>();
+    // Error handling case: if fetch failed, schedule normally.
+    if (!input) {
+        DOMTimer::start(singleShot);
+        return;
+    }
+
+    RefPtr<DOMTimer> reference = adoptRef(this);
+
+    // Set the timeoutId from memoized data, and register the timer with the execution context.
+    ASSERT(input->frameIndex() == frameIndexFromDocument(&document));
+    m_timeoutId = input->timerIdentifier();
+    bool wasAdded = scriptExecutionContext()->addTimeout(m_timeoutId, this);
+    ASSERT_UNUSED(wasAdded, wasAdded);
+}
+#endif // ENABLE(WEB_REPLAY)
+
+DOMTimer::DOMTimer(ScriptExecutionContext& context, std::unique_ptr<ScheduledAction> action, int interval)
     : SuspendableTimer(context)
     , m_nestingLevel(context.timerNestingLevel())
     , m_action(WTF::move(action))
     , m_originalInterval(interval)
     , m_throttleState(Undetermined)
     , m_currentTimerInterval(intervalClampedToMinimum())
     , m_shouldForwardUserGesture(shouldForwardUserGesture(interval, m_nestingLevel))
 {
-    RefPtr<DOMTimer> reference = adoptRef(this);
+}
 
+void DOMTimer::start(bool singleShot)
+{
+    RefPtr<DOMTimer> reference = adoptRef(this);
     // Keep asking for the next id until we're given one that we don't already have.
     do {
-        m_timeoutId = context.circularSequentialID();
-    } while (!context.addTimeout(m_timeoutId, reference));
+        m_timeoutId = scriptExecutionContext()->circularSequentialID();
+    } while (!scriptExecutionContext()->addTimeout(m_timeoutId, reference));
 
     if (singleShot)
         startOneShot(m_currentTimerInterval);
     else
         startRepeating(m_currentTimerInterval);
 }
 
 DOMTimer::~DOMTimer()
 {
     // If the ScriptExecutionContext has already been destroyed, there is
     // no need to stop listening for viewport changes.
     if (scriptExecutionContext() && isIntervalDependentOnViewport())
         unregisterForViewportChanges();
 }
 
 int DOMTimer::install(ScriptExecutionContext& context, std::unique_ptr<ScheduledAction> action, int timeout, bool singleShot)
 {
     // DOMTimer constructor passes ownership of the initial ref on the object to the constructor.
     // This reference will be released automatically when a one-shot timer fires, when the context
-    // is destroyed, or if explicitly cancelled by removeById. 
-    DOMTimer* timer = new DOMTimer(context, WTF::move(action), timeout, singleShot);
+    // is destroyed, or if explicitly cancelled by removeById.
+    DOMTimer* timer = nullptr;
+#if ENABLE(WEB_REPLAY)
+    do {
+        if (!is<Document>(context))
+            break;
+
+        InputCursor& cursor = downcast<Document>(context).inputCursor();
+        if (cursor.isCapturing())
+            timer = new InstrumentedDOMTimer(context, WTF::move(action), timeout);
+        if (cursor.isReplaying())
+            timer = new DeterministicDOMTimer(context, WTF::move(action), timeout);
+    } while (0);
+    if (!timer)
+#endif
+    timer = new DOMTimer(context, WTF::move(action), timeout);
+
 #if PLATFORM(IOS)
     if (is<Document>(context)) {
         Document& document = downcast<Document>(context);
         bool didDeferTimeout = document.frame() && document.frame()->timersPaused();
         if (!didDeferTimeout && timeout <= 100 && singleShot) {
             WKSetObservedContentChange(WKContentIndeterminateChange);
             WebThreadAddObservedContentModifier(timer); // Will only take affect if not already visibility change.
         }
     }
 #endif
 
+    timer->start(singleShot);
     timer->suspendIfNeeded();
     InspectorInstrumentation::didInstallTimer(&context, timer->m_timeoutId, timeout, singleShot);
 
     // Keep track of nested timer installs.
     if (NestedTimersMap* nestedTimers = NestedTimersMap::instanceForContext(context))
         nestedTimers->add(timer->m_timeoutId, timer);
 
     return timer->m_timeoutId;
 }
 
@@ -350,23 +469,22 @@ void DOMTimer::fired()
     context.setTimerNestingLevel(std::min(m_nestingLevel + 1, maxTimerNestingLevel));
 
     ASSERT(!isSuspended());
     ASSERT(!context.activeDOMObjectsAreSuspended());
     UserGestureIndicator gestureIndicator(m_shouldForwardUserGesture ? DefinitelyProcessingUserGesture : PossiblyProcessingUserGesture);
     // Only the first execution of a multi-shot timer should get an affirmative user gesture indicator.
     m_shouldForwardUserGesture = false;
 
     InspectorInstrumentationCookie cookie = InspectorInstrumentation::willFireTimer(&context, m_timeoutId);
 
-    // Simple case for non-one-shot timers.
     if (isActive()) {
-        if (m_nestingLevel < maxTimerNestingLevel) {
+        if (m_shouldScheduleNormally && m_nestingLevel < maxTimerNestingLevel) {
             m_nestingLevel++;
             updateTimerIntervalIfNecessary();
         }
 
         m_action->execute(context);
 
         InspectorInstrumentation::didFireTimer(cookie);
         updateThrottlingStateIfNecessary(fireState);
 
         return;
@@ -444,20 +562,23 @@ void DOMTimer::unregisterForViewportChanges()
     if (auto* frameView = downcast<Document>(*scriptExecutionContext()).view())
         frameView->unregisterThrottledDOMTimer(this);
 
     m_elementsCausingThrottling.clear();
 }
 
 void DOMTimer::updateTimerIntervalIfNecessary()
 {
     ASSERT(m_nestingLevel <= maxTimerNestingLevel);
 
+    if (!m_shouldScheduleNormally)
+        return;
+
     double previousInterval = m_currentTimerInterval;
     m_currentTimerInterval = intervalClampedToMinimum();
 
     if (WTF::areEssentiallyEqual(previousInterval, m_currentTimerInterval, oneMillisecond))
         return;
 
     if (repeatInterval()) {
         ASSERT(WTF::areEssentiallyEqual(repeatInterval(), previousInterval, oneMillisecond));
         LOG(DOMTimers, "%p - Updating DOMTimer's repeat interval from %g ms to %g ms due to throttling.", this, previousInterval * 1000., m_currentTimerInterval * 1000.);
         augmentRepeatInterval(m_currentTimerInterval - previousInterval);
diff --git a/Source/WebCore/page/DOMTimer.h b/Source/WebCore/page/DOMTimer.h
index d895ea4..7fff0de 100644
--- a/Source/WebCore/page/DOMTimer.h
+++ b/Source/WebCore/page/DOMTimer.h
@@ -34,65 +34,72 @@
 #include <wtf/WeakPtr.h>
 
 namespace WebCore {
 
     class DOMTimerFireState;
     class Document;
     class Element;
     class HTMLPlugInElement;
     class IntRect;
     class ScheduledAction;
+    class DOMTimerFired;
 
-    class DOMTimer final : public RefCounted<DOMTimer>, public SuspendableTimer {
+    class DOMTimer : public RefCounted<DOMTimer>, public SuspendableTimer {
         WTF_MAKE_NONCOPYABLE(DOMTimer);
         WTF_MAKE_FAST_ALLOCATED;
     public:
         virtual ~DOMTimer();
 
         // Creates a new timer owned by specified ScriptExecutionContext, starts it
         // and returns its Id.
         static int install(ScriptExecutionContext&, std::unique_ptr<ScheduledAction>, int timeout, bool singleShot);
         static void removeById(ScriptExecutionContext&, int timeoutId);
 
         // Notify that the interval may need updating (e.g. because the minimum interval
         // setting for the context has changed).
         void updateTimerIntervalIfNecessary();
         void updateThrottlingStateAfterViewportChange(const IntRect& visibleRect);
 
         static void scriptDidInteractWithPlugin(HTMLPlugInElement&);
         static void scriptDidCauseElementRepaint(Element&, bool mayRepaintNonDescendants = false);
+    protected:
+        DOMTimer(ScriptExecutionContext&, std::unique_ptr<ScheduledAction>, int interval);
+        virtual void start(bool singleShot);
 
+        // SuspendableTimer
+        virtual void fired();
+
+        int m_timeoutId = {0};
+        bool m_shouldScheduleNormally = {true};
     private:
-        DOMTimer(ScriptExecutionContext&, std::unique_ptr<ScheduledAction>, int interval, bool singleShot);
         friend class Internals;
+        friend class DOMTimerFired;
 
         double intervalClampedToMinimum() const;
 
         bool isDOMTimersThrottlingEnabled(Document&) const;
         bool isIntervalDependentOnViewport() const { return m_throttleState == ShouldThrottle && !m_elementsCausingThrottling.isEmpty(); }
         void registerForViewportChanges();
         void unregisterForViewportChanges();
 
         void updateThrottlingStateIfNecessary(const DOMTimerFireState&);
 
         // SuspendableTimer
-        virtual void fired() override;
-        virtual void didStop() override;
-        virtual double alignedFireTime(double) const override;
+        virtual void didStop() final override;
+        virtual double alignedFireTime(double) const final override;
 
         enum TimerThrottleState {
             Undetermined,
             ShouldThrottle,
             ShouldNotThrottle
         };
 
-        int m_timeoutId;
         int m_nestingLevel;
         std::unique_ptr<ScheduledAction> m_action;
         int m_originalInterval;
         TimerThrottleState m_throttleState;
         double m_currentTimerInterval;
         bool m_shouldForwardUserGesture;
         // Use WeakPtrs because we don't want to keep the elements alive but we
         // still need to handle cases where the elements get destroyed after
         // the timer has fired.
         Vector<WeakPtr<Element>> m_elementsCausingThrottling;
diff --git a/Source/WebCore/replay/ReplayInputDispatchMethods.cpp b/Source/WebCore/replay/ReplayInputDispatchMethods.cpp
index d242aae..4c8d8ae 100644
--- a/Source/WebCore/replay/ReplayInputDispatchMethods.cpp
+++ b/Source/WebCore/replay/ReplayInputDispatchMethods.cpp
@@ -23,20 +23,21 @@
  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  */
 
 #include "config.h"
 
 #if ENABLE(WEB_REPLAY)
 
 #include "AllReplayInputs.h"
 #include "BackForwardController.h"
+#include "DOMTimer.h"
 #include "Document.h"
 #include "DocumentLoader.h"
 #include "FrameLoadRequest.h"
 #include "FrameLoader.h"
 #include "HistoryController.h"
 #include "MainFrame.h"
 #include "NavigationScheduler.h"
 #include "Page.h"
 #include "ReplayController.h"
 #include "ReplayableTimers.h"
@@ -193,13 +194,23 @@ void ResourceLoaderDidSendData::dispatch(ReplayController& controller)
 }
 
 // Other event loop inputs.
 void AsyncTimerFired::dispatch(ReplayController& controller)
 {
     Document* document = documentFromFrameIndex(&controller.page(), m_frameIndex);
     if (!document || !document->replayableTimers().fireTimer(m_ordinal))
         LOG_ERROR("%-30s REPLAY DIVERGENCE! Couldn't find async timer %d/%" PRIu64 ".\n", "[ReplayController]", m_frameIndex, m_ordinal);
 }
 
+void DOMTimerFired::dispatch(ReplayController& controller)
+{
+    Document* document = documentFromFrameIndex(&controller.page(), m_frameIndex);
+    DOMTimer* timer = document->findTimeout(m_timerIdentifier);
+    if (timer)
+        timer->fired();
+    else
+       LOG_ERROR("REPLAY DIVERGENCE! Couldn't find and fire DOM timer %" PRIu32 "/%" PRIu32 ".\n", m_frameIndex, m_timerIdentifier);
+}
+
 } // namespace WebCore
 
 #endif // ENABLE(WEB_REPLAY)
diff --git a/Source/WebCore/replay/WebInputs.json b/Source/WebCore/replay/WebInputs.json
index 5cc5e2c..767bf1b 100644
--- a/Source/WebCore/replay/WebInputs.json
+++ b/Source/WebCore/replay/WebInputs.json
@@ -202,20 +202,38 @@
                     { "name": "ordinal", "type": "uint64_t" }
                 ]
             },
             {
                 "name": "BeginSegmentSentinel",
                 "description": "A sentinel input to signal the start of a segment.",
                 "queue": "EVENT_LOOP",
                 "members": [ ]
             },
             {
+                "name": "DOMTimerCreated",
+                "description": "The memoized timer identifier that's chosen when a new DOMTimer is installed.",
+                "queue": "SCRIPT_MEMOIZED",
+                "members": [
+                    { "name": "frameIndex", "type": "uint32_t" },
+                    { "name": "timerIdentifier", "type": "uint32_t"}
+                ]
+            },
+            {
+                "name": "DOMTimerFired",
+                "description": "A DOM Timer has fired.",
+                "queue": "EVENT_LOOP",
+                "members": [
+                    { "name": "frameIndex", "type": "uint32_t" },
+                    { "name": "timerIdentifier", "type": "uint32_t"}
+                ]
+            },
+            {
                 "name": "DocumentLastModifiedDate",
                 "description": "A fallback value used for the document's last modified date if the Last-Modified header can't be found or used.",
                 "queue": "SCRIPT_MEMOIZED",
                 "members": [
                     { "name": "fallbackValue", "type": "double" }
                 ]
             },
             {
                 "name": "EndSegmentSentinel",
                 "description": "A sentinel input to signal the end of a segment.",
-- 
2.3.5

