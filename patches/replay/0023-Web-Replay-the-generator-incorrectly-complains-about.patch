From 0d13195014af2e4bdc3ddd0b736a707c66365206 Mon Sep 17 00:00:00 2001
From: "Brian J. Burg" <burg@cs.washington.edu>
Date: Wed, 27 Aug 2014 09:12:00 -0700
Subject: [PATCH] Web Replay: the generator incorrectly complains about enums
 without storage types that are enclosed by a class or struct (so we must
 include their header anyway)

---
 .../replay/scripts/CodeGeneratorReplayInputs.py    |  4 +-
 .../fail-on-c-style-enum-no-storage.json-error     |  2 +-
 ...enum-encoding-helpers.json-TestReplayInputs.cpp | 46 ++++++++++++++++++++++
 ...e-enum-encoding-helpers.json-TestReplayInputs.h |  8 ++++
 .../tests/generate-enum-encoding-helpers.json      |  7 ++++
 5 files changed, 64 insertions(+), 3 deletions(-)

diff --git a/Source/JavaScriptCore/replay/scripts/CodeGeneratorReplayInputs.py b/Source/JavaScriptCore/replay/scripts/CodeGeneratorReplayInputs.py
index 96c4e59..a23a34b 100644
--- a/Source/JavaScriptCore/replay/scripts/CodeGeneratorReplayInputs.py
+++ b/Source/JavaScriptCore/replay/scripts/CodeGeneratorReplayInputs.py
@@ -461,22 +461,22 @@ class InputsModel:
         guarded_enum_values = json.get('guarded_values', {})
         type_storage = json.get('storage')
         type_flags = json.get('flags', [])
         guard = json.get('guard', None)
         _type = Type(type_name, type_mode, framework, header, enclosing_class, enum_values, guarded_enum_values, type_storage, type_flags, guard)
         if _type.is_enum() or _type.is_enum_class():
             check_for_required_properties(['values'], json, 'enum')
             if not isinstance(json['values'], list) or len(_type.values) == 0:
                 raise ParseException("Malformed specification: enum %s does not supply a list of values" % type_name)
 
-            if _type.is_enum() and "storage" not in json:
-                raise ParseException("Could not parse enum %s: C-style enums must also specify their storage type so they can be forward declared." % type_name)
+            if _type.is_enum() and enclosing_class is None and type_storage is None:
+                raise ParseException("Could not parse enum %s: C-style enums not enclosed by a class must specify their storage type so they can be forward declared." % type_name)
 
         self.types.append(_type)
 
     def parse_input(self, json):
         check_for_required_properties(['name', 'description', 'queue', 'members'], json, 'input')
         _input = Input(json['name'], json['description'], json['queue'], json.get('flags', []), json.get('guard'))
         if isinstance(json['members'], list):
             for member in json['members']:
                 check_for_required_properties(['name', 'type'], member, 'member')
                 _input.members.append(InputMember(member['name'], member['type'], member.get('flags', [])))
diff --git a/Source/JavaScriptCore/replay/scripts/tests/expected/fail-on-c-style-enum-no-storage.json-error b/Source/JavaScriptCore/replay/scripts/tests/expected/fail-on-c-style-enum-no-storage.json-error
index 2e8bee6..382fb04 100644
--- a/Source/JavaScriptCore/replay/scripts/tests/expected/fail-on-c-style-enum-no-storage.json-error
+++ b/Source/JavaScriptCore/replay/scripts/tests/expected/fail-on-c-style-enum-no-storage.json-error
@@ -1 +1 @@
-ERROR: Could not parse enum MouseButton: C-style enums must also specify their storage type so they can be forward declared.
+ERROR: Could not parse enum MouseButton: C-style enums not enclosed by a class must specify their storage type so they can be forward declared.
diff --git a/Source/JavaScriptCore/replay/scripts/tests/expected/generate-enum-encoding-helpers.json-TestReplayInputs.cpp b/Source/JavaScriptCore/replay/scripts/tests/expected/generate-enum-encoding-helpers.json-TestReplayInputs.cpp
index 6b5f13a..9e9526a 100644
--- a/Source/JavaScriptCore/replay/scripts/tests/expected/generate-enum-encoding-helpers.json-TestReplayInputs.cpp
+++ b/Source/JavaScriptCore/replay/scripts/tests/expected/generate-enum-encoding-helpers.json-TestReplayInputs.cpp
@@ -135,13 +135,59 @@ bool EncodingTraits<WebCore::MouseButton>::decodeValue(EncodedValue& encodedValu
         if (enumString == "LeftButton")
             enumValue = static_cast<WebCore::MouseButton>(enumValue | WebCore::LeftButton);
         if (enumString == "MiddleButton")
             enumValue = static_cast<WebCore::MouseButton>(enumValue | WebCore::MiddleButton);
         if (enumString == "RightButton")
             enumValue = static_cast<WebCore::MouseButton>(enumValue | WebCore::RightButton);
     }
 
     return true;
 }
+
+EncodedValue EncodingTraits<WebCore::PlatformEvent::Type>::encodeValue(const WebCore::PlatformEvent::Type& enumValue)
+{
+    EncodedValue encodedValue = EncodedValue::createArray();
+    if (enumValue & WebCore::PlatformEvent::Mouse) {
+        encodedValue.append<String>(ASCIILiteral("Mouse"));
+        if (enumValue == WebCore::PlatformEvent::Mouse)
+            return encodedValue;
+    }
+    if (enumValue & WebCore::PlatformEvent::Key) {
+        encodedValue.append<String>(ASCIILiteral("Key"));
+        if (enumValue == WebCore::PlatformEvent::Key)
+            return encodedValue;
+    }
+    if (enumValue & WebCore::PlatformEvent::Touch) {
+        encodedValue.append<String>(ASCIILiteral("Touch"));
+        if (enumValue == WebCore::PlatformEvent::Touch)
+            return encodedValue;
+    }
+    if (enumValue & WebCore::PlatformEvent::Wheel) {
+        encodedValue.append<String>(ASCIILiteral("Wheel"));
+        if (enumValue == WebCore::PlatformEvent::Wheel)
+            return encodedValue;
+    }
+    return encodedValue;
+}
+
+bool EncodingTraits<WebCore::PlatformEvent::Type>::decodeValue(EncodedValue& encodedValue, WebCore::PlatformEvent::Type& enumValue)
+{
+    Vector<String> enumStrings;
+    if (!EncodingTraits<Vector<String>>::decodeValue(encodedValue, enumStrings))
+        return false;
+
+    for (String enumString : enumStrings) {
+        if (enumString == "Mouse")
+            enumValue = static_cast<WebCore::PlatformEvent::Type>(enumValue | WebCore::PlatformEvent::Mouse);
+        if (enumString == "Key")
+            enumValue = static_cast<WebCore::PlatformEvent::Type>(enumValue | WebCore::PlatformEvent::Key);
+        if (enumString == "Touch")
+            enumValue = static_cast<WebCore::PlatformEvent::Type>(enumValue | WebCore::PlatformEvent::Touch);
+        if (enumString == "Wheel")
+            enumValue = static_cast<WebCore::PlatformEvent::Type>(enumValue | WebCore::PlatformEvent::Wheel);
+    }
+
+    return true;
+}
 } // namespace JSC
 
 #endif // ENABLE(WEB_REPLAY)
diff --git a/Source/JavaScriptCore/replay/scripts/tests/expected/generate-enum-encoding-helpers.json-TestReplayInputs.h b/Source/JavaScriptCore/replay/scripts/tests/expected/generate-enum-encoding-helpers.json-TestReplayInputs.h
index dd87dd2..8cd4eaa 100644
--- a/Source/JavaScriptCore/replay/scripts/tests/expected/generate-enum-encoding-helpers.json-TestReplayInputs.h
+++ b/Source/JavaScriptCore/replay/scripts/tests/expected/generate-enum-encoding-helpers.json-TestReplayInputs.h
@@ -26,20 +26,21 @@
 
 // DO NOT EDIT THIS FILE. It is automatically generated from generate-enum-encoding-helpers.json
 // by the script: JavaScriptCore/replay/scripts/CodeGeneratorReplayInputs.py
 
 #ifndef generate_enum_encoding_helpers_json_TestReplayInputs_h
 #define generate_enum_encoding_helpers_json_TestReplayInputs_h
 
 #if ENABLE(WEB_REPLAY)
 #include "InternalNamespaceHeaderIncludeDummy.h"
 #include <platform/ExternalNamespaceHeaderIncludeDummy.h>
+#include <platform/PlatformEvent.h>
 
 namespace WebCore {
 enum MouseButton : unsigned;
 }
 
 namespace JSC {
 enum class InputQueue;
 }
 
 
@@ -61,20 +62,27 @@ template<> struct EncodingTraits<InputQueue> {
     static EncodedValue encodeValue(const InputQueue& value);
     static bool decodeValue(EncodedValue&, InputQueue& value);
 };
 
 template<> struct EncodingTraits<WebCore::MouseButton> {
     typedef WebCore::MouseButton DecodedType;
 
     static EncodedValue encodeValue(const WebCore::MouseButton& value);
     static bool decodeValue(EncodedValue&, WebCore::MouseButton& value);
 };
+
+template<> struct EncodingTraits<WebCore::PlatformEvent::Type> {
+    typedef WebCore::PlatformEvent::Type DecodedType;
+
+    static EncodedValue encodeValue(const WebCore::PlatformEvent::Type& value);
+    static bool decodeValue(EncodedValue&, WebCore::PlatformEvent::Type& value);
+};
 } // namespace JSC
 
 namespace Test {
 class SavedMouseButton : public JSC::NondeterministicInput<SavedMouseButton> {
 public:
     SavedMouseButton(WebCore::MouseButton button);
     virtual ~SavedMouseButton();
 
     WebCore::MouseButton button() const { return m_button; }
 private:
diff --git a/Source/JavaScriptCore/replay/scripts/tests/generate-enum-encoding-helpers.json b/Source/JavaScriptCore/replay/scripts/tests/generate-enum-encoding-helpers.json
index 65d71a3..8df1772 100644
--- a/Source/JavaScriptCore/replay/scripts/tests/generate-enum-encoding-helpers.json
+++ b/Source/JavaScriptCore/replay/scripts/tests/generate-enum-encoding-helpers.json
@@ -7,20 +7,27 @@
                 "values": ["EventLoopInput", "LoaderMemoizedData", "ScriptMemoizedData"],
                 "header": "replay/NondeterministicInput.h"
             }
         ],
         "WebCore": [
             {
                 "name": "MouseButton", "mode": "SCALAR", "storage": "unsigned",
                 "flags": ["ENUM"],
                 "values": ["NoButton", "LeftButton", "MiddleButton", "RightButton"],
                 "header": "platform/PlatformMouseEvent.h"
+            },
+            {
+                "name": "Type", "mode": "SCALAR",
+                "flags": ["ENUM"],
+                "enclosing_class": "PlatformEvent",
+                "values": ["Mouse", "Key", "Touch", "Wheel"],
+                "header": "platform/PlatformEvent.h"
             }
         ]
     },
 
     "inputs": [
         {
             "name": "SavedMouseButton",
             "description": "Supplies a mouse button enum value.",
             "queue": "SCRIPT_MEMOIZED",
             "members": [
-- 
2.0.1

