From f0ed7f26251d6a29d474eeeec6bb2c52482ac3ac Mon Sep 17 00:00:00 2001
From: "Brian J. Burg" <burg@cs.washington.edu>
Date: Fri, 19 Sep 2014 15:00:18 -0700
Subject: [PATCH] Web Replay: record event loop timings using elapsed time
 during capturing only https://bugs.webkit.org/show_bug.cgi?id=137082

Reviewed by NOBODY (OOPS!).

Source/JavaScriptCore:

Timestamp offsets should be stored per-input, and not sent during playback.

* inspector/protocol/Replay.json:

Source/WebCore:

Timings of event loop inputs are used during playback to simulate original timings.
Following a similar refactoring for timeline records, this patch changes replay code to
use Stopwatch rather than monotonicallyIncreasingTime() for getting elapsed time.

Since event loop timings during capturing are the only timings that matter, we do
not need to capture timestamps during playback.

No new tests, no behavior changed.

* inspector/InspectorReplayAgent.cpp:
(WebCore::SerializeSegmentInputsToJSONFunctor::SerializeSegmentInputsToJSONFunctor):
(WebCore::SerializeSegmentInputsToJSONFunctor::~SerializeSegmentInputsToJSONFunctor):
(WebCore::SerializeSegmentInputsToJSONFunctor::operator()):
(WebCore::buildInspectorObjectForSegment):
(WebCore::InspectorReplayAgent::playbackHitPosition):
(WebCore::buildInspectorObjectForSegmentState):
* replay/CapturingInputCursor.cpp: Use a stopwatch to measure elapsed time.
(WebCore::CapturingInputCursor::CapturingInputCursor):
(WebCore::CapturingInputCursor::~CapturingInputCursor):
(WebCore::CapturingInputCursor::storeInput):
* replay/CapturingInputCursor.h:
* replay/EventLoopInputDispatcher.cpp: Use a stopwatch to track timing drift.
(WebCore::EventLoopInputDispatcher::EventLoopInputDispatcher):
(WebCore::EventLoopInputDispatcher::run):
(WebCore::EventLoopInputDispatcher::pause):
(WebCore::EventLoopInputDispatcher::dispatchInputSoon):
(WebCore::EventLoopInputDispatcher::dispatchInput):
* replay/EventLoopInputDispatcher.h:
* replay/ReplayingInputCursor.cpp:
* replay/ReplaySessionSegment.h:
(WebCore::ReplaySessionSegment::eventLoopTimings):

Source/WebInspectorUI:

Don't pass around timestamps collected during playback, since they aren't used.

* UserInterface/Controllers/ReplayManager.js:
(WebInspector.ReplayManager.prototype.playbackHitPosition):
(WebInspector.ReplayManager.prototype.playbackPaused): Deleted.
* UserInterface/Protocol/ReplayObserver.js:
(WebInspector.ReplayObserver.prototype.playbackHitPosition):
---
 Source/JavaScriptCore/ChangeLog                    | 11 ++++++
 .../JavaScriptCore/inspector/protocol/Replay.json  |  4 +--
 Source/WebCore/ChangeLog                           | 39 ++++++++++++++++++++++
 Source/WebCore/inspector/InspectorReplayAgent.cpp  | 17 ++++++----
 Source/WebCore/replay/CapturingInputCursor.cpp     |  9 ++++-
 Source/WebCore/replay/CapturingInputCursor.h       |  5 +++
 Source/WebCore/replay/EventLoopInputDispatcher.cpp |  9 +++--
 Source/WebCore/replay/EventLoopInputDispatcher.h   |  5 +++
 Source/WebCore/replay/ReplaySessionSegment.h       |  5 +--
 Source/WebCore/replay/ReplayingInputCursor.cpp     |  1 +
 Source/WebInspectorUI/ChangeLog                    | 15 +++++++++
 .../UserInterface/Controllers/ReplayManager.js     |  4 +--
 .../UserInterface/Protocol/ReplayObserver.js       |  4 +--
 13 files changed, 111 insertions(+), 17 deletions(-)

diff --git a/Source/JavaScriptCore/ChangeLog b/Source/JavaScriptCore/ChangeLog
index 1dc5e42..275a444 100644
--- a/Source/JavaScriptCore/ChangeLog
+++ b/Source/JavaScriptCore/ChangeLog
@@ -1,10 +1,21 @@
+2015-01-12  Brian J. Burg  <burg@cs.washington.edu>
+
+        Web Replay: record event loop timings using elapsed time during capturing only
+        https://bugs.webkit.org/show_bug.cgi?id=137082
+
+        Reviewed by NOBODY (OOPS!).
+
+        Timestamp offsets should be stored per-input, and not sent during playback.
+
+        * inspector/protocol/Replay.json:
+
 2014-08-27  Brian J. Burg  <burg@cs.washington.edu>
 
         Web Replay: code generator should be able to encode/decode ViewState::Flags
         https://bugs.webkit.org/show_bug.cgi?id=136297
 
         Reviewed by NOBODY (OOPS!).
 
         ViewState::(enum) is an anonymous enum inside of a struct. ViewState::Flags is a typedef
         for unsigned, and the enum values are used to bitwise-construct and query an unsigned value
         containing several flags.
diff --git a/Source/JavaScriptCore/inspector/protocol/Replay.json b/Source/JavaScriptCore/inspector/protocol/Replay.json
index b39111c..2d79dea 100644
--- a/Source/JavaScriptCore/inspector/protocol/Replay.json
+++ b/Source/JavaScriptCore/inspector/protocol/Replay.json
@@ -29,20 +29,21 @@
                { "name": "segmentOffset", "type": "integer", "description": "Offset for a segment within the currently-loaded replay session." },
                { "name": "inputOffset", "type": "integer", "description": "Offset for an event loop input within the specified session segment." }
             ]
         },
         {
             "id": "ReplayInput",
             "type": "object",
             "properties": [
                 { "name": "type", "type": "string", "description": "Input type." },
                 { "name": "offset", "type": "integer", "description": "Offset of this input in its respective queue."},
+                { "name": "timestamp", "type": "number", "optional": true, "description": "Timestamp of the input since beginning of the segment, if applicable."},
                 { "name": "data", "type": "object", "description": "Per-input payload." }
             ]
         },
         {
             "id": "ReplayInputQueue",
             "type": "object",
             "properties": [
                 { "name": "type", "type": "string", "description": "Queue type" },
                 { "name": "inputs", "type": "array", "items": { "$ref": "ReplayInput"}, "description": "Inputs belonging to this queue." }
             ]
@@ -174,22 +175,21 @@
             "description": "Fired when capture has started."
         },
         {
             "name": "captureStopped",
             "description": "Fired when capture has stopped."
         },
         {
             "name": "playbackHitPosition",
             "description": "Playback within the session has progressed up to this position, and is about to replay the input at the specified offset.",
             "parameters": [
-                { "name": "position", "$ref": "ReplayPosition", "description": "The playback position that was hit." },
-                { "name": "timestamp", "type": "number", "description": "A timestamp for the event." }
+                { "name": "position", "$ref": "ReplayPosition", "description": "The playback position that was hit." }
             ]
         },
         {
             "name": "playbackStarted",
             "description": "Fired when session playback has started."
         },
         {
             "name": "playbackPaused",
             "description": "Fired when session playback has paused, but not finished.",
             "parameters": [
diff --git a/Source/WebCore/ChangeLog b/Source/WebCore/ChangeLog
index b0d83d1..4d81da0 100644
--- a/Source/WebCore/ChangeLog
+++ b/Source/WebCore/ChangeLog
@@ -1,12 +1,51 @@
 2015-01-12  Brian J. Burg  <burg@cs.washington.edu>
 
+        Web Replay: record event loop timings using elapsed time during capturing only
+        https://bugs.webkit.org/show_bug.cgi?id=137082
+
+        Reviewed by NOBODY (OOPS!).
+
+        Timings of event loop inputs are used during playback to simulate original timings.
+        Following a similar refactoring for timeline records, this patch changes replay code to
+        use Stopwatch rather than monotonicallyIncreasingTime() for getting elapsed time.
+
+        Since event loop timings during capturing are the only timings that matter, we do
+        not need to capture timestamps during playback.
+
+        No new tests, no behavior changed.
+
+        * inspector/InspectorReplayAgent.cpp:
+        (WebCore::SerializeSegmentInputsToJSONFunctor::SerializeSegmentInputsToJSONFunctor):
+        (WebCore::SerializeSegmentInputsToJSONFunctor::~SerializeSegmentInputsToJSONFunctor):
+        (WebCore::SerializeSegmentInputsToJSONFunctor::operator()):
+        (WebCore::buildInspectorObjectForSegment):
+        (WebCore::InspectorReplayAgent::playbackHitPosition):
+        (WebCore::buildInspectorObjectForSegmentState):
+        * replay/CapturingInputCursor.cpp: Use a stopwatch to measure elapsed time.
+        (WebCore::CapturingInputCursor::CapturingInputCursor):
+        (WebCore::CapturingInputCursor::~CapturingInputCursor):
+        (WebCore::CapturingInputCursor::storeInput):
+        * replay/CapturingInputCursor.h:
+        * replay/EventLoopInputDispatcher.cpp: Use a stopwatch to track timing drift.
+        (WebCore::EventLoopInputDispatcher::EventLoopInputDispatcher):
+        (WebCore::EventLoopInputDispatcher::run):
+        (WebCore::EventLoopInputDispatcher::pause):
+        (WebCore::EventLoopInputDispatcher::dispatchInputSoon):
+        (WebCore::EventLoopInputDispatcher::dispatchInput):
+        * replay/EventLoopInputDispatcher.h:
+        * replay/ReplayingInputCursor.cpp:
+        * replay/ReplaySessionSegment.h:
+        (WebCore::ReplaySessionSegment::eventLoopTimings):
+
+2015-01-12  Brian J. Burg  <burg@cs.washington.edu>
+
         Web Replay: NavigationScheduler should use a deterministic timer
         Need the bug URL (OOPS!).
 
         Reviewed by NOBODY (OOPS!).
 
         Asynchronously-scheduled navigations should be deterministic during playback.
 
         Make ReplayableTimer support the nextFireInterval() API by memoizing its results. It is used by
         NavigationScheduler to compute the navigation action time, and forwarded to FrameLoaderClient
         (and on to delegates). It's also used elsewhere to implement simple threshold throttling
diff --git a/Source/WebCore/inspector/InspectorReplayAgent.cpp b/Source/WebCore/inspector/InspectorReplayAgent.cpp
index 16e339c..9ccd0d1 100644
--- a/Source/WebCore/inspector/InspectorReplayAgent.cpp
+++ b/Source/WebCore/inspector/InspectorReplayAgent.cpp
@@ -89,58 +89,63 @@ static Inspector::Protocol::Replay::SessionState buildInspectorObjectForSessionS
 static Inspector::Protocol::Replay::SegmentState buildInspectorObjectForSegmentState(WebCore::SegmentState segmentState)
 {
     switch (segmentState) {
     case WebCore::SegmentState::Appending: return Inspector::Protocol::Replay::SegmentState::Appending;
     case WebCore::SegmentState::Unloaded: return Inspector::Protocol::Replay::SegmentState::Unloaded;
     case WebCore::SegmentState::Loaded: return Inspector::Protocol::Replay::SegmentState::Loaded;
     case WebCore::SegmentState::Dispatching: return Inspector::Protocol::Replay::SegmentState::Dispatching;
     }
 }
 
-class SerializeInputToJSONFunctor {
+class SerializeSegmentInputsToJSONFunctor {
 public:
     typedef Ref<Inspector::Protocol::Array<Inspector::Protocol::Replay::ReplayInput>> ReturnType;
 
-    SerializeInputToJSONFunctor(ReplayClient& client)
-        : m_client(client)
+    SerializeSegmentInputsToJSONFunctor(ReplaySessionSegment& segment, ReplayClient& client)
+        : m_segment(segment)
+        , m_client(client)
         , m_inputs(Inspector::Protocol::Array<Inspector::Protocol::Replay::ReplayInput>::create()) { }
-    ~SerializeInputToJSONFunctor() { }
+    ~SerializeSegmentInputsToJSONFunctor() { }
 
     void operator()(size_t index, const NondeterministicInputBase* input)
     {
         LOG(WebReplay, "%-25s Writing %5zu: %s\n", "[SerializeInput]", index, input->type().ascii().data());
 
         EncodedValue encodedInput;
         if (!m_client.encodeInput(*input, encodedInput))
             return;
 
         auto inputObject = Inspector::Protocol::Replay::ReplayInput::create()
             .setType(input->type())
             .setOffset(index)
             .setData(encodedInput.asObject())
             .release();
 
+        if (input->queue() == InputQueue::EventLoopInput)
+            inputObject->setTimestamp(m_segment.eventLoopTimings().at(index));
+
         m_inputs->addItem(WTF::move(inputObject));
     }
 
     ReturnType returnValue() { return m_inputs.copyRef(); }
 private:
+    ReplaySessionSegment& m_segment;
     ReplayClient& m_client;
     Ref<Inspector::Protocol::Array<Inspector::Protocol::Replay::ReplayInput>> m_inputs;
 };
 
 static Ref<Inspector::Protocol::Replay::SessionSegment> buildInspectorObjectForSegment(RefPtr<ReplaySessionSegment>&& segment, ReplayClient& client)
 {
     auto queuesObject = Inspector::Protocol::Array<Inspector::Protocol::Replay::ReplayInputQueue>::create();
 
     for (size_t i = 0; i < static_cast<size_t>(InputQueue::Count); i++) {
-        SerializeInputToJSONFunctor collector(client);
+        SerializeSegmentInputsToJSONFunctor collector(*segment, client);
         InputQueue queue = static_cast<InputQueue>(i);
         auto functorCursor = FunctorInputCursor::create(segment.copyRef());
         Ref<Inspector::Protocol::Array<Inspector::Protocol::Replay::ReplayInput>> queueInputs = functorCursor->forEachInputInQueue(queue, collector);
 
         auto queueObject = Inspector::Protocol::Replay::ReplayInputQueue::create()
             .setType(EncodingTraits<InputQueue>::encodeValue(queue).convertTo<String>())
             .setInputs(WTF::move(queueInputs))
             .release();
         queuesObject->addItem(WTF::move(queueObject));
     }
@@ -296,21 +301,21 @@ void InspectorReplayAgent::playbackStarted()
 
 void InspectorReplayAgent::playbackPaused(const ReplayPosition& position)
 {
     LOG(WebReplay, "-----REPLAY PAUSED-----");
 
     m_frontendDispatcher->playbackPaused(buildInspectorObjectForPosition(position));
 }
 
 void InspectorReplayAgent::playbackHitPosition(const ReplayPosition& position)
 {
-    m_frontendDispatcher->playbackHitPosition(buildInspectorObjectForPosition(position), monotonicallyIncreasingTime());
+    m_frontendDispatcher->playbackHitPosition(buildInspectorObjectForPosition(position));
 }
 
 void InspectorReplayAgent::playbackFinished()
 {
     LOG(WebReplay, "-----REPLAY FINISHED-----");
 
     m_frontendDispatcher->playbackFinished();
 }
 
 void InspectorReplayAgent::startCapturing(ErrorString& errorString)
diff --git a/Source/WebCore/replay/CapturingInputCursor.cpp b/Source/WebCore/replay/CapturingInputCursor.cpp
index 5f2c02c..65e993a 100644
--- a/Source/WebCore/replay/CapturingInputCursor.cpp
+++ b/Source/WebCore/replay/CapturingInputCursor.cpp
@@ -32,61 +32,68 @@
 
 #include "EventLoopInput.h"
 #include "Logging.h"
 #include "Page.h"
 #include "ReplayController.h"
 #include "ReplayClient.h"
 #include "ReplaySessionSegment.h"
 #include "SegmentedInputStorage.h"
 #include <replay/EncodedValue.h>
 #include <wtf/CurrentTime.h>
+#include <wtf/Stopwatch.h>
 #include <wtf/text/CString.h>
 
 #if !LOG_DISABLED
 // This is used to make the log spew from LOG(WebReplay, ...) more readable.
 static const char* queueTypeToLogPrefix(InputQueue queue)
 {
     switch (queue) {
     case InputQueue::EventLoopInput: return ">DSPTCH-STORE";
     case InputQueue::LoaderMemoizedData: return "<LDMEMO-STORE";
     case InputQueue::ScriptMemoizedData: return "<---<---<---JSMEMO-STORE";
     case InputQueue::Count: return "ERROR!";
     }
 }
 #endif // !LOG_DISABLED
 
 namespace WebCore {
 
 CapturingInputCursor::CapturingInputCursor(RefPtr<ReplaySessionSegment>&& segment, Page& page)
     : m_segment(WTF::move(segment))
     , m_page(page)
+    , m_stopwatch(Stopwatch::create())
 {
     LOG(WebReplay, "%-30sCreated capture cursor=%p.\n", "[ReplayController]", this);
+
+    m_stopwatch->reset();
+    m_stopwatch->start();
 }
 
 CapturingInputCursor::~CapturingInputCursor()
 {
     LOG(WebReplay, "%-30sDestroyed capture cursor=%p.\n", "[ReplayController]", this);
+
+    m_stopwatch->stop();
 }
 
 Ref<CapturingInputCursor> CapturingInputCursor::create(RefPtr<ReplaySessionSegment>&& segment, Page& page)
 {
     return adoptRef(*new CapturingInputCursor(WTF::move(segment), page));
 }
 
 void CapturingInputCursor::storeInput(std::unique_ptr<NondeterministicInputBase> input)
 {
     ASSERT_ARG(input, input);
 
     if (input->queue() == InputQueue::EventLoopInput) {
         // FIXME: rewrite this (and related dispatch code) to use std::chrono.
-        double now = monotonicallyIncreasingTime();
+        double now = m_stopwatch->elapsedTime();
         m_segment->eventLoopTimings().append(now);
     }
 
     InputQueue queue = input->queue();
     const String& type = input->type();
     EncodedValue encodedInput;
     m_page.replayController().client().encodeInput(*input, encodedInput);
 
     size_t inputCount = m_segment->storage().store(WTF::move(input));
 
diff --git a/Source/WebCore/replay/CapturingInputCursor.h b/Source/WebCore/replay/CapturingInputCursor.h
index 2b52317..f5ffb5f 100644
--- a/Source/WebCore/replay/CapturingInputCursor.h
+++ b/Source/WebCore/replay/CapturingInputCursor.h
@@ -27,20 +27,24 @@
 
 #ifndef CapturingInputCursor_h
 #define CapturingInputCursor_h
 
 #if ENABLE(WEB_REPLAY)
 
 #include <replay/InputCursor.h>
 #include <wtf/RefPtr.h>
 #include <wtf/Noncopyable.h>
 
+namespace WTF {
+class Stopwatch;
+}
+
 namespace WebCore {
 
 class EventLoopInputExtent;
 class Page;
 class ReplaySessionSegment;
 
 class CapturingInputCursor final : public InputCursor {
     WTF_MAKE_NONCOPYABLE(CapturingInputCursor);
 public:
     static Ref<CapturingInputCursor> create(RefPtr<ReplaySessionSegment>&&, Page&);
@@ -53,17 +57,18 @@ protected:
     virtual NondeterministicInputBase* loadInput(InputQueue, const String& type) override;
 
 private:
     CapturingInputCursor(RefPtr<ReplaySessionSegment>&&, Page&);
 
     virtual NondeterministicInputBase* uncheckedLoadInput(InputQueue) override;
     virtual void storeInput(std::unique_ptr<NondeterministicInputBase>) override;
 
     RefPtr<ReplaySessionSegment> m_segment;
     Page& m_page;
+    Ref<WTF::Stopwatch> m_stopwatch;
 };
 
 } // namespace WebCore
 
 #endif // ENABLE(WEB_REPLAY)
 
 #endif // CapturingInputCursor_h
diff --git a/Source/WebCore/replay/EventLoopInputDispatcher.cpp b/Source/WebCore/replay/EventLoopInputDispatcher.cpp
index c5cde24..92f63c2 100644
--- a/Source/WebCore/replay/EventLoopInputDispatcher.cpp
+++ b/Source/WebCore/replay/EventLoopInputDispatcher.cpp
@@ -28,20 +28,21 @@
 #include "config.h"
 #include "EventLoopInputDispatcher.h"
 
 #if ENABLE(WEB_REPLAY)
 
 #include "Page.h"
 #include "ReplayClient.h"
 #include "ReplayController.h"
 #include "ReplayingInputCursor.h"
 #include "WebReplayInputs.h"
+#include <wtf/Stopwatch.h>
 #include <wtf/TemporaryChange.h>
 
 #if !LOG_DISABLED
 #include "Logging.h"
 #include "WebReplayInputCoders.h"
 #include <replay/EncodedValue.h>
 #include <wtf/text/CString.h>
 #endif
 
 namespace WebCore {
@@ -49,39 +50,43 @@ namespace WebCore {
 EventLoopInputDispatcher::EventLoopInputDispatcher(Page& page, ReplayingInputCursor& cursor, EventLoopInputDispatcherClient* client)
     : m_page(page)
     , m_client(client)
     , m_cursor(cursor)
     , m_timer(*this, &EventLoopInputDispatcher::timerFired)
     , m_dispatching(false)
     , m_running(false)
     , m_speed(DispatchSpeed::FastForward)
     , m_previousDispatchStartTime(0.0)
     , m_previousInputTimestamp(0.0)
+    , m_stopwatch(Stopwatch::create())
 {
     m_currentWork.input = nullptr;
     m_currentWork.timestamp = 0.0;
+    m_stopwatch->reset();
 }
 
 void EventLoopInputDispatcher::run()
 {
     ASSERT(!m_running);
     m_running = true;
+    m_stopwatch->start();
 
     LOG(WebReplay, "%-20s Starting dispatch of event loop inputs for page: %p\n", "ReplayEvents", &m_page);
     dispatchInputSoon();
 }
 
 void EventLoopInputDispatcher::pause()
 {
     ASSERT(!m_dispatching);
     ASSERT(m_running);
     m_running = false;
+    m_stopwatch->stop();
 
     LOG(WebReplay, "%-20s Pausing dispatch of event loop inputs for page: %p\n", "ReplayEvents", &m_page);
     if (m_timer.isActive())
         m_timer.stop();
 }
 
 void EventLoopInputDispatcher::timerFired()
 {
     dispatchInput();
 }
@@ -102,21 +107,21 @@ void EventLoopInputDispatcher::dispatchInputSoon()
     if (m_speed == DispatchSpeed::RealTime) {
         // The goal is to reproduce the dispatch delay between inputs as it was
         // was observed during the recording. So, we need to compute how much time
         // to wait such that the elapsed time plus the wait time will equal the
         // observed delay between the previous and current input.
 
         if (!m_previousInputTimestamp)
             m_previousInputTimestamp = m_currentWork.timestamp;
 
         double targetInterval = m_currentWork.timestamp - m_previousInputTimestamp;
-        double elapsed = monotonicallyIncreasingTime() - m_previousDispatchStartTime;
+        double elapsed = m_stopwatch->elapsedTime() - m_previousDispatchStartTime;
         waitInterval = targetInterval - elapsed;
     }
 
     // A negative wait time means that dispatch took longer on replay than on
     // capture. In this case, proceed without waiting at all.
     if (waitInterval < 0)
         waitInterval = 0;
 
     if (waitInterval > 1000.0) {
         LOG_ERROR("%-20s Tried to wait for over 1000 seconds before dispatching next event loop input; this is probably a bug.", "ReplayEvents");
@@ -126,21 +131,21 @@ void EventLoopInputDispatcher::dispatchInputSoon()
     LOG(WebReplay, "%-20s (WAIT: %.3f ms)", "ReplayEvents", waitInterval * 1000.0);
     m_timer.startOneShot(waitInterval);
 }
 
 void EventLoopInputDispatcher::dispatchInput()
 {
     ASSERT(m_currentWork.input);
     ASSERT(!m_dispatching);
 
     if (m_speed == DispatchSpeed::RealTime) {
-        m_previousDispatchStartTime = monotonicallyIncreasingTime();
+        m_previousDispatchStartTime = m_stopwatch->elapsedTime();
         m_previousInputTimestamp = m_currentWork.timestamp;
     }
 
 #if !LOG_DISABLED
     EncodedValue encodedInput;
     if (m_page.replayController().client().encodeInput(*m_currentWork.input, encodedInput)) {
         LOG(WebReplay, "%-20s ----------------------------------------------", "ReplayEvents");
         LOG(WebReplay, "%-20s >DISPATCH: %s %s\n", "ReplayEvents", m_currentWork.input->type().utf8().data(), encodedInput.asObject()->toJSONString().utf8().data());
     }
 #endif
diff --git a/Source/WebCore/replay/EventLoopInputDispatcher.h b/Source/WebCore/replay/EventLoopInputDispatcher.h
index dc93c3a..beb1a54 100644
--- a/Source/WebCore/replay/EventLoopInputDispatcher.h
+++ b/Source/WebCore/replay/EventLoopInputDispatcher.h
@@ -29,20 +29,24 @@
 #define EventLoopInputDispatcher_h
 
 #if ENABLE(WEB_REPLAY)
 
 #include "EventLoopInput.h"
 #include "Timer.h"
 #include <wtf/Noncopyable.h>
 #include <wtf/Vector.h>
 #include <wtf/text/WTFString.h>
 
+namespace WTF {
+class Stopwatch;
+}
+
 namespace WebCore {
 
 class Page;
 class ReplayingInputCursor;
     
 enum class DispatchSpeed {
     RealTime,
     FastForward,
 };
 
@@ -84,17 +88,18 @@ private:
     // Whether the dispatcher is currently calling out to an inputs' dispatch() method.
     bool m_dispatching;
     // Whether the dispatcher is waiting to dispatch or actively dispatching inputs.
     bool m_running;
 
     DispatchSpeed m_speed;
     // The time at which the last input dispatch() method was called.
     double m_previousDispatchStartTime;
     // The timestamp specified by the last dispatched input.
     double m_previousInputTimestamp;
+    Ref<WTF::Stopwatch> m_stopwatch;
 };
 
 } // namespace WebCore
 
 #endif // ENABLE(WEB_REPLAY)
 
 #endif // EventLoopInputDispatcher_h
diff --git a/Source/WebCore/replay/ReplaySessionSegment.h b/Source/WebCore/replay/ReplaySessionSegment.h
index 5d45041..7169a31 100644
--- a/Source/WebCore/replay/ReplaySessionSegment.h
+++ b/Source/WebCore/replay/ReplaySessionSegment.h
@@ -46,29 +46,30 @@ class SegmentedInputStorage;
 class ReplaySessionSegment : public RefCounted<ReplaySessionSegment> {
 friend class CapturingInputCursor;
 friend class FunctorInputCursor;
 friend class ReplayingInputCursor;
 public:
     static PassRefPtr<ReplaySessionSegment> create();
     ~ReplaySessionSegment();
 
     unsigned identifier() const { return m_identifier; }
     double timestamp() const { return m_timestamp; }
+    Vector<double>& eventLoopTimings() { return m_eventLoopTimings; }
+
 protected:
     SegmentedInputStorage& storage() { return *m_storage; }
-    Vector<double, 0>& eventLoopTimings() { return m_eventLoopTimings; }
 
 private:
     ReplaySessionSegment();
 
     std::unique_ptr<SegmentedInputStorage> m_storage;
-    Vector<double, 0> m_eventLoopTimings;
+    Vector<double> m_eventLoopTimings;
 
     unsigned m_identifier;
     bool m_canCapture;
     double m_timestamp;
 };
 
 } // namespace WebCore
 
 #endif // ENABLE(WEB_REPLAY)
 
diff --git a/Source/WebCore/replay/ReplayingInputCursor.cpp b/Source/WebCore/replay/ReplayingInputCursor.cpp
index 0504d29..e5b2399 100644
--- a/Source/WebCore/replay/ReplayingInputCursor.cpp
+++ b/Source/WebCore/replay/ReplayingInputCursor.cpp
@@ -32,20 +32,21 @@
 
 #include "EventLoopInputDispatcher.h"
 #include "Logging.h"
 #include "Page.h"
 #include "ReplayClient.h"
 #include "ReplayController.h"
 #include "ReplaySessionSegment.h"
 #include "SegmentedInputStorage.h"
 #include "WebReplayInputCoders.h"
 #include "WebReplayInputs.h"
+#include <wtf/Stopwatch.h>
 #include <wtf/text/CString.h>
 
 namespace WebCore {
 
 #if !LOG_DISABLED
 // This is used to make the log spew from LOG(WebReplay, ...) more readable.
 static const char* queueTypeToLogPrefix(InputQueue queue)
 {
     switch (queue) {
     case InputQueue::EventLoopInput: return "(DSPTCH-LOAD)";
diff --git a/Source/WebInspectorUI/ChangeLog b/Source/WebInspectorUI/ChangeLog
index a67cd44..bf3a382 100644
--- a/Source/WebInspectorUI/ChangeLog
+++ b/Source/WebInspectorUI/ChangeLog
@@ -1,10 +1,25 @@
+2015-01-12  Brian J. Burg  <burg@cs.washington.edu>
+
+        Web Replay: record event loop timings using elapsed time during capturing only
+        https://bugs.webkit.org/show_bug.cgi?id=137082
+
+        Reviewed by NOBODY (OOPS!).
+
+        Don't pass around timestamps collected during playback, since they aren't used.
+
+        * UserInterface/Controllers/ReplayManager.js:
+        (WebInspector.ReplayManager.prototype.playbackHitPosition):
+        (WebInspector.ReplayManager.prototype.playbackPaused): Deleted.
+        * UserInterface/Protocol/ReplayObserver.js:
+        (WebInspector.ReplayObserver.prototype.playbackHitPosition):
+
 2014-08-11  Brian J. Burg  <burg@cs.washington.edu>
 
         Web Inspector: add eject current recording button to the replay dashboard
         https://bugs.webkit.org/show_bug.cgi?id=135225
 
         Reviewed by NOBODY (OOPS!).
 
         Add a new eject button item to the replay dashboard's embedded navigation bar.
         The eject button's visibility is mutually exclusive with that of the record button.
 
diff --git a/Source/WebInspectorUI/UserInterface/Controllers/ReplayManager.js b/Source/WebInspectorUI/UserInterface/Controllers/ReplayManager.js
index d3f562e..0efdb30 100644
--- a/Source/WebInspectorUI/UserInterface/Controllers/ReplayManager.js
+++ b/Source/WebInspectorUI/UserInterface/Controllers/ReplayManager.js
@@ -453,24 +453,24 @@ WebInspector.ReplayManager.prototype = {
             return this.waitUntilInitialized().then(this.playbackStarted.bind(this));
 
         if (this.sessionState === WebInspector.ReplayManager.SessionState.Inactive)
             this._changeSessionState(WebInspector.ReplayManager.SessionState.Replaying);
 
         this._changeSegmentState(WebInspector.ReplayManager.SegmentState.Dispatching);
 
         this.dispatchEventToListeners(WebInspector.ReplayManager.Event.PlaybackStarted);
     },
 
-    playbackHitPosition: function(replayPosition, timestamp)
+    playbackHitPosition: function(replayPosition)
     {
         if (!this._initialized)
-            return this.waitUntilInitialized().then(this.playbackHitPosition.bind(this, replayPosition, timestamp));
+            return this.waitUntilInitialized().then(this.playbackHitPosition.bind(this, replayPosition));
 
         console.assert(this.sessionState === WebInspector.ReplayManager.SessionState.Replaying);
         console.assert(this.segmentState === WebInspector.ReplayManager.SegmentState.Dispatching);
         console.assert(replayPosition instanceof WebInspector.ReplayPosition);
 
         this._currentPosition = replayPosition;
         this.dispatchEventToListeners(WebInspector.ReplayManager.Event.PlaybackPositionChanged);
     },
 
     playbackPaused: function(position)
diff --git a/Source/WebInspectorUI/UserInterface/Protocol/ReplayObserver.js b/Source/WebInspectorUI/UserInterface/Protocol/ReplayObserver.js
index 9166db7..36bd03c 100644
--- a/Source/WebInspectorUI/UserInterface/Protocol/ReplayObserver.js
+++ b/Source/WebInspectorUI/UserInterface/Protocol/ReplayObserver.js
@@ -52,23 +52,23 @@ WebInspector.ReplayObserver.prototype = {
     captureStopped: function()
     {
         WebInspector.replayManager.captureStopped();
     },
 
     playbackStarted: function()
     {
         WebInspector.replayManager.playbackStarted();
     },
 
-    playbackHitPosition: function(replayPosition, timestamp)
+    playbackHitPosition: function(replayPosition)
     {
-        WebInspector.replayManager.playbackHitPosition(WebInspector.ReplayPosition.fromProtocol(replayPosition), timestamp);
+        WebInspector.replayManager.playbackHitPosition(WebInspector.ReplayPosition.fromProtocol(replayPosition));
     },
 
     playbackPaused: function(replayPosition)
     {
         WebInspector.replayManager.playbackPaused(WebInspector.ReplayPosition.fromProtocol(replayPosition));
     },
 
     playbackFinished: function()
     {
         WebInspector.replayManager.playbackFinished();
-- 
2.0.1

