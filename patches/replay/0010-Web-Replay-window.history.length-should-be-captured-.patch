From fce5e9b41f73e820cecd6178d4405b05c1106a13 Mon Sep 17 00:00:00 2001
From: "Brian J. Burg" <burg@cs.washington.edu>
Date: Tue, 15 Jul 2014 15:34:16 -0700
Subject: [PATCH] Web Replay: window.history.length should be captured at main
 frame navigations https://bugs.webkit.org/show_bug.cgi?id=131043

Reviewed by NOBODY (OOPS!).

Source/WebCore:
To make uses of window.history deterministic, we must save and restore
the contents of the back-forward list at each main frame navigation.
This can be done before the initial navigation that's kicked off when
we create a new replay session segment.

There is no way to replace an entire back-forward list for all
implementations. Instead we capture back-list HistoryItems, clear
all but the current item from the back-forward list, and then append
copies of the saved items.

The patch effectively makes the history length deterministic, but not
its contents: the first item could be different when starting replay
from a different page, and navigating to that history item could cause
the execution to diverge.

This intentional deficiency is tracked by https://webkit.org/b/131989.

Test: inspector/replay/history-length-single-segment.html

* history/BackForwardClient.h: Promote clear() to be an interface method.
* history/BackForwardController.cpp:
(WebCore::BackForwardController::clear): Added.
* history/BackForwardController.h:
* history/BackForwardList.cpp:
(WebCore::BackForwardList::clear): Added.
* history/BackForwardList.h:

* replay/ReplayController.cpp:
(WebCore::ReplayController::createSegment): Capture history before
kicking off the initial navigation.

* replay/ReplayInputCreationMethods.cpp:
(WebCore::InitializeHistory::createFromPage):
* replay/ReplayInputDispatchMethods.cpp:
(WebCore::InitializeHistory::dispatch): Added.

* replay/SerializationMethods.cpp:
(JSC::EncodingTraits<HistoryItem>::encodeValue): Added.
(JSC::EncodingTraits<HistoryItem>::decodeValue): Added.
(JSC::EncodingTraits<IntPoint>::encodeValue): Added.
(JSC::EncodingTraits<IntPoint>::decodeValue): Added.
(JSC::EncodingTraits<SerializedScriptValue>::encodeValue): Added.
(JSC::EncodingTraits<SerializedScriptValue>::decodeValue): Added.
* replay/SerializationMethods.h:

* replay/WebInputs.json: Add type HistoryItem and input InitializeHistory.

Source/WebKit2:
Promote clear() to be part of the BackForwardClient interface.

* WebProcess/WebPage/WebBackForwardListProxy.h:

LayoutTests:
* inspector/replay/history-length-single-segment-expected.txt: Added.
* inspector/replay/history-length-single-segment.html: Added.
---
 LayoutTests/ChangeLog                              |  10 ++
 .../history-length-single-segment-expected.txt     |  14 +++
 .../replay/history-length-single-segment.html      |  29 ++++++
 Source/WebCore/ChangeLog                           |  54 +++++++++++
 Source/WebCore/history/BackForwardClient.h         |   1 +
 Source/WebCore/history/BackForwardController.cpp   |   5 +
 Source/WebCore/history/BackForwardController.h     |   1 +
 Source/WebCore/history/BackForwardList.cpp         |   6 ++
 Source/WebCore/history/BackForwardList.h           |   1 +
 Source/WebCore/replay/ReplayController.cpp         |   8 +-
 .../WebCore/replay/ReplayInputCreationMethods.cpp  |  15 ++-
 .../WebCore/replay/ReplayInputDispatchMethods.cpp  |  17 ++++
 Source/WebCore/replay/SerializationMethods.cpp     | 103 +++++++++++++++++++++
 Source/WebCore/replay/SerializationMethods.h       |  16 ++++
 Source/WebCore/replay/WebInputs.json               |  13 +++
 Source/WebKit2/ChangeLog                           |  11 +++
 .../WebProcess/WebPage/WebBackForwardListProxy.h   |   2 +-
 17 files changed, 303 insertions(+), 3 deletions(-)
 create mode 100644 LayoutTests/inspector/replay/history-length-single-segment-expected.txt
 create mode 100644 LayoutTests/inspector/replay/history-length-single-segment.html

diff --git a/LayoutTests/ChangeLog b/LayoutTests/ChangeLog
index 9d9a288..1662702 100644
--- a/LayoutTests/ChangeLog
+++ b/LayoutTests/ChangeLog
@@ -1,10 +1,20 @@
+2014-07-15  Brian J. Burg  <burg@cs.washington.edu>
+
+        Web Replay: save and restore page history state at main frame navigations
+        https://bugs.webkit.org/show_bug.cgi?id=131043
+
+        Reviewed by NOBODY (OOPS!).
+
+        * inspector/replay/history-length-single-segment-expected.txt: Added.
+        * inspector/replay/history-length-single-segment.html: Added.
+
 2014-07-16  Mike West  <mkwst@chromium.org>
 
         CSP: Drop 'script-nonce' directive.
         https://bugs.webkit.org/show_bug.cgi?id=134926
 
         Reviewed by Darin Adler.
 
         Dropping the nonce tests, as we're removing the functionality.
 
         * http/tests/security/contentSecurityPolicy/1.1/scriptnonce-allowed-expected.txt: Removed.
diff --git a/LayoutTests/inspector/replay/history-length-single-segment-expected.txt b/LayoutTests/inspector/replay/history-length-single-segment-expected.txt
new file mode 100644
index 0000000..b797ffd
--- /dev/null
+++ b/LayoutTests/inspector/replay/history-length-single-segment-expected.txt
@@ -0,0 +1,14 @@
+Tests that window.history.length is the same during capture and replay of a single replay session segment.
+
+Waiting for test page to finish its initial load...
+Test page initial load done.
+Waiting for capturing to start...
+Capturing has started.
+Waiting to capture initial navigation...
+Initial navigation captured. Dumping state....
+Capture stopped, now starting replay to completion...
+Playback has started.
+Waiting to replay initial navigation...
+Initial navigation replayed. Dumping state...
+PASS: Nondeterministic state should not differ during capture and replay.
+
diff --git a/LayoutTests/inspector/replay/history-length-single-segment.html b/LayoutTests/inspector/replay/history-length-single-segment.html
new file mode 100644
index 0000000..a88d9c1
--- /dev/null
+++ b/LayoutTests/inspector/replay/history-length-single-segment.html
@@ -0,0 +1,29 @@
+<html>
+<head>
+<script type="text/javascript" src="../../http/tests/inspector/inspector-test.js"></script>
+<script type="text/javascript" src="../../http/tests/inspector/replay/replay-test.js"></script>
+<script>
+
+window._historyLength = window.history.length;
+
+function dumpNondeterministicState()
+{
+    return window._historyLength;
+}
+
+function test()
+{
+    function statesAreEqual(a, b)
+    {
+        return a === b;
+    }
+
+    InspectorTest.Replay.runSingleSegmentRefTest(statesAreEqual);
+}
+
+</script>
+</head>
+<body onload="runTest()">
+<p>Tests that window.history.length is the same during capture and replay of a single replay session segment.</p>
+</body>
+</html>
diff --git a/Source/WebCore/ChangeLog b/Source/WebCore/ChangeLog
index defd7b3..7d7ac28 100644
--- a/Source/WebCore/ChangeLog
+++ b/Source/WebCore/ChangeLog
@@ -1,12 +1,66 @@
 2014-07-15  Brian J. Burg  <burg@cs.washington.edu>
 
+        Web Replay: save and restore page history state at main frame navigations
+        https://bugs.webkit.org/show_bug.cgi?id=131043
+
+        Reviewed by NOBODY (OOPS!).
+
+        To make uses of window.history deterministic, we must save and restore
+        the contents of the back-forward list at each main frame navigation.
+        This can be done before the initial navigation that's kicked off when
+        we create a new replay session segment.
+
+        There is no way to replace an entire back-forward list for all
+        implementations. Instead we capture back-list HistoryItems, clear
+        all but the current item from the back-forward list, and then append
+        copies of the saved items.
+
+        The patch effectively makes the history length deterministic, but not 
+        its contents: the first item could be different when starting replay 
+        from a different page, and navigating to that history item could cause 
+        the execution to diverge.
+
+        This intentional deficiency is tracked by https://webkit.org/b/131989.
+
+        Test: inspector/replay/history-length-single-segment.html
+
+        * history/BackForwardClient.h: Promote clear() to be an interface method.
+        * history/BackForwardController.cpp:
+        (WebCore::BackForwardController::clear): Added.
+        * history/BackForwardController.h:
+        * history/BackForwardList.cpp:
+        (WebCore::BackForwardList::clear): Added.
+        * history/BackForwardList.h:
+
+        * replay/ReplayController.cpp:
+        (WebCore::ReplayController::createSegment): Capture history before
+        kicking off the initial navigation.
+
+        * replay/ReplayInputCreationMethods.cpp:
+        (WebCore::InitializeHistory::createFromPage):
+        * replay/ReplayInputDispatchMethods.cpp:
+        (WebCore::InitializeHistory::dispatch): Added.
+
+        * replay/SerializationMethods.cpp:
+        (JSC::EncodingTraits<HistoryItem>::encodeValue): Added.
+        (JSC::EncodingTraits<HistoryItem>::decodeValue): Added.
+        (JSC::EncodingTraits<IntPoint>::encodeValue): Added.
+        (JSC::EncodingTraits<IntPoint>::decodeValue): Added.
+        (JSC::EncodingTraits<SerializedScriptValue>::encodeValue): Added.
+        (JSC::EncodingTraits<SerializedScriptValue>::decodeValue): Added.
+        * replay/SerializationMethods.h:
+
+        * replay/WebInputs.json: Add type HistoryItem and input InitializeHistory.
+
+2014-07-15  Brian J. Burg  <burg@cs.washington.edu>
+
         Web Replay: make calls into FrameLoader::checkLoadComplete() deterministic
         https://bugs.webkit.org/show_bug.cgi?id=129451
 
         Reviewed by NOBODY (OOPS!).
 
         To ensure deterministic JavaScript execution, calls to checkLoadComplete()
         that originate from asynchronous Timer firings should be captured and replayed.
 
         This patch introduces the ReplayableTimer class, which can be used as a drop-in
         replacement for one-shot timers. It will automatically capture or replay the
diff --git a/Source/WebCore/history/BackForwardClient.h b/Source/WebCore/history/BackForwardClient.h
index 4718736..2c65273 100644
--- a/Source/WebCore/history/BackForwardClient.h
+++ b/Source/WebCore/history/BackForwardClient.h
@@ -43,20 +43,21 @@ public:
 
     virtual void addItem(PassRefPtr<HistoryItem>) = 0;
 
     virtual void goToItem(HistoryItem*) = 0;
         
     virtual HistoryItem* itemAtIndex(int) = 0;
     virtual int backListCount() = 0;
     virtual int forwardListCount() = 0;
 
     virtual void close() = 0;
+    virtual void clear() = 0;
 
 #if PLATFORM(IOS)
     // FIXME: These methods seem to violate the encapsulation of this class.
     virtual unsigned current() = 0;
     virtual void setCurrent(unsigned newCurrent) = 0;
 
     // FIXME: Consider renaming this method once we upstream the iOS changes to WebView.mm.
     virtual bool clearAllPageCaches() = 0;
 #endif
 
diff --git a/Source/WebCore/history/BackForwardController.cpp b/Source/WebCore/history/BackForwardController.cpp
index 9c16722..b914f80 100644
--- a/Source/WebCore/history/BackForwardController.cpp
+++ b/Source/WebCore/history/BackForwardController.cpp
@@ -120,16 +120,21 @@ int BackForwardController::backCount() const
 int BackForwardController::forwardCount() const
 {
     return m_client->forwardListCount();
 }
 
 HistoryItem* BackForwardController::itemAtIndex(int i)
 {
     return m_client->itemAtIndex(i);
 }
 
+void BackForwardController::clear()
+{
+    m_client->clear();
+}
+
 void BackForwardController::close()
 {
     m_client->close();
 }
 
 } // namespace WebCore
diff --git a/Source/WebCore/history/BackForwardController.h b/Source/WebCore/history/BackForwardController.h
index 6387746..e0d8632 100644
--- a/Source/WebCore/history/BackForwardController.h
+++ b/Source/WebCore/history/BackForwardController.h
@@ -52,20 +52,21 @@ public:
 
     void addItem(PassRefPtr<HistoryItem>);
     void setCurrentItem(HistoryItem*);
         
     int count() const;
     int backCount() const;
     int forwardCount() const;
 
     HistoryItem* itemAtIndex(int);
 
+    void clear();
     void close();
 
     HistoryItem* backItem() { return itemAtIndex(-1); }
     HistoryItem* currentItem() { return itemAtIndex(0); }
     HistoryItem* forwardItem() { return itemAtIndex(1); }
 
 private:
     Page& m_page;
     RefPtr<BackForwardClient> m_client;
 };
diff --git a/Source/WebCore/history/BackForwardList.cpp b/Source/WebCore/history/BackForwardList.cpp
index 1e5e774..0bd8429 100644
--- a/Source/WebCore/history/BackForwardList.cpp
+++ b/Source/WebCore/history/BackForwardList.cpp
@@ -247,20 +247,26 @@ bool BackForwardList::clearAllPageCaches()
         HistoryItem* item = m_entries[i].get();
         if (item->isInPageCache()) {
             didRemoveAtLeastOneItem = true;
             pageCache()->remove(item);
         }
     }
     return didRemoveAtLeastOneItem;
 }
 #endif
 
+void BackForwardList::clear()
+{
+    setEnabled(false);
+    setEnabled(true);
+}
+
 void BackForwardList::close()
 {
     int size = m_entries.size();
     for (int i = 0; i < size; ++i)
         pageCache()->remove(m_entries[i].get());
     m_entries.clear();
     m_entryHash.clear();
     m_page = 0;
     m_closed = true;
 }
diff --git a/Source/WebCore/history/BackForwardList.h b/Source/WebCore/history/BackForwardList.h
index 3b05be9..6624e7f 100644
--- a/Source/WebCore/history/BackForwardList.h
+++ b/Source/WebCore/history/BackForwardList.h
@@ -60,20 +60,21 @@ public:
     void forwardListWithLimit(int, HistoryItemVector&);
 
     int capacity();
     void setCapacity(int);
     bool enabled();
     void setEnabled(bool);
     virtual int backListCount() override;
     virtual int forwardListCount() override;
     bool containsItem(HistoryItem*);
 
+    virtual void clear() override;
     virtual void close() override;
     bool closed();
 
     void removeItem(HistoryItem*);
     HistoryItemVector& entries();
 
 #if PLATFORM(IOS)
     virtual unsigned current() override;
     virtual void setCurrent(unsigned newCurrent) override;
 
diff --git a/Source/WebCore/replay/ReplayController.cpp b/Source/WebCore/replay/ReplayController.cpp
index a2a4935..3c328f7 100644
--- a/Source/WebCore/replay/ReplayController.cpp
+++ b/Source/WebCore/replay/ReplayController.cpp
@@ -171,22 +171,28 @@ void ReplayController::createSegment()
     // until we stop appending to it. This preserves the invariant that
     // segments associated with a replay session have immutable data.
     m_loadedSegment = ReplaySessionSegment::create();
 
     LOG(WebReplay, "%-20s Created segment: %p.\n", "ReplayController", m_loadedSegment.get());
     InspectorInstrumentation::segmentCreated(&m_page, m_loadedSegment);
 
     m_activeCursor = m_loadedSegment->createCapturingCursor(m_page);
     m_activeCursor->appendInput<BeginSegmentSentinel>();
 
-    std::unique_ptr<InitialNavigation> navigationInput = InitialNavigation::createFromPage(m_page);
+    // Dispatching this input saves history, clears all but the current item, appends saved
+    // history item to the back/forward list, then moves the current item cursor to the last entry.
+    std::unique_ptr<InitializeHistory> historyInput = InitializeHistory::createFromPage(m_page);
+    historyInput->dispatch(*this);
+    m_activeCursor->storeInput(std::move(historyInput));
+
     // Dispatching this input schedules navigation of the main frame, causing a refresh.
+    std::unique_ptr<InitialNavigation> navigationInput = InitialNavigation::createFromPage(m_page);
     navigationInput->dispatch(*this);
     m_activeCursor->storeInput(WTF::move(navigationInput));
 }
 
 void ReplayController::completeSegment()
 {
     ASSERT(m_sessionState == SessionState::Capturing);
     ASSERT(m_segmentState == SegmentState::Appending);
 
     m_activeCursor->appendInput<EndSegmentSentinel>();
diff --git a/Source/WebCore/replay/ReplayInputCreationMethods.cpp b/Source/WebCore/replay/ReplayInputCreationMethods.cpp
index 0ed3e23..67f8762 100644
--- a/Source/WebCore/replay/ReplayInputCreationMethods.cpp
+++ b/Source/WebCore/replay/ReplayInputCreationMethods.cpp
@@ -1,12 +1,12 @@
 /*
- * Copyright (C) 2011-2013 University of Washington.
+ * Copyright (C) 2011-2014 University of Washington.
  * Copyright (C) 2014 Apple Inc. All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without
  * modification, are permitted provided that the following conditions
  * are met:
  * 1. Redistributions of source code must retain the above copyright
  *    notice, this list of conditions and the following disclaimer.
  * 2. Redistributions in binary form must reproduce the above copyright
  *    notice, this list of conditions and the following disclaimer in the
  *    documentation and/or other materials provided with the distribution.
@@ -21,20 +21,21 @@
  * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
  * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  */
 
 #include "config.h"
 
 #if ENABLE(WEB_REPLAY)
 
+#include "BackForwardController.h"
 #include "Document.h"
 #include "MainFrame.h"
 #include "Page.h"
 #include "SecurityOrigin.h"
 #include "SerializationMethods.h"
 #include "WebReplayInputs.h"
 
 namespace WebCore {
 
 std::unique_ptr<InitialNavigation> InitialNavigation::createFromPage(const Page& page)
@@ -42,13 +43,25 @@ std::unique_ptr<InitialNavigation> InitialNavigation::createFromPage(const Page&
     const MainFrame& mainFrame = page.mainFrame();
     ASSERT(mainFrame.document());
 
     // Make sure that this is in sync with ReplayController::beginCapturing().
     RefPtr<SecurityOrigin> originCopy = mainFrame.document()->securityOrigin()->isolatedCopy();
     URL url = mainFrame.document()->url();
     String referrer = mainFrame.loader().referrer();
     return std::make_unique<InitialNavigation>(originCopy, url, referrer);
 }
 
+std::unique_ptr<InitializeHistory> InitializeHistory::createFromPage(const Page& page)
+{
+    int backCount = page.backForward().backCount();
+    Vector<RefPtr<HistoryItem>> entries(backCount + 1);
+
+    // Only save backward entries; the initial navigation will truncate any forward entries.
+    for (int i = -backCount; i <= 0; ++i)
+        entries[i + backCount] = page.backForward().itemAtIndex(i)->copy();
+
+    return std::make_unique<InitializeHistory>(entries);
+}
+
 } // namespace WebCore
 
 #endif // ENABLE(WEB_REPLAY)
diff --git a/Source/WebCore/replay/ReplayInputDispatchMethods.cpp b/Source/WebCore/replay/ReplayInputDispatchMethods.cpp
index cd67cf0..6403864 100644
--- a/Source/WebCore/replay/ReplayInputDispatchMethods.cpp
+++ b/Source/WebCore/replay/ReplayInputDispatchMethods.cpp
@@ -22,29 +22,34 @@
  * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  */
 
 #include "config.h"
 
 #if ENABLE(WEB_REPLAY)
 
 #include "AllReplayInputs.h"
+#include "BackForwardController.h"
 #include "Document.h"
 #include "DocumentLoader.h"
+#include "FrameLoadRequest.h"
+#include "FrameLoader.h"
+#include "HistoryController.h"
 #include "MainFrame.h"
 #include "NavigationScheduler.h"
 #include "Page.h"
 #include "ReplayController.h"
 #include "ReplayableTimers.h"
 #include "ResourceError.h"
 #include "ResourceLoader.h"
+#include "ResourceRequest.h"
 #include "SerializationMethods.h"
 #include "URL.h"
 #include "UserInputBridge.h"
 #include <cinttypes>
 
 namespace WebCore {
 
 static ResourceLoader* resourceLoaderForOrdinal(Page& page, unsigned long ordinal, int frameIndex)
 {
     Frame* frame = frameFromFrameIndex(&page, frameIndex);
@@ -91,20 +96,32 @@ void StopLoadingFrame::dispatch(ReplayController& controller)
     ASSERT(frame);
 
     controller.page().userInputBridge().stopLoadingFrame(frame, InputSource::Synthetic);
 }
 
 void TryClosePage::dispatch(ReplayController& controller)
 {
     controller.page().userInputBridge().tryClosePage(InputSource::Synthetic);
 }
 
+void InitializeHistory::dispatch(ReplayController& controller)
+{
+    // FIXME: Load the empty document, so that when we prune the back-forward list it
+    // is the single remaining entry. <https://webkit.org/b/131989>
+    controller.page().backForward().clear();
+
+    for (RefPtr<HistoryItem> historyEntry : m_entries)
+        controller.page().backForward().addItem(historyEntry->copy());
+
+    controller.page().mainFrame().loader().history().setCurrentItem(controller.page().backForward().currentItem());
+}
+
 void HandleKeyPress::dispatch(ReplayController& controller)
 {
     controller.page().userInputBridge().handleKeyEvent(platformEvent(), InputSource::Synthetic);
 }
 
 // User interaction inputs.
 void HandleMouseMove::dispatch(ReplayController& controller)
 {
     if (m_scrollbarTargeted)
         controller.page().userInputBridge().handleMouseMoveOnScrollbarEvent(platformEvent(), InputSource::Synthetic);
diff --git a/Source/WebCore/replay/SerializationMethods.cpp b/Source/WebCore/replay/SerializationMethods.cpp
index e037b16..f2100c7 100644
--- a/Source/WebCore/replay/SerializationMethods.cpp
+++ b/Source/WebCore/replay/SerializationMethods.cpp
@@ -30,58 +30,62 @@
 
 #if ENABLE(WEB_REPLAY)
 
 #include "AllReplayInputs.h"
 #include "Document.h"
 #include "FormData.h"
 #include "Frame.h"
 #include "FrameLoadRequest.h"
 #include "FrameTree.h"
 #include "HTTPHeaderMap.h"
+#include "HistoryItem.h"
 #include "MainFrame.h"
 #include "Page.h"
 #include "PlatformKeyboardEvent.h"
 #include "PlatformMouseEvent.h"
 #include "PlatformWheelEvent.h"
 #include "PluginData.h"
 #include "ReplayInputTypes.h"
 #include "ResourceError.h"
 #include "ResourceLoadTiming.h"
 #include "ResourceRequest.h"
 #include "ResourceResponse.h"
 #include "SecurityOrigin.h"
+#include "SerializedScriptValue.h"
 #include "SharedBuffer.h"
 #include "SubstituteData.h"
 #include "URL.h"
 #include <wtf/text/Base64.h>
 
 using WebCore::FormData;
 using WebCore::FormDataElement;
 using WebCore::FrameLoadRequest;
 using WebCore::HTTPHeaderMap;
+using WebCore::HistoryItem;
 using WebCore::IntPoint;
 using WebCore::MimeClassInfo;
 using WebCore::MouseButton;
 using WebCore::PlatformEvent;
 using WebCore::PlatformKeyboardEvent;
 using WebCore::PlatformMouseEvent;
 using WebCore::PlatformWheelEvent;
 using WebCore::PlatformWheelEventGranularity;
 using WebCore::PluginData;
 using WebCore::PluginInfo;
 using WebCore::ResourceError;
 using WebCore::ResourceLoadTiming;
 using WebCore::ResourceLoadPriority;
 using WebCore::ResourceRequest;
 using WebCore::ResourceRequestCachePolicy;
 using WebCore::ResourceResponse;
 using WebCore::SecurityOrigin;
+using WebCore::SerializedScriptValue;
 using WebCore::SharedBuffer;
 using WebCore::SubstituteData;
 using WebCore::URL;
 using WebCore::inputTypes;
 
 #if PLATFORM(COCOA)
 using WebCore::KeypressCommand;
 using WebCore::PlatformWheelEventPhase;
 #endif
 
@@ -353,20 +357,108 @@ EncodedValue EncodingTraits<NondeterministicInputBase>::encodeValue(const Nondet
     // The macro won't work here because of the class template argument.
     if (type == inputTypes().MemoizedDOMResult) {
         InputTraits<MemoizedDOMResultBase>::encode(encodedValue, static_cast<const MemoizedDOMResultBase&>(input));
         return encodedValue;
     }
 
     ASSERT_NOT_REACHED();
     return EncodedValue();
 }
 
+EncodedValue EncodingTraits<HistoryItem>::encodeValue(RefPtr<HistoryItem> item)
+{
+    EncodedValue encodedValue = EncodedValue::createObject();
+
+    ENCODE_TYPE_WITH_KEY(encodedValue, String, originalURLString, item->originalURLString());
+    ENCODE_TYPE_WITH_KEY(encodedValue, String, urlString, item->urlString());
+    ENCODE_TYPE_WITH_KEY(encodedValue, String, title, item->title());
+    ENCODE_TYPE_WITH_KEY(encodedValue, String, parent, item->parent());
+    ENCODE_TYPE_WITH_KEY(encodedValue, int64_t, documentSequenceNumber, item->documentSequenceNumber());
+    ENCODE_TYPE_WITH_KEY(encodedValue, Vector<String>, documentState, item->documentState());
+    ENCODE_TYPE_WITH_KEY(encodedValue, String, formContentType, item->formContentType());
+    ENCODE_OPTIONAL_TYPE_WITH_KEY(encodedValue, FormData, formData, adoptRef(item->formData()), item->formData());
+    ENCODE_TYPE_WITH_KEY(encodedValue, int64_t, itemSequenceNumber, item->itemSequenceNumber());
+    ENCODE_TYPE_WITH_KEY(encodedValue, String, referrer, item->referrer());
+    ENCODE_TYPE_WITH_KEY(encodedValue, IntPoint, scrollPoint, item->scrollPoint());
+    ENCODE_TYPE_WITH_KEY(encodedValue, float, pageScaleFactor, item->pageScaleFactor());
+    ENCODE_OPTIONAL_TYPE_WITH_KEY(encodedValue, SerializedScriptValue, stateObject, item->stateObject(), item->stateObject().get());
+    ENCODE_TYPE_WITH_KEY(encodedValue, String, target, item->target());
+    ENCODE_TYPE_WITH_KEY(encodedValue, Vector<HistoryItem>, children, item->children());
+
+    return encodedValue;
+}
+
+bool EncodingTraits<HistoryItem>::decodeValue(EncodedValue& encodedData, RefPtr<HistoryItem>& decodedItem)
+{
+    DECODE_TYPE_WITH_KEY(encodedData, String, originalURLString);
+    DECODE_TYPE_WITH_KEY(encodedData, String, urlString);
+    DECODE_TYPE_WITH_KEY(encodedData, String, title);
+    DECODE_TYPE_WITH_KEY(encodedData, String, parent);
+    DECODE_TYPE_WITH_KEY(encodedData, int64_t, documentSequenceNumber);
+    DECODE_TYPE_WITH_KEY(encodedData, Vector<String>, documentState);
+    DECODE_TYPE_WITH_KEY(encodedData, String, formContentType);
+    DECODE_OPTIONAL_TYPE_WITH_KEY(encodedData, FormData, formData);
+    DECODE_TYPE_WITH_KEY(encodedData, int64_t, itemSequenceNumber);
+    DECODE_TYPE_WITH_KEY(encodedData, String, referrer);
+    DECODE_TYPE_WITH_KEY(encodedData, IntPoint, scrollPoint);
+    DECODE_TYPE_WITH_KEY(encodedData, float, pageScaleFactor);
+    DECODE_OPTIONAL_TYPE_WITH_KEY(encodedData, SerializedScriptValue, stateObject);
+    DECODE_TYPE_WITH_KEY(encodedData, String, target);
+    DECODE_TYPE_WITH_KEY(encodedData, Vector<HistoryItem>, children);
+
+    RefPtr<HistoryItem> item = HistoryItem::create();
+    item->setOriginalURLString(originalURLString);
+    item->setURLString(urlString);
+    item->setTitle(title);
+    item->setParent(parent);
+    item->setDocumentSequenceNumber(documentSequenceNumber);
+    item->setDocumentState(documentState);
+    item->setFormContentType(formContentType);
+    if (formDataWasDecoded)
+        item->setFormData(formData.release());
+    item->setItemSequenceNumber(itemSequenceNumber);
+    item->setReferrer(referrer);
+    item->setScrollPoint(scrollPoint);
+    item->setPageScaleFactor(pageScaleFactor);
+    item->setTarget(target);
+    for (auto& child : children)
+        item->addChildItem(child);
+    if (stateObjectWasDecoded)
+        item->setStateObject(stateObject.release());
+
+    decodedItem = item.release();
+    return true;
+}
+
+template<>
+EncodedValue EncodingTraits<IntPoint>::encodeValue(const IntPoint& point)
+{
+    EncodedValue encodedData = EncodedValue::createObject();
+
+    ENCODE_TYPE_WITH_KEY(encodedData, int, x, point.x());
+    ENCODE_TYPE_WITH_KEY(encodedData, int, y, point.y());
+
+    return encodedData;
+}
+
+template<>
+bool EncodingTraits<IntPoint>::decodeValue(EncodedValue& encodedData, IntPoint& point)
+{
+    IntPoint decodedPoint;
+
+    DECODE_TYPE_WITH_KEY(encodedData, int, x);
+    DECODE_TYPE_WITH_KEY(encodedData, int, y);
+
+    point = IntPoint(x, y);
+    return true;
+}
+
 bool EncodingTraits<NondeterministicInputBase>::decodeValue(EncodedValue& encodedValue, std::unique_ptr<NondeterministicInputBase>& input)
 {
     DECODE_TYPE_WITH_KEY(encodedValue, String, type);
 
 #define DECODE_IF_TYPE_TAG_MATCHES(name) \
     if (type == inputTypes().name) { \
         std::unique_ptr<name> decodedInput; \
         if (!InputTraits<name>::decode(encodedValue, decodedInput)) \
             return false; \
         \
@@ -908,20 +1000,31 @@ bool EncodingTraits<SubstituteData>::decodeValue(EncodedValue& encodedData, Subs
     DECODE_TYPE_WITH_KEY(encodedData, String, mimeType);
     DECODE_TYPE_WITH_KEY(encodedData, String, textEncoding);
     DECODE_TYPE_WITH_KEY(encodedData, URL, failingURL);
     DECODE_TYPE_WITH_KEY(encodedData, URL, responseURL);
     DECODE_TYPE_WITH_KEY(encodedData, bool, shouldRevealToSessionHistory);
 
     decodedData = SubstituteData(content, mimeType, textEncoding, failingURL, responseURL, shouldRevealToSessionHistory);
     return true;
 }
 
+EncodedValue EncodingTraits<SerializedScriptValue>::encodeValue(RefPtr<SerializedScriptValue> input)
+{
+    return EncodedValue::createString(input->toString());
+}
+
+bool EncodingTraits<SerializedScriptValue>::decodeValue(EncodedValue& encodedValue, RefPtr<SerializedScriptValue>& input)
+{
+    input = SerializedScriptValue::create(encodedValue.convertTo<String>());
+    return true;
+}
+
 EncodedValue EncodingTraits<URL>::encodeValue(const URL& input)
 {
     return EncodedValue::createString(input.string());
 }
 
 bool EncodingTraits<URL>::decodeValue(EncodedValue& encodedValue, URL& input)
 {
     input = URL(WebCore::ParsedURLString, encodedValue.convertTo<String>());
     return true;
 }
diff --git a/Source/WebCore/replay/SerializationMethods.h b/Source/WebCore/replay/SerializationMethods.h
index df16473..fae5319 100644
--- a/Source/WebCore/replay/SerializationMethods.h
+++ b/Source/WebCore/replay/SerializationMethods.h
@@ -35,29 +35,31 @@
 #include <wtf/Vector.h>
 
 namespace WebCore {
 
 struct FrameLoadRequest;
 
 class Document;
 class FormData;
 class Frame;
 class HTTPHeaderMap;
+class HistoryItem;
 class Page;
 class PlatformKeyboardEvent;
 class PlatformMouseEvent;
 class PlatformWheelEvent;
 class PluginData;
 class ResourceError;
 class ResourceRequest;
 class ResourceResponse;
 class SecurityOrigin;
+class SerializedScriptValue;
 class SharedBuffer;
 class URL;
 
 #if USE(APPKIT)
 struct KeypressCommand;
 #endif
 
 uint32_t frameIndexFromDocument(const Document*);
 uint32_t frameIndexFromFrame(const Frame*);
 Document* documentFromFrameIndex(Page*, uint32_t frameIndex);
@@ -91,20 +93,27 @@ template<> struct EncodingTraits<WebCore::HTTPHeaderMap> {
 
 #if USE(APPKIT)
 template<> struct EncodingTraits<WebCore::KeypressCommand> {
     typedef WebCore::KeypressCommand DecodedType;
 
     static EncodedValue encodeValue(const WebCore::KeypressCommand& value);
     static bool decodeValue(EncodedValue&, WebCore::KeypressCommand& value);
 };
 #endif // USE(APPKIT)
 
+template<> struct EncodingTraits<WebCore::HistoryItem> {
+    typedef RefPtr<WebCore::HistoryItem> DecodedType;
+
+    static EncodedValue encodeValue(RefPtr<WebCore::HistoryItem>);
+    static bool decodeValue(EncodedValue&, RefPtr<WebCore::HistoryItem>&);
+};
+
 template<> struct EncodingTraits<NondeterministicInputBase> {
     typedef NondeterministicInputBase DecodedType;
 
     static EncodedValue encodeValue(const NondeterministicInputBase& value);
     static bool decodeValue(EncodedValue&, std::unique_ptr<NondeterministicInputBase>& value);
 };
 
 template<> struct EncodingTraits<WebCore::PlatformKeyboardEvent> {
     typedef WebCore::PlatformKeyboardEvent DecodedType;
 
@@ -168,15 +177,22 @@ template<> struct EncodingTraits<WebCore::SharedBuffer> {
     static bool decodeValue(EncodedValue&, RefPtr<WebCore::SharedBuffer>& value);
 };
 
 template<> struct EncodingTraits<WebCore::URL> {
     typedef WebCore::URL DecodedType;
 
     static EncodedValue encodeValue(const WebCore::URL& value);
     static bool decodeValue(EncodedValue&, WebCore::URL& value);
 };
 
+template<> struct EncodingTraits<WebCore::SerializedScriptValue> {
+    typedef RefPtr<WebCore::SerializedScriptValue> DecodedType;
+
+    static EncodedValue encodeValue(RefPtr<WebCore::SerializedScriptValue>);
+    static bool decodeValue(EncodedValue&, RefPtr<WebCore::SerializedScriptValue>&);
+};
+
 } // namespace JSC
 
 #endif // ENABLE(WEB_REPLAY)
 
 #endif // SerializationMethods_h
diff --git a/Source/WebCore/replay/WebInputs.json b/Source/WebCore/replay/WebInputs.json
index d76bbee..bcf3002 100644
--- a/Source/WebCore/replay/WebInputs.json
+++ b/Source/WebCore/replay/WebInputs.json
@@ -36,20 +36,24 @@
                     "Unsigned"
                 ],
                 "header": "replay/MemoizedDOMResult.h"
             },
             {
                 "name": "FrameLoadRequest", "mode": "OWNED",
                 "flags": ["STRUCT"],
                 "header": "loader/FrameLoadRequest.h"
             },
             {
+                "name": "HistoryItem", "mode": "SHARED",
+                "header": "history/HistoryItem.h"
+            },
+            {
                 "name": "Modifiers", "mode": "SCALAR", "storage": "uint8_t",
                 "enclosing_class": "PlatformEvent",
                 "flags": ["ENUM"],
                 "values": ["AltKey", "CtrlKey", "MetaKey", "ShiftKey"],
                 "header": "platform/PlatformEvent.h"
             },
             {
                 "name": "MouseButton", "mode": "SCALAR", "storage": "int8_t",
                 "flags": ["ENUM"],
                 "values": ["NoButton", "LeftButton", "MiddleButton", "RightButton"],
@@ -278,20 +282,29 @@
         },
         {
             "name": "HandleWheelEvent",
             "description": "The embedder signalled a mouse wheel event.",
             "queue": "EVENT_LOOP",
             "members": [
                 { "name": "platformEvent", "type": "PlatformWheelEvent" }
             ]
         },
         {
+            "name": "InitializeHistory",
+            "description": "Restore the saved history items that comprise the page's back-forward list.",
+            "queue": "EVENT_LOOP",
+            "flags": ["CREATE_FROM_PAGE"],
+            "members": [
+                { "name": "entries", "type": "HistoryItem", "flags": ["VECTOR"] }
+            ]
+        },
+        {
             "name": "InitialNavigation",
             "description": "Initiate the initial main frame navigation.",
             "queue": "EVENT_LOOP",
             "flags": ["HIDDEN", "CREATE_FROM_PAGE"],
             "members": [
                 { "name": "securityOrigin", "type": "SecurityOrigin" },
                 { "name": "url", "type": "URL" },
                 { "name": "referrer", "type": "String" }
             ]
         },
diff --git a/Source/WebKit2/ChangeLog b/Source/WebKit2/ChangeLog
index 680829f..575aaad 100644
--- a/Source/WebKit2/ChangeLog
+++ b/Source/WebKit2/ChangeLog
@@ -1,12 +1,23 @@
 2014-07-15  Brian J. Burg  <burg@cs.washington.edu>
 
+        Web Replay: save and restore page history state at main frame navigations
+        https://bugs.webkit.org/show_bug.cgi?id=131043
+
+        Reviewed by NOBODY (OOPS!).
+
+        Promote clear() to be part of the BackForwardClient interface.
+
+        * WebProcess/WebPage/WebBackForwardListProxy.h:
+
+2014-07-15  Brian J. Burg  <burg@cs.washington.edu>
+
         Web Replay: make calls into FrameLoader::checkLoadComplete() deterministic
         https://bugs.webkit.org/show_bug.cgi?id=129451
 
         Reviewed by NOBODY (OOPS!).
 
         * CMakeLists.txt: Add replay/ directory to header include paths.
 
 2014-07-14  Brian J. Burg  <burg@cs.washington.edu>
 
         Web Replay: capture and replay Reload, Navigate, and Stop commands
diff --git a/Source/WebKit2/WebProcess/WebPage/WebBackForwardListProxy.h b/Source/WebKit2/WebProcess/WebPage/WebBackForwardListProxy.h
index ef219e0..53724a7 100644
--- a/Source/WebKit2/WebProcess/WebPage/WebBackForwardListProxy.h
+++ b/Source/WebKit2/WebProcess/WebPage/WebBackForwardListProxy.h
@@ -38,21 +38,21 @@ class WebBackForwardListProxy : public WebCore::BackForwardClient {
 public: 
     static PassRefPtr<WebBackForwardListProxy> create(WebPage* page) { return adoptRef(new WebBackForwardListProxy(page)); }
 
     static WebCore::HistoryItem* itemForID(uint64_t);
     static uint64_t idForItem(WebCore::HistoryItem*);
     static void removeItem(uint64_t itemID);
 
     static void addItemFromUIProcess(uint64_t itemID, PassRefPtr<WebCore::HistoryItem>, uint64_t pageID);
     static void setHighestItemIDFromUIProcess(uint64_t itemID);
     
-    void clear();
+    virtual void clear() override;
 
 private:
     WebBackForwardListProxy(WebPage*);
 
     virtual void addItem(PassRefPtr<WebCore::HistoryItem>);
 
     virtual void goToItem(WebCore::HistoryItem*);
         
     virtual WebCore::HistoryItem* itemAtIndex(int);
     virtual int backListCount();
-- 
2.0.1

