From 8671c12348ccae25d21a76dd70c7a15e7973474d Mon Sep 17 00:00:00 2001
From: "Brian J. Burg" <burg@cs.washington.edu>
Date: Sat, 13 Sep 2014 16:15:46 -0700
Subject: [PATCH] Web Replay: ASSERTION FAILED: withinEventLoopInputExtent !=
 m_withinEventLoopInputExtent https://bugs.webkit.org/show_bug.cgi?id=133019

Reviewed by NOBODY (OOPS!).

This assertion is slightly wrong because it does not account for nested run loops.
We can be within two input extents when a nested run loop processes additional
user inputs while the debugger is paused.

This should only be the case when execution is being neither captured or
replayed. The debugger should not pause when capturing, and we should not replay
event loop inputs while in a nested run loop.

* replay/InputCursor.h:
(JSC::InputCursor::setWithinEventLoopInputExtent): Fix the assertion.
---
 Source/JavaScriptCore/ChangeLog            | 18 ++++++++++++++++++
 Source/JavaScriptCore/replay/InputCursor.h |  8 +++++---
 2 files changed, 23 insertions(+), 3 deletions(-)

diff --git a/Source/JavaScriptCore/ChangeLog b/Source/JavaScriptCore/ChangeLog
index 57a3489..14f354a 100644
--- a/Source/JavaScriptCore/ChangeLog
+++ b/Source/JavaScriptCore/ChangeLog
@@ -1,10 +1,28 @@
+2014-09-13  Brian J. Burg  <burg@cs.washington.edu>
+
+        Web Replay: ASSERTION FAILED: withinEventLoopInputExtent != m_withinEventLoopInputExtent
+        https://bugs.webkit.org/show_bug.cgi?id=133019
+
+        Reviewed by NOBODY (OOPS!).
+
+        This assertion is slightly wrong because it does not account for nested run loops.
+        We can be within two input extents when a nested run loop processes additional
+        user inputs while the debugger is paused.
+
+        This should only be the case when execution is being neither captured or
+        replayed. The debugger should not pause when capturing, and we should not replay
+        event loop inputs while in a nested run loop.
+
+        * replay/InputCursor.h:
+        (JSC::InputCursor::setWithinEventLoopInputExtent): Fix the assertion.
+
 2014-08-19  Brian J. Burg  <burg@cs.washington.edu>
 
         Web Replay: Check event loop extents during replaying
         Need a Bug URL (OOPS!)
 
         Reviewed by NOBODY (OOPS!).
 
         Sometimes we see different nondeterminism during capture and replay
         executions, so we should support determinism checks during replay too.
 
diff --git a/Source/JavaScriptCore/replay/InputCursor.h b/Source/JavaScriptCore/replay/InputCursor.h
index 2f40040..5c2a85e 100644
--- a/Source/JavaScriptCore/replay/InputCursor.h
+++ b/Source/JavaScriptCore/replay/InputCursor.h
@@ -45,23 +45,25 @@ public:
     {
     }
 
     virtual ~InputCursor() { }
 
     virtual bool isCapturing() const = 0;
     virtual bool isReplaying() const = 0;
 
     void setWithinEventLoopInputExtent(bool withinEventLoopInputExtent)
     {
-        // We cannot enter more than one extent at a time, since they represent
-        // a single run loop's work on behalf of the Page.
-        ASSERT(withinEventLoopInputExtent != m_withinEventLoopInputExtent);
+        // We can be within two input extents when a nested run loop
+        // processes additional user inputs while the debugger is paused.
+        // However, the debugger should not pause when capturing, and we
+        // should not replay event loop inputs while in a nested run loop.
+        ASSERT(m_withinEventLoopInputExtent != withinEventLoopInputExtent || !(isCapturing() || isReplaying()));
         m_withinEventLoopInputExtent = withinEventLoopInputExtent;
     }
 
     bool withinEventLoopInputExtent() const { return m_withinEventLoopInputExtent; }
 
     template <class InputType, class... Args> inline
     void appendInput(Args&&... args)
     {
         InputType* rawInput = WTF::safeCast<InputType*>(new InputType(std::forward<Args>(args)...));
         return storeInput(std::unique_ptr<NondeterministicInputBase>(rawInput));
-- 
2.0.1

