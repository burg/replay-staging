From cc28dd100e911c1e6e79b690be9825049eaa7016 Mon Sep 17 00:00:00 2001
From: "Brian J. Burg" <burg@cs.washington.edu>
Date: Thu, 21 Aug 2014 16:12:31 -0700
Subject: [PATCH] Web Replay: add support for dispatching inputs with Page or
 WebPage context Need the bug URL (OOPS!).

Reviewed by NOBODY (OOPS!).

Source/JavaScriptCore:

Update the inputs code generator to change dispatch() argument based on the
framework the input is from. WebKit framework inputs have the base class of
WebEventLoopInput.

* replay/scripts/CodeGeneratorReplayInputs.py:
(Generator.generate_class_declaration):
(Generator.base_class_string_for_input): Added.
(Generator.base_class_string_for_input.since):
(Generator.generate_constructor_initializer_list):

Source/WebCore:

No new tests, no behavior changed.

* replay/EventLoopInput.h:
(WebCore::EventLoopInputBase::context): Add virtual method override.

Source/WebKit2:

Add overloaded method WebEventLoopInput::dispatch(WebPage&), which
is only available to inputs defined in WebKit2.

* CMakeLists.txt:
* WebKit2.xcodeproj/project.pbxproj:
* WebProcess/Replay/WKInputs.json: Make the dummy input dispatchable.
* WebProcess/Replay/WKReplayInputDispatchMethods.cpp: Added.
(WebKit::HandleMouseMoveDummy::dispatch):
* WebProcess/Replay/WebEventLoopInput.h: Added.
(WebKit::WebEventLoopInputBase::~WebEventLoopInputBase):
* WebProcess/WebCoreSupport/WebReplayClient.cpp:
(WebKit::WebReplayClient::dispatchInput): Provide requested context.
---
 Source/JavaScriptCore/ChangeLog                    | 17 ++++++++
 .../replay/scripts/CodeGeneratorReplayInputs.py    | 44 ++++++++++++++-----
 Source/WebCore/ChangeLog                           | 12 +++++
 Source/WebCore/replay/EventLoopInput.h             |  9 +++-
 Source/WebKit2/CMakeLists.txt                      | 14 +++---
 Source/WebKit2/ChangeLog                           | 20 +++++++++
 Source/WebKit2/WebKit2.xcodeproj/project.pbxproj   |  8 ++++
 Source/WebKit2/WebProcess/Replay/WKInputs.json     |  2 +-
 .../Replay/WKReplayInputDispatchMethods.cpp        | 41 +++++++++++++++++
 .../WebProcess/Replay/WebEventLoopInput.h}         | 51 +++++++---------------
 .../WebProcess/WebCoreSupport/WebReplayClient.cpp  | 12 ++++-
 11 files changed, 170 insertions(+), 60 deletions(-)
 create mode 100644 Source/WebKit2/WebProcess/Replay/WKReplayInputDispatchMethods.cpp
 copy Source/{WebCore/replay/EventLoopInput.h => WebKit2/WebProcess/Replay/WebEventLoopInput.h} (60%)

diff --git a/Source/JavaScriptCore/ChangeLog b/Source/JavaScriptCore/ChangeLog
index 403e301..317b76b 100644
--- a/Source/JavaScriptCore/ChangeLog
+++ b/Source/JavaScriptCore/ChangeLog
@@ -1,12 +1,29 @@
 2015-01-09  Brian J. Burg  <burg@cs.washington.edu>
 
+        Web Replay: add support for dispatching inputs with Page or WebPage context
+        Need the bug URL (OOPS!).
+
+        Reviewed by NOBODY (OOPS!).
+
+        Update the inputs code generator to change dispatch() argument based on the
+        framework the input is from. WebKit framework inputs have the base class of
+        WebEventLoopInput.
+
+        * replay/scripts/CodeGeneratorReplayInputs.py:
+        (Generator.generate_class_declaration):
+        (Generator.base_class_string_for_input): Added.
+        (Generator.base_class_string_for_input.since):
+        (Generator.generate_constructor_initializer_list):
+
+2015-01-09  Brian J. Burg  <burg@cs.washington.edu>
+
         Web Replay: Encode replay inputs through ReplayClient
         Need the bug URL (OOPS!).
 
         Reviewed by NOBODY (OOPS!).
 
         * replay/InputCursor.h:
         (JSC::InputCursor::InputCursor): Fix signature of type().
 
 2014-08-20  Brian J. Burg  <burg@cs.washington.edu>
 
diff --git a/Source/JavaScriptCore/replay/scripts/CodeGeneratorReplayInputs.py b/Source/JavaScriptCore/replay/scripts/CodeGeneratorReplayInputs.py
index 5ed26b9..3bdc070 100644
--- a/Source/JavaScriptCore/replay/scripts/CodeGeneratorReplayInputs.py
+++ b/Source/JavaScriptCore/replay/scripts/CodeGeneratorReplayInputs.py
@@ -41,29 +41,32 @@ except ImportError:
 # Configuration values are first looked up in the framework configuration,
 # and then in the global configuration if there is no framework-specific value.
 GLOBAL_CONFIG = {
     "baseFilename": "ReplayInputs",
     "guardCondition": "ENABLE(WEB_REPLAY)",
     "traitsFrameworkName": "JavaScriptCore",
 
     # These are formatted as ([allowed_frameworks], (framework, header_path)).
     # The generator can figure out how to format the includes.
     "headerIncludes": [
-        (["WebKit", "WebCore"],
-            ("WebCore", "replay/EventLoopInput.h")
+        (["WebKit"],
+            ("WebKit", "WebProcess/Replay/WebEventLoopInput.h")
         ),
-        (["WebKit", "WebCore", "JavaScriptCore"],
-            ("JavaScriptCore", "replay/EncodedValue.h")
+        (["WebCore"],
+            ("WebCore", "replay/EventLoopInput.h")
         ),
         (["JavaScriptCore"],
             ("JavaScriptCore", "replay/NondeterministicInput.h")
         ),
+        (["WebKit", "WebCore", "JavaScriptCore"],
+            ("JavaScriptCore", "replay/EncodedValue.h")
+        ),
         (["WebCore"],
             ("WTF", "wtf/text/WTFString.h")
         ),
 
         # Testing fixtures.
         (["Test"],
             ("WebCore", "platform/ExternalNamespaceHeaderIncludeDummy.h")
         ),
         (["Test"],
             ("Test", "platform/InternalNamespaceHeaderIncludeDummy.h")
@@ -708,43 +711,54 @@ class Generator:
             lines.append("namespace %s {" % framework.setting('namespace'))
             lines.extend(decls_by_framework[framework])
             lines.append("}")
             lines.append("")
 
         return "\n".join(lines)
 
     def generate_class_declaration(self, _input):
         extra_declarations = []
         if _input.queue == InputQueues.EVENT_LOOP:
-            extra_declarations.extend([
-                "",
-                "    // EventLoopInput API",
-                "    virtual void dispatch(WebCore::Page&) override final;",
-            ])
+            if self.target_framework is Frameworks.WebKit:
+                extra_declarations.extend([
+                    "",
+                    "    // WebEventLoopInput API",
+                    "    virtual void dispatch(WebKit::WebPage&) override final;",
+                ])
+            else:
+                extra_declarations.extend([
+                    "",
+                    "    // EventLoopInput API",
+                    "    virtual void dispatch(WebCore::Page&) override final;",
+                ])
 
             if _input.setting('CREATE_FROM_PAGE'):
                 extra_declarations.extend([
                     "    static std::unique_ptr<%s> createFromPage(const WebCore::Page&);" % _input.name
                 ])
+            if _input.setting('CREATE_FROM_WEBPAGE'):
+                extra_declarations.extend([
+                    "    static std::unique_ptr<%s> createFromWebPage(const WebKit::WebPage&);" % _input.name
+                ])
 
         member_getters = [self.generate_input_member_getter(_member) for _member in _input.members]
 
         member_declarations = [self.generate_input_member_declaration(_member) for _member in _input.members]
         if len(member_declarations) > 0:
             member_declarations.insert(0, "private:")
 
         template_arguments = {
             'inputConstructor': self.generate_input_constructor_declaration(_input),
             'inputDestructor': self.generate_input_destructor_declaration(_input),
             'inputName': _input.name,
             'inputQueue': _input.setting('enumValue'),
-            'baseClass': _input.setting('baseClass') % _input.name,
+            'baseClass': self.base_class_string_for_input(_input),
             'extraDeclarations': "\n".join(extra_declarations),
             'memberGetters': "\n".join(member_getters),
             'memberDeclarations': "\n".join(member_declarations),
         }
 
         return wrap_with_guard(Template(Templates.InputClassDeclaration).substitute(template_arguments), _input.guard)
 
     def generate_input_constructor_declaration(self, _input):
         formals_list = self.generate_constructor_formals_list(_input)
         terms = []
@@ -768,20 +782,28 @@ class Generator:
 
     def generate_input_member_tuples(self, _input):
         return [(_member, self._model.get_type_for_member(_member)) for _member in _input.members]
 
     def qualified_input_name(self, _input):
         if self.target_framework == self.traits_framework:
             return _input.name
         else:
             return "%s::%s" % (self.target_framework.setting('namespace'), _input.name)
 
+    def base_class_string_for_input(self, _input):
+        base_class_template = _input.setting('baseClass')
+        # Special override for this subclass since it shares the same queue.
+        if self.target_framework is Frameworks.WebKit and _input.queue is InputQueues.EVENT_LOOP:
+            base_class_template = 'WebKit::WebEventLoopInput<%s>'
+
+        return base_class_template % _input.name
+
     def generate_input_trait_declaration(self, _input):
         decl_type = ['struct']
         if len(self.setting('exportMacro')) > 0:
             decl_type.append(self.setting('exportMacro'))
 
         template_arguments = {
             'structOrClass': " ".join(decl_type),
             'queueType': _input.queue.setting('enumValue'),
             'qualifiedInputName': self.qualified_input_name(_input),
         }
@@ -934,21 +956,21 @@ class Generator:
 
         if len(steps) == 0:
             steps.extend([
                 "    UNUSED_PARAM(encodedValue);",
             ])
 
         return "\n".join(steps)
 
     def generate_constructor_initializer_list(self, _input):
         initializers = []
-        initializers.append("    : %s()" % (_input.setting('baseClass') % _input.name))
+        initializers.append("    : %s()" % self.base_class_string_for_input(_input))
         for _member in _input.members:
             initializers.append("    , m_%s(%s)" % (_member.memberName, self.generate_member_move_expression(_member)))
 
         return "\n".join(initializers)
 
     def generate_constructor_formals_list(self, _input):
         formals_list = []
         for (_member, _type) in self.generate_input_member_tuples(_input):
             shouldQualifyType = self.target_framework is not _type.framework
             formals_list.append("%s %s" % (_type.argument_type(shouldQualifyType), _member.memberName))
diff --git a/Source/WebCore/ChangeLog b/Source/WebCore/ChangeLog
index 28533dd..c63f388 100644
--- a/Source/WebCore/ChangeLog
+++ b/Source/WebCore/ChangeLog
@@ -1,10 +1,22 @@
+2015-01-09  Brian J. Burg  <burg@cs.washington.edu>
+
+        Web Replay: add support for dispatching inputs with Page or WebPage context
+        Need the bug URL (OOPS!).
+
+        Reviewed by NOBODY (OOPS!).
+
+        No new tests, no behavior changed.
+
+        * replay/EventLoopInput.h:
+        (WebCore::EventLoopInputBase::context): Add virtual method override.
+
 2014-08-20  Brian J. Burg  <burg@cs.washington.edu>
 
         Web Replay: Encode replay inputs through ReplayClient
         Need the bug URL (OOPS!).
 
         Reviewed by NOBODY (OOPS!).
 
         Only WebKit2 can access all possible replay inputs, so it should contain
         the big function with cases to encode each input based on its type tag.
 
diff --git a/Source/WebCore/replay/EventLoopInput.h b/Source/WebCore/replay/EventLoopInput.h
index 228055b..9a96584 100644
--- a/Source/WebCore/replay/EventLoopInput.h
+++ b/Source/WebCore/replay/EventLoopInput.h
@@ -24,53 +24,58 @@
  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  */
 
 #ifndef EventLoopInput_h
 #define EventLoopInput_h
 
 #if ENABLE(WEB_REPLAY)
 
 #include <replay/NondeterministicInput.h>
-#include <wtf/CurrentTime.h>
 
 namespace JSC {
 class InputCursor;
 };
 
 namespace WebCore {
 
 class EventLoopInputBase;
 class Page;
-class ReplayController;
 
 // This is an RAII helper used during capturing which sets a flag on the input cursor
 // to track the dynamic extent of a captured event loop input. This extent approximates
 // the interval in which EventLoopInputDispatcher::dispatching() is true.
 class EventLoopInputExtent {
     WTF_MAKE_NONCOPYABLE(EventLoopInputExtent);
 public:
     EventLoopInputExtent(JSC::InputCursor&);
     EventLoopInputExtent(JSC::InputCursor*);
     ~EventLoopInputExtent();
 private:
     JSC::InputCursor* m_cursor;
 };
 
 struct EventLoopInputData {
     EventLoopInputBase* input;
     double timestamp;
 };
 
+enum class InputDispatchContext {
+    WebCore,
+    WebKit
+};
+
 class EventLoopInputBase : public NondeterministicInputBase {
 public:
     virtual ~EventLoopInputBase() { }
+
+    virtual InputDispatchContext context() const { return InputDispatchContext::WebCore; }
     virtual InputQueue queue() const override final { return InputQueue::EventLoopInput; }
 
     virtual void dispatch(Page&) = 0;
 };
 
 template <typename InputType>
 class EventLoopInput : public EventLoopInputBase {
     virtual const String& type() const override final
     {
         return InputTraits<InputType>::type();
diff --git a/Source/WebKit2/CMakeLists.txt b/Source/WebKit2/CMakeLists.txt
index 5c6fd47..95964e0 100644
--- a/Source/WebKit2/CMakeLists.txt
+++ b/Source/WebKit2/CMakeLists.txt
@@ -51,21 +51,20 @@ set(WebKit2_INCLUDE_DIRECTORIES
     "${WEBKIT2_DIR}/WebProcess/InjectedBundle/API/c"
     "${WEBKIT2_DIR}/WebProcess/InjectedBundle/DOM"
     "${WEBKIT2_DIR}/WebProcess/Launching"
     "${WEBKIT2_DIR}/WebProcess/MediaCache"
     "${WEBKIT2_DIR}/WebProcess/MediaStream"
     "${WEBKIT2_DIR}/WebProcess/Network"
     "${WEBKIT2_DIR}/WebProcess/Notifications"
     "${WEBKIT2_DIR}/WebProcess/OriginData"
     "${WEBKIT2_DIR}/WebProcess/Plugins"
     "${WEBKIT2_DIR}/WebProcess/Plugins/Netscape"
-    "${WEBKIT2_DIR}/WebProcess/Replay"
     "${WEBKIT2_DIR}/WebProcess/ResourceCache"
     "${WEBKIT2_DIR}/WebProcess/Storage"
     "${WEBKIT2_DIR}/WebProcess/UserContent"
     "${WEBKIT2_DIR}/WebProcess/WebCoreSupport"
     "${WEBKIT2_DIR}/WebProcess/WebPage"
     "${WEBCORE_DIR}"
     "${WEBCORE_DIR}/Modules/battery"
     "${WEBCORE_DIR}/Modules/mediastream"
     "${WEBCORE_DIR}/Modules/networkinfo"
     "${WEBCORE_DIR}/Modules/notifications"
@@ -758,37 +757,34 @@ if (ENABLE_PLUGIN_PROCESS)
     target_link_libraries(PluginProcess ${PluginProcess_LIBRARIES})
     set_target_properties(PluginProcess PROPERTIES FOLDER "WebKit")
     install(TARGETS PluginProcess DESTINATION "${LIBEXEC_INSTALL_DIR}")
 
     if (WebKit2_PluginProcess_OUTPUT_NAME)
       set_target_properties(PluginProcess PROPERTIES OUTPUT_NAME ${WebKit2_PluginProcess_OUTPUT_NAME})
     endif ()
 endif ()
 
 if (ENABLE_WEB_REPLAY)
-    list(APPEND WebKit2_INCLUDE_DIRECTORIES
-        "${WEBKIT2_DIR}/WebProcess/Replay"
-    )
-
-<<<<<<< HEAD
-    list(APPEND WebKit2_SOURCES
-        WebProcess/Replay/WebReplayClient.cpp
-=======
     set(WebKit2_WEB_REPLAY_INPUTS ${WEBKIT2_DIR}/WebProcess/Replay/WebInputs.json)
     add_custom_command(
         OUTPUT ${DERIVED_SOURCES_WEBKIT2_DIR}/WKReplayInputs.h ${DERIVED_SOURCES_WEBKIT2_DIR}/WKReplayInputs.cpp
         MAIN_DEPENDENCY ${JAVASCRIPTCORE_DIR}/replay/scripts/CodeGeneratorReplayInputs.py
         DEPENDS ${WebKit2_WEB_REPLAY_INPUTS}
         COMMAND ${PYTHON_EXECUTABLE} ${JAVASCRIPTCORE_DIR}/replay/scripts/CodeGeneratorReplayInputs.py --outputDir ${DERIVED_SOURCES_WEBKIT2_DIR}/ --framework WebKit ${WebKit2_WEB_REPLAY_INPUTS}
         VERBATIM)
 
+    list(APPEND WebKit2_INCLUDE_DIRECTORIES
+        "${WEBKIT2_DIR}/WebProcess/Replay"
+    )
+
     list(APPEND WebKit2_SOURCES
         WebProcess/Replay/WKReplayInputCoders.cpp
+        WebProcess/Replay/WebReplayClient.cpp
         ${DERIVED_SOURCES_WEBKIT2_DIR}/WKReplayInputs.cpp
     )
 endif ()
 
 POPULATE_LIBRARY_VERSION(WEBKIT2)
 set_target_properties(WebKit2 PROPERTIES VERSION ${WEBKIT2_VERSION} SOVERSION ${WEBKIT2_VERSION_MAJOR})
 
 install(TARGETS WebKit2 DESTINATION "${LIB_INSTALL_DIR}")
 install(TARGETS WebProcess DESTINATION "${LIBEXEC_INSTALL_DIR}")
diff --git a/Source/WebKit2/ChangeLog b/Source/WebKit2/ChangeLog
index 2cd57c6..433a2ad 100644
--- a/Source/WebKit2/ChangeLog
+++ b/Source/WebKit2/ChangeLog
@@ -1,10 +1,30 @@
+2015-01-09  Brian J. Burg  <burg@cs.washington.edu>
+
+        Web Replay: add support for dispatching inputs with Page or WebPage context
+        Need the bug URL (OOPS!).
+
+        Reviewed by NOBODY (OOPS!).
+
+        Add overloaded method WebEventLoopInput::dispatch(WebPage&), which
+        is only available to inputs defined in WebKit2.
+
+        * CMakeLists.txt:
+        * WebKit2.xcodeproj/project.pbxproj:
+        * WebProcess/Replay/WKInputs.json: Make the dummy input dispatchable.
+        * WebProcess/Replay/WKReplayInputDispatchMethods.cpp: Added.
+        (WebKit::HandleMouseMoveDummy::dispatch):
+        * WebProcess/Replay/WebEventLoopInput.h: Added.
+        (WebKit::WebEventLoopInputBase::~WebEventLoopInputBase):
+        * WebProcess/WebCoreSupport/WebReplayClient.cpp:
+        (WebKit::WebReplayClient::dispatchInput): Provide requested context.
+
 2014-08-20  Brian J. Burg  <burg@cs.washington.edu>
 
         Web Replay: Encode replay inputs through ReplayClient
         Need the bug URL (OOPS!).
 
         Reviewed by NOBODY (OOPS!).
 
         Only WebKit2 can access all frameworks' replay inputs, so it should contain
         the big function with cases to encode each input based on its type tag.
 
diff --git a/Source/WebKit2/WebKit2.xcodeproj/project.pbxproj b/Source/WebKit2/WebKit2.xcodeproj/project.pbxproj
index c987143..1247377 100644
--- a/Source/WebKit2/WebKit2.xcodeproj/project.pbxproj
+++ b/Source/WebKit2/WebKit2.xcodeproj/project.pbxproj
@@ -1557,20 +1557,22 @@
 		C0337DD8127A51B6008FF4F4 /* WebTouchEvent.cpp in Sources */ = {isa = PBXBuildFile; fileRef = C0337DD7127A51B6008FF4F4 /* WebTouchEvent.cpp */; };
 		C0337DDD127A521C008FF4F4 /* WebPlatformTouchPoint.cpp in Sources */ = {isa = PBXBuildFile; fileRef = C0337DDC127A521C008FF4F4 /* WebPlatformTouchPoint.cpp */; };
 		C06C6095124C144B0001682F /* WebPageCreationParameters.cpp in Sources */ = {isa = PBXBuildFile; fileRef = C06C6093124C14430001682F /* WebPageCreationParameters.cpp */; };
 		C09AE5E9125257C20025825D /* WKNativeEvent.h in Headers */ = {isa = PBXBuildFile; fileRef = C09AE5E8125257C20025825D /* WKNativeEvent.h */; settings = {ATTRIBUTES = (Private, ); }; };
 		C0CE72A01247E71D00BC0EC4 /* WebPageMessageReceiver.cpp in Sources */ = {isa = PBXBuildFile; fileRef = C0CE729E1247E71D00BC0EC4 /* WebPageMessageReceiver.cpp */; };
 		C0CE72A11247E71D00BC0EC4 /* WebPageMessages.h in Headers */ = {isa = PBXBuildFile; fileRef = C0CE729F1247E71D00BC0EC4 /* WebPageMessages.h */; };
 		C0CE72AD1247E78D00BC0EC4 /* HandleMessage.h in Headers */ = {isa = PBXBuildFile; fileRef = C0CE72AC1247E78D00BC0EC4 /* HandleMessage.h */; };
 		C0E3AA7A1209E83000A49D01 /* ModuleCF.cpp in Sources */ = {isa = PBXBuildFile; fileRef = C0E3AA481209E45000A49D01 /* ModuleCF.cpp */; };
 		C0E3AA7B1209E83500A49D01 /* Module.cpp in Sources */ = {isa = PBXBuildFile; fileRef = C0E3AA451209E2BA00A49D01 /* Module.cpp */; };
 		C0E3AA7C1209E83C00A49D01 /* Module.h in Headers */ = {isa = PBXBuildFile; fileRef = C0E3AA441209E2BA00A49D01 /* Module.h */; };
+		C406EFAE1A60FB6C00C86AE6 /* WKReplayInputDispatchMethods.cpp in Sources */ = {isa = PBXBuildFile; fileRef = C406EFAD1A60FB5400C86AE6 /* WKReplayInputDispatchMethods.cpp */; };
+		C490806919A6A87800663BCF /* WebEventLoopInput.h in Headers */ = {isa = PBXBuildFile; fileRef = C490806819A6A87800663BCF /* WebEventLoopInput.h */; };
 		C49474B019A3F93F009B3DE8 /* WebReplayClient.h in Headers */ = {isa = PBXBuildFile; fileRef = C49474AE19A3F924009B3DE8 /* WebReplayClient.h */; };
 		C49474B119A3F947009B3DE8 /* WebReplayClient.cpp in Sources */ = {isa = PBXBuildFile; fileRef = C49474AD19A3F924009B3DE8 /* WebReplayClient.cpp */; };
 		C49474B719A41B73009B3DE8 /* WKReplayInputs.cpp in Sources */ = {isa = PBXBuildFile; fileRef = C49474B519A41B73009B3DE8 /* WKReplayInputs.cpp */; };
 		C49474B819A41B73009B3DE8 /* WKReplayInputs.h in Headers */ = {isa = PBXBuildFile; fileRef = C49474B619A41B73009B3DE8 /* WKReplayInputs.h */; };
 		C49474BB19A5413F009B3DE8 /* WKReplayInputCoders.cpp in Sources */ = {isa = PBXBuildFile; fileRef = C49474B919A5413F009B3DE8 /* WKReplayInputCoders.cpp */; };
 		C49474BC19A5413F009B3DE8 /* WKReplayInputCoders.h in Headers */ = {isa = PBXBuildFile; fileRef = C49474BA19A5413F009B3DE8 /* WKReplayInputCoders.h */; };
 		C517388112DF8F4F00EE3F47 /* DragControllerAction.h in Headers */ = {isa = PBXBuildFile; fileRef = C517388012DF8F4F00EE3F47 /* DragControllerAction.h */; };
 		C5237F6012441CA300780472 /* WebEditorClientMac.mm in Sources */ = {isa = PBXBuildFile; fileRef = C5237F5F12441CA300780472 /* WebEditorClientMac.mm */; };
 		C54256B518BEC18C00DE4179 /* WKFormInputControl.h in Headers */ = {isa = PBXBuildFile; fileRef = C54256AF18BEC18B00DE4179 /* WKFormInputControl.h */; };
 		C54256B618BEC18C00DE4179 /* WKFormInputControl.mm in Sources */ = {isa = PBXBuildFile; fileRef = C54256B018BEC18B00DE4179 /* WKFormInputControl.mm */; };
@@ -3704,20 +3706,22 @@
 		C0CE72581247E4DA00BC0EC4 /* WebPage.messages.in */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = text; path = WebPage.messages.in; sourceTree = "<group>"; };
 		C0CE729E1247E71D00BC0EC4 /* WebPageMessageReceiver.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = WebPageMessageReceiver.cpp; sourceTree = "<group>"; };
 		C0CE729F1247E71D00BC0EC4 /* WebPageMessages.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = WebPageMessages.h; sourceTree = "<group>"; };
 		C0CE72AC1247E78D00BC0EC4 /* HandleMessage.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = HandleMessage.h; sourceTree = "<group>"; };
 		C0CE72DB1247E8F700BC0EC4 /* DerivedSources.make */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = text; path = DerivedSources.make; sourceTree = "<group>"; };
 		C0CE73361247F70E00BC0EC4 /* generate-message-receiver.py */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = text.script.python; path = "generate-message-receiver.py"; sourceTree = "<group>"; };
 		C0CE73371247F70E00BC0EC4 /* generate-messages-header.py */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = text.script.python; path = "generate-messages-header.py"; sourceTree = "<group>"; };
 		C0E3AA441209E2BA00A49D01 /* Module.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = Module.h; sourceTree = "<group>"; };
 		C0E3AA451209E2BA00A49D01 /* Module.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = Module.cpp; sourceTree = "<group>"; };
 		C0E3AA481209E45000A49D01 /* ModuleCF.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = ModuleCF.cpp; sourceTree = "<group>"; };
+		C406EFAD1A60FB5400C86AE6 /* WKReplayInputDispatchMethods.cpp */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.cpp.cpp; path = WKReplayInputDispatchMethods.cpp; sourceTree = "<group>"; };
+		C490806819A6A87800663BCF /* WebEventLoopInput.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = WebEventLoopInput.h; sourceTree = "<group>"; };
 		C49474AD19A3F924009B3DE8 /* WebReplayClient.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = WebReplayClient.cpp; sourceTree = "<group>"; };
 		C49474AE19A3F924009B3DE8 /* WebReplayClient.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = WebReplayClient.h; sourceTree = "<group>"; };
 		C49474B319A41246009B3DE8 /* WKInputs.json */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = text.json; path = WKInputs.json; sourceTree = "<group>"; };
 		C49474B519A41B73009B3DE8 /* WKReplayInputs.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = WKReplayInputs.cpp; sourceTree = "<group>"; };
 		C49474B619A41B73009B3DE8 /* WKReplayInputs.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = WKReplayInputs.h; sourceTree = "<group>"; };
 		C49474B919A5413F009B3DE8 /* WKReplayInputCoders.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = WKReplayInputCoders.cpp; sourceTree = "<group>"; };
 		C49474BA19A5413F009B3DE8 /* WKReplayInputCoders.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = WKReplayInputCoders.h; sourceTree = "<group>"; };
 		C517388012DF8F4F00EE3F47 /* DragControllerAction.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = DragControllerAction.h; sourceTree = "<group>"; };
 		C5237F5F12441CA300780472 /* WebEditorClientMac.mm */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.objcpp; path = WebEditorClientMac.mm; sourceTree = "<group>"; };
 		C54256AF18BEC18B00DE4179 /* WKFormInputControl.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; name = WKFormInputControl.h; path = ios/forms/WKFormInputControl.h; sourceTree = "<group>"; };
@@ -7082,20 +7086,22 @@
 			sourceTree = "<group>";
 			tabWidth = 8;
 			usesTabs = 0;
 		};
 		C49474B219A4121A009B3DE8 /* Replay */ = {
 			isa = PBXGroup;
 			children = (
 				C49474B319A41246009B3DE8 /* WKInputs.json */,
 				C49474B919A5413F009B3DE8 /* WKReplayInputCoders.cpp */,
 				C49474BA19A5413F009B3DE8 /* WKReplayInputCoders.h */,
+				C406EFAD1A60FB5400C86AE6 /* WKReplayInputDispatchMethods.cpp */,
+				C490806819A6A87800663BCF /* WebEventLoopInput.h */,
 			);
 			path = Replay;
 			sourceTree = "<group>";
 		};
 		C54256AE18BEC16100DE4179 /* forms */ = {
 			isa = PBXGroup;
 			children = (
 				C5FA1ED118E1062200B3F402 /* WKAirPlayRoutePicker.h */,
 				C5FA1ED218E1062200B3F402 /* WKAirPlayRoutePicker.mm */,
 				A58B6F0618FCA733008CBA53 /* WKFileUploadPanel.h */,
@@ -7677,20 +7683,21 @@
 				F62A76B912B1B25F0005F1B6 /* WebDatabaseManagerProxyMessages.h in Headers */,
 				CD19A26E1A13E834008D650E /* WebDiagnosticLoggingClient.h in Headers */,
 				1A5B1C5518987EDF004FCF9B /* WebDocumentLoader.h in Headers */,
 				BC032D7B10F4378D0058C15A /* WebDragClient.h in Headers */,
 				BCA0EF9F12332642007D3CFB /* WebEditCommandProxy.h in Headers */,
 				BC032D7D10F4378D0058C15A /* WebEditorClient.h in Headers */,
 				1A433F0D113C53DD00FACDE9 /* WebErrors.h in Headers */,
 				BC032DB910F4380F0058C15A /* WebEvent.h in Headers */,
 				BC032DBB10F4380F0058C15A /* WebEventConversion.h in Headers */,
 				BC111B5D112F629800337BAB /* WebEventFactory.h in Headers */,
+				C490806919A6A87800663BCF /* WebEventLoopInput.h in Headers */,
 				1A3DD202125E5A1F004515E6 /* WebFindClient.h in Headers */,
 				1A90C1EE1264FD50003E44D4 /* WebFindOptions.h in Headers */,
 				BCE469541214E6CB000B98EB /* WebFormClient.h in Headers */,
 				BCE469561214E6CB000B98EB /* WebFormSubmissionListenerProxy.h in Headers */,
 				BC032D8D10F437A00058C15A /* WebFrame.h in Headers */,
 				BCE469771214F27B000B98EB /* WebFrameListenerProxy.h in Headers */,
 				BC032D7F10F4378D0058C15A /* WebFrameLoaderClient.h in Headers */,
 				9391F2CB121B67AD00EBF7E8 /* WebFrameNetworkingContext.h in Headers */,
 				BCB9F6A01123A84B00A137E0 /* WebFramePolicyListenerProxy.h in Headers */,
 				BC9B38A110F538BE00443A15 /* WebFrameProxy.h in Headers */,
@@ -9617,20 +9624,21 @@
 				BCFD548B132D82680055D816 /* WKErrorCF.cpp in Sources */,
 				BC4075FB124FF0270068F20A /* WKErrorRef.cpp in Sources */,
 				A58B6F0918FCA733008CBA53 /* WKFileUploadPanel.mm in Sources */,
 				C54256B618BEC18C00DE4179 /* WKFormInputControl.mm in Sources */,
 				C54256B918BEC18C00DE4179 /* WKFormPopover.mm in Sources */,
 				C57193BE18C14A44002D0F12 /* WKFormSelectControl.mm in Sources */,
 				C55CB5B818C2A5D600CA81E1 /* WKFormSelectPicker.mm in Sources */,
 				1A3A73CF1A48C7F1007231B3 /* APIPageGroupHandle.cpp in Sources */,
 				C55CB5B718C269CF00CA81E1 /* WKFormSelectPopover.mm in Sources */,
 				BCE469591214EDF4000B98EB /* WKFormSubmissionListener.cpp in Sources */,
+				C406EFAE1A60FB6C00C86AE6 /* WKReplayInputDispatchMethods.cpp in Sources */,
 				BCD0139C110FA420003B8A67 /* WKFrame.cpp in Sources */,
 				1A4D664B18A3030E00D82E21 /* WKFrameInfo.mm in Sources */,
 				BCB9F6A61123DD0D00A137E0 /* WKFramePolicyListener.cpp in Sources */,
 				E1AEA23014687BDB00804569 /* WKFullKeyboardAccessWatcher.mm in Sources */,
 				CDCA85C8132ABA4E00E961DF /* WKFullScreenWindowController.mm in Sources */,
 				BC54CC1312D674EE005C67B0 /* WKGeolocationManager.cpp in Sources */,
 				BC06F44F12DBDF3F002D78DE /* WKGeolocationPermissionRequest.cpp in Sources */,
 				BC0E619912D6CD120012A72A /* WKGeolocationPosition.cpp in Sources */,
 				0FCB4E5018BBE044000FCFC9 /* WKGeolocationProviderIOS.mm in Sources */,
 				0FCB4E5118BBE044000FCFC9 /* WKGeolocationProviderIOSObjCSecurityOrigin.mm in Sources */,
diff --git a/Source/WebKit2/WebProcess/Replay/WKInputs.json b/Source/WebKit2/WebProcess/Replay/WKInputs.json
index d01777e3..538adf8 100644
--- a/Source/WebKit2/WebProcess/Replay/WKInputs.json
+++ b/Source/WebKit2/WebProcess/Replay/WKInputs.json
@@ -8,18 +8,18 @@
                 "name": "PlatformMouseEvent", "mode": "OWNED",
                 "header": "platform/PlatformMouseEvent.h"
             }
         ]
     },
 
     "inputs": [
         {
             "name": "HandleMouseMoveDummy",
             "description": "The embedder signalled a mouse move event.",
-            "queue": "SCRIPT_MEMOIZED",
+            "queue": "EVENT_LOOP",
             "members": [
                 { "name": "platformEvent", "type": "PlatformMouseEvent" },
                 { "name": "scrollbarTargeted", "type": "bool" }
             ]
         }
     ]
 }
diff --git a/Source/WebKit2/WebProcess/Replay/WKReplayInputDispatchMethods.cpp b/Source/WebKit2/WebProcess/Replay/WKReplayInputDispatchMethods.cpp
new file mode 100644
index 0000000..a553382
--- /dev/null
+++ b/Source/WebKit2/WebProcess/Replay/WKReplayInputDispatchMethods.cpp
@@ -0,0 +1,41 @@
+/*
+ * Copyright (C) 2011-2014 University of Washington.
+ * Copyright (C) 2014 Apple Inc. All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in the
+ *    documentation and/or other materials provided with the distribution.
+ *
+ * THIS SOFTWARE IS PROVIDED BY APPLE INC. AND ITS CONTRIBUTORS ``AS IS''
+ * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
+ * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
+ * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL APPLE INC. OR ITS CONTRIBUTORS
+ * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
+ * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
+ * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
+ * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
+ * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
+ * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF
+ * THE POSSIBILITY OF SUCH DAMAGE.
+ */
+
+#include "config.h"
+
+#if ENABLE(WEB_REPLAY)
+
+#include "WKReplayInputs.h"
+
+namespace WebKit {
+
+void HandleMouseMoveDummy::dispatch(WebPage&)
+{
+}
+
+} // namespace WebKit
+
+#endif // ENABLE(WEB_REPLAY)
diff --git a/Source/WebCore/replay/EventLoopInput.h b/Source/WebKit2/WebProcess/Replay/WebEventLoopInput.h
similarity index 60%
copy from Source/WebCore/replay/EventLoopInput.h
copy to Source/WebKit2/WebProcess/Replay/WebEventLoopInput.h
index 228055b..2fc3ca4 100644
--- a/Source/WebCore/replay/EventLoopInput.h
+++ b/Source/WebKit2/WebProcess/Replay/WebEventLoopInput.h
@@ -18,67 +18,48 @@
  * PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
  * HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
  * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
  * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
  * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  */
 
-#ifndef EventLoopInput_h
-#define EventLoopInput_h
+#ifndef WebEventLoopInput_h
+#define WebEventLoopInput_h
 
 #if ENABLE(WEB_REPLAY)
 
-#include <replay/NondeterministicInput.h>
-#include <wtf/CurrentTime.h>
-
-namespace JSC {
-class InputCursor;
-};
+#include <WTF/Assertions.h>
+#include <WebCore/EventLoopInput.h>
 
 namespace WebCore {
-
-class EventLoopInputBase;
 class Page;
-class ReplayController;
-
-// This is an RAII helper used during capturing which sets a flag on the input cursor
-// to track the dynamic extent of a captured event loop input. This extent approximates
-// the interval in which EventLoopInputDispatcher::dispatching() is true.
-class EventLoopInputExtent {
-    WTF_MAKE_NONCOPYABLE(EventLoopInputExtent);
-public:
-    EventLoopInputExtent(JSC::InputCursor&);
-    EventLoopInputExtent(JSC::InputCursor*);
-    ~EventLoopInputExtent();
-private:
-    JSC::InputCursor* m_cursor;
-};
+}
+namespace WebKit {
 
-struct EventLoopInputData {
-    EventLoopInputBase* input;
-    double timestamp;
-};
+class WebPage;
 
-class EventLoopInputBase : public NondeterministicInputBase {
+class WebEventLoopInputBase : public WebCore::EventLoopInputBase {
 public:
-    virtual ~EventLoopInputBase() { }
-    virtual InputQueue queue() const override final { return InputQueue::EventLoopInput; }
+    virtual ~WebEventLoopInputBase() { }
+
+    virtual WebCore::InputDispatchContext context() const override final { return WebCore::InputDispatchContext::WebKit; }
 
-    virtual void dispatch(Page&) = 0;
+    virtual void dispatch(WebCore::Page&) override final { ASSERT_NOT_REACHED(); }
+    virtual void dispatch(WebPage&) = 0;
 };
 
 template <typename InputType>
-class EventLoopInput : public EventLoopInputBase {
+class WebEventLoopInput : public WebEventLoopInputBase {
     virtual const String& type() const override final
     {
         return InputTraits<InputType>::type();
     }
 };
 
-} // namespace WebCore
+} // namespace WebPage
 
 #endif // ENABLE(WEB_REPLAY)
 
-#endif // EventLoopInput_h
+#endif // WebEventLoopInput_h
diff --git a/Source/WebKit2/WebProcess/WebCoreSupport/WebReplayClient.cpp b/Source/WebKit2/WebProcess/WebCoreSupport/WebReplayClient.cpp
index f5b7652..bb1af77 100644
--- a/Source/WebKit2/WebProcess/WebCoreSupport/WebReplayClient.cpp
+++ b/Source/WebKit2/WebProcess/WebCoreSupport/WebReplayClient.cpp
@@ -22,29 +22,37 @@
  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  */
 
 #include "config.h"
 #include "WebReplayClient.h"
 
 #if ENABLE(WEB_REPLAY)
 
 #include "WKReplayInputCoders.h"
+#include "WebEventLoopInput.h"
 #include "WebPage.h"
 #include <WebCore/EventLoopInput.h>
-#include <WebCore/ReplayController.h>
+
+using WebCore::InputDispatchContext;
 
 namespace WebKit {
 
 void WebReplayClient::dispatchInput(WebCore::EventLoopInputBase& input)
 {
-    input.dispatch(*m_page->corePage());
+    switch (input.context()) {
+    case InputDispatchContext::WebCore:
+        input.dispatch(*m_page->corePage());
+        break;
+    case InputDispatchContext::WebKit:
+        static_cast<WebEventLoopInputBase&>(input).dispatch(*m_page);
+    }
 }
 
 bool WebReplayClient::encodeInput(const NondeterministicInputBase& input, EncodedValue& encodedInput)
 {
     encodedInput = EncodingTraits<NondeterministicInputBase>::encodeValue(input);
     return true;
 }
 
 bool WebReplayClient::decodeInput(EncodedValue& encodedInput, std::unique_ptr<NondeterministicInputBase>& decodedInput)
 {
-- 
2.0.1

