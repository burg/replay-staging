From 90b7d24e89237deee0045ad34824aa3c9fd54532 Mon Sep 17 00:00:00 2001
From: "Brian J. Burg" <burg@cs.washington.edu>
Date: Wed, 11 Jun 2014 15:33:16 -0700
Subject: [PATCH] Web Replay: add page-level setting to bypass the MemoryCache
 https://bugs.webkit.org/show_bug.cgi?id=130728

Reviewed by NOBODY (OOPS!).

Source/WebCore:

When replaying a specific Page we don't want to store its cached resources in the
MemoryCache. This patch adds a page setting to prevent the page's resources from
being saved in the MemoryCache.

If Settings::usesMemoryCache() is false, page resources are given the special
SessionID bypassCacheSessionID(). The cached resource loader and memory cache
act as if the memory cache is disabled if the resource has this special session id.
This new session id is considered non-ephemeral; it uses the same network session
as the default session id, but doesn't add entries to MemoryCache.

When the flag is set to false, existing cached resources are evicted. Otherwise,
resources of the captured page will already be cached if the page was recently
loaded.

This strategy is used instead of simply disabling the memory cache, because the
cache is shared as a static singleton, but replay affects a single Page. If we
relied on a disabled memory cache, another page could mistakenly turn it back on.

No new tests, as this functionality will be exercised by network replay tests.

[TEST STRATEGY] write a test to ensure that a duplicate resource load during replay
does not hit MemoryCache (i.e., recieves full resource loader callbacks).

* loader/cache/CachedResourceLoader.cpp:
(WebCore::CachedResourceLoader::requestResource):
(WebCore::CachedResourceLoader::revalidateResource):
* loader/cache/MemoryCache.cpp:
(WebCore::MemoryCache::add):
* page/Page.cpp:
(WebCore::Page::enableLegacyPrivateBrowsing): Update assertion to use SessionID::isEphemeral().
(WebCore::Page::sessionID):
* page/SessionID.h:
(WebCore::SessionID::isEphemeral): bypassCacheSessionID is also not ephemeral.
(WebCore::SessionID::bypassCacheSessionID): Added.
(WebCore::SessionID::legacyPrivateSessionID): Reorder.
* page/Settings.cpp:
(WebCore::Settings::Settings):
* page/Settings.h:
(WebCore::Settings::setUsesMemoryCache): Added. Evict all resources from the
memory cache if the flag is set to false.
(WebCore::Settings::usesMemoryCache): Added.
* replay/ReplayController.cpp: Also flip usesMemoryCache.
(WebCore::ReplayController::setForceDeterministicSettings):
* replay/ReplayController.h:

Source/WebKit2:

Use the default session if the session id is not ephemeral. The default session id
and bypass cache session id are both considered to be non-ephemeral.

* Shared/SessionTracker.cpp:
(WebKit::SessionTracker::session):
(WebKit::SessionTracker::setSession):
---
 Source/WebCore/ChangeLog                           | 52 ++++++++++++++++++++++
 .../WebCore/loader/cache/CachedResourceLoader.cpp  |  5 ++-
 Source/WebCore/loader/cache/MemoryCache.cpp        |  3 ++
 Source/WebCore/page/Page.cpp                       |  7 ++-
 Source/WebCore/page/SessionID.h                    |  5 ++-
 Source/WebCore/page/Settings.cpp                   | 12 +++++
 Source/WebCore/page/Settings.h                     |  6 ++-
 Source/WebCore/replay/ReplayController.cpp         |  3 ++
 Source/WebCore/replay/ReplayController.h           |  4 +-
 Source/WebKit2/ChangeLog                           | 14 ++++++
 Source/WebKit2/Shared/SessionTracker.cpp           |  8 ++--
 11 files changed, 108 insertions(+), 11 deletions(-)

diff --git a/Source/WebCore/ChangeLog b/Source/WebCore/ChangeLog
index 37317df..d60a2b7 100644
--- a/Source/WebCore/ChangeLog
+++ b/Source/WebCore/ChangeLog
@@ -1,10 +1,62 @@
+2014-04-12  Brian J. Burg  <burg@cs.washington.edu>
+
+        Web Replay: add page-level setting to bypass the MemoryCache
+        https://bugs.webkit.org/show_bug.cgi?id=130728
+
+        Reviewed by NOBODY (OOPS!).
+
+        When replaying a specific Page we don't want to store its cached resources in the
+        MemoryCache. This patch adds a page setting to prevent the page's resources from
+        being saved in the MemoryCache.
+
+        If Settings::usesMemoryCache() is false, page resources are given the special
+        SessionID bypassCacheSessionID(). The cached resource loader and memory cache
+        act as if the memory cache is disabled if the resource has this special session id.
+        This new session id is considered non-ephemeral; it uses the same network session
+        as the default session id, but doesn't add entries to MemoryCache.
+
+        When the flag is set to false, existing cached resources are evicted. Otherwise,
+        resources of the captured page will already be cached if the page was recently
+        loaded.
+
+        This strategy is used instead of simply disabling the memory cache, because the
+        cache is shared as a static singleton, but replay affects a single Page. If we 
+        relied on a disabled memory cache, another page could mistakenly turn it back on.
+
+        No new tests, as this functionality will be exercised by network replay tests.
+
+        [TEST STRATEGY] write a test to ensure that a duplicate resource load during replay
+        does not hit MemoryCache (i.e., recieves full resource loader callbacks).
+
+        * loader/cache/CachedResourceLoader.cpp:
+        (WebCore::CachedResourceLoader::requestResource):
+        (WebCore::CachedResourceLoader::revalidateResource):
+        * loader/cache/MemoryCache.cpp:
+        (WebCore::MemoryCache::add):
+        * page/Page.cpp:
+        (WebCore::Page::enableLegacyPrivateBrowsing): Update assertion to use SessionID::isEphemeral().
+        (WebCore::Page::sessionID):
+        * page/SessionID.h:
+        (WebCore::SessionID::isEphemeral): bypassCacheSessionID is also not ephemeral.
+        (WebCore::SessionID::bypassCacheSessionID): Added.
+        (WebCore::SessionID::legacyPrivateSessionID): Reorder.
+        * page/Settings.cpp:
+        (WebCore::Settings::Settings):
+        * page/Settings.h:
+        (WebCore::Settings::setUsesMemoryCache): Added. Evict all resources from the
+        memory cache if the flag is set to false.
+        (WebCore::Settings::usesMemoryCache): Added.
+        * replay/ReplayController.cpp: Also flip usesMemoryCache.
+        (WebCore::ReplayController::setForceDeterministicSettings):
+        * replay/ReplayController.h:
+
 2014-10-10  Brian J. Burg  <burg@cs.washington.edu>
 
         Web Replay: EventSender dispatches should be deterministic
         https://bugs.webkit.org/show_bug.cgi?id=137090
 
         Reviewed by NOBODY (OOPS!).
 
         EventSender asynchronously dispatches fire the load, error, and beforeload events
         some elements. This can execute event handlers nondeterministically.
 
diff --git a/Source/WebCore/loader/cache/CachedResourceLoader.cpp b/Source/WebCore/loader/cache/CachedResourceLoader.cpp
index 07ba927..d7821cd 100644
--- a/Source/WebCore/loader/cache/CachedResourceLoader.cpp
+++ b/Source/WebCore/loader/cache/CachedResourceLoader.cpp
@@ -462,21 +462,21 @@ CachedResourceHandle<CachedResource> CachedResourceLoader::requestResource(Cache
 
     if (!canRequest(type, url, request.options(), request.forPreload()))
         return nullptr;
 
 #if ENABLE(CONTENT_EXTENSIONS)
     if (frame() && frame()->page() && frame()->page()->userContentController() && frame()->page()->userContentController()->contentFilterBlocksURL(url))
         return nullptr;
 #endif
 
     auto& memoryCache = MemoryCache::singleton();
-    if (memoryCache.disabled()) {
+    if (memoryCache.disabled() || sessionID() == SessionID::bypassCacheSessionID()) {
         DocumentResourceMap::iterator it = m_documentResources.find(url.string());
         if (it != m_documentResources.end()) {
             it->value->setOwningCachedResourceLoader(0);
             m_documentResources.remove(it);
         }
     }
 
     // See if we can use an existing resource from the cache.
     CachedResourceHandle<CachedResource> resource;
 #if ENABLE(CACHE_PARTITIONING)
@@ -525,38 +525,41 @@ CachedResourceHandle<CachedResource> CachedResourceLoader::requestResource(Cache
             if (resource->inCache())
                 memoryCache.remove(*resource);
             return nullptr;
         }
     }
 
     if (document() && !document()->loadEventFinished() && !request.resourceRequest().url().protocolIsData())
         m_validatedURLs.add(request.resourceRequest().url());
 
     ASSERT(resource->url() == url.string());
+
     m_documentResources.set(resource->url(), resource);
+
     return resource;
 }
 
 void CachedResourceLoader::documentDidFinishLoadEvent()
 {
     m_validatedURLs.clear();
 }
 
 CachedResourceHandle<CachedResource> CachedResourceLoader::revalidateResource(const CachedResourceRequest& request, CachedResource* resource)
 {
     ASSERT(resource);
     ASSERT(resource->inCache());
     auto& memoryCache = MemoryCache::singleton();
     ASSERT(!memoryCache.disabled());
     ASSERT(resource->canUseCacheValidator());
     ASSERT(!resource->resourceToRevalidate());
     ASSERT(resource->sessionID() == sessionID());
+    ASSERT(sessionID() != SessionID::bypassCacheSessionID());
 
     CachedResourceHandle<CachedResource> newResource = createResource(resource->type(), resource->resourceRequest(), resource->encoding(), resource->sessionID());
     
     LOG(ResourceLoading, "Resource %p created to revalidate %p", newResource.get(), resource);
     newResource->setResourceToRevalidate(resource);
     
     memoryCache.remove(*resource);
     memoryCache.add(*newResource);
 #if ENABLE(RESOURCE_TIMING)
     storeResourceTimingInitiatorInformation(resource, request);
diff --git a/Source/WebCore/loader/cache/MemoryCache.cpp b/Source/WebCore/loader/cache/MemoryCache.cpp
index 142b4d5..82df1b4 100644
--- a/Source/WebCore/loader/cache/MemoryCache.cpp
+++ b/Source/WebCore/loader/cache/MemoryCache.cpp
@@ -99,20 +99,23 @@ URL MemoryCache::removeFragmentIdentifierIfNeeded(const URL& originalURL)
     URL url = originalURL;
     url.removeFragmentIdentifier();
     return url;
 }
 
 bool MemoryCache::add(CachedResource& resource)
 {
     if (disabled())
         return false;
 
+    if (resource.sessionID() == SessionID::bypassCacheSessionID())
+        return false;
+
     ASSERT(WTF::isMainThread());
 
 #if ENABLE(CACHE_PARTITIONING)
     auto key = std::make_pair(resource.url(), resource.cachePartition());
 #else
     auto& key = resource.url();
 #endif
     ensureSessionResourceMap(resource.sessionID()).set(key, &resource);
     resource.setInCache(true);
     
diff --git a/Source/WebCore/page/Page.cpp b/Source/WebCore/page/Page.cpp
index 06b91ba..4e12ca0 100644
--- a/Source/WebCore/page/Page.cpp
+++ b/Source/WebCore/page/Page.cpp
@@ -1193,22 +1193,22 @@ void Page::storageBlockingStateChanged()
     // Collect the PluginViews in to a vector to ensure that action the plug-in takes
     // from below storageBlockingStateChanged does not affect their lifetime.
     auto views = pluginViews();
 
     for (unsigned i = 0; i < views.size(); ++i)
         views[i]->storageBlockingStateChanged();
 }
 
 void Page::enableLegacyPrivateBrowsing(bool privateBrowsingEnabled)
 {
-    // Don't allow changing the legacy private browsing state if we have set a session ID.
-    ASSERT(m_sessionID == SessionID::defaultSessionID() || m_sessionID == SessionID::legacyPrivateSessionID());
+    // Don't allow changing the legacy private browsing state if we have set an ephemeral session ID.
+    ASSERT(!m_sessionID.isEphemeral());
 
     setSessionID(privateBrowsingEnabled ? SessionID::legacyPrivateSessionID() : SessionID::defaultSessionID());
 }
 
 void Page::updateIsPlayingAudio()
 {
     bool isPlayingAudio = false;
     for (Frame* frame = &mainFrame(); frame; frame = frame->tree().traverseNext()) {
         if (frame->document()->isPlayingAudio()) {
             isPlayingAudio = true;
@@ -1659,20 +1659,23 @@ void Page::setVisitedLinkStore(Ref<VisitedLinkStore>&& visitedLinkStore)
     m_visitedLinkStore->removePage(*this);
     m_visitedLinkStore = WTF::move(visitedLinkStore);
     m_visitedLinkStore->addPage(*this);
 
     invalidateStylesForAllLinks();
     PageCache::singleton().markPagesForFullStyleRecalc(*this);
 }
 
 SessionID Page::sessionID() const
 {
+    if (!settings().usesMemoryCache())
+        return SessionID::bypassCacheSessionID();
+
     return m_sessionID;
 }
 
 void Page::setSessionID(SessionID sessionID)
 {
     ASSERT(sessionID.isValid());
 
     bool privateBrowsingStateChanged = (sessionID.isEphemeral() != m_sessionID.isEphemeral());
 
     m_sessionID = sessionID;
diff --git a/Source/WebCore/page/SessionID.h b/Source/WebCore/page/SessionID.h
index 976f4de..e8a7ba4 100644
--- a/Source/WebCore/page/SessionID.h
+++ b/Source/WebCore/page/SessionID.h
@@ -31,28 +31,29 @@
 
 namespace WebCore {
 
 class SessionID {
 public:
     SessionID()
         : SessionID(emptySessionID()) { }
     explicit SessionID(uint64_t sessionID)
         : m_sessionID(sessionID) { }
     bool isValid() const { return *this != emptySessionID(); }
-    bool isEphemeral() const { return *this != defaultSessionID(); }
+    bool isEphemeral() const { return *this != defaultSessionID() && *this != bypassCacheSessionID(); }
     uint64_t sessionID() const { return m_sessionID; }
     bool operator==(SessionID sessionID) const { return m_sessionID == sessionID.m_sessionID; }
     bool operator!=(SessionID sessionID) const { return m_sessionID != sessionID.m_sessionID; }
 
     static SessionID emptySessionID() { return SessionID(0); }
     static SessionID defaultSessionID() { return SessionID(1); }
-    static SessionID legacyPrivateSessionID() { return SessionID(2); }
+    static SessionID bypassCacheSessionID() { return SessionID(2); }
+    static SessionID legacyPrivateSessionID() { return SessionID(3); }
 private:
     uint64_t m_sessionID;
 };
 
 }
 
 namespace WTF {
 
 // The empty value is emptySessionID(), the deleted value is (-1)
 struct SessionIDHash {
diff --git a/Source/WebCore/page/Settings.cpp b/Source/WebCore/page/Settings.cpp
index 53d2f95..6a4e6f8 100644
--- a/Source/WebCore/page/Settings.cpp
+++ b/Source/WebCore/page/Settings.cpp
@@ -34,20 +34,21 @@
 #include "Database.h"
 #include "Document.h"
 #include "FontCascade.h"
 #include "FontGenericFamilies.h"
 #include "FrameTree.h"
 #include "FrameView.h"
 #include "HTMLMediaElement.h"
 #include "HistoryItem.h"
 #include "InspectorInstrumentation.h"
 #include "MainFrame.h"
+#include "MemoryCache.h"
 #include "Page.h"
 #include "PageCache.h"
 #include "StorageMap.h"
 #include "TextAutosizer.h"
 #include <limits>
 #include <wtf/NeverDestroyed.h>
 #include <wtf/StdLibExtras.h>
 
 namespace WebCore {
 
@@ -178,20 +179,21 @@ Settings::Settings(Page* page)
 #endif
     SETTINGS_INITIALIZER_LIST
     , m_isJavaEnabled(false)
     , m_isJavaEnabledForLocalFiles(true)
     , m_loadsImagesAutomatically(false)
     , m_areImagesEnabled(true)
     , m_arePluginsEnabled(false)
     , m_isScriptEnabled(false)
     , m_needsAdobeFrameReloadingQuirk(false)
     , m_usesPageCache(false)
+    , m_usesMemoryCache(true)
     , m_fontRenderingMode(0)
     , m_showTiledScrollingIndicator(false)
     , m_backgroundShouldExtendBeyondPage(false)
     , m_dnsPrefetchingEnabled(false)
 #if ENABLE(TOUCH_EVENTS)
     , m_touchEventEmulationEnabled(false)
 #endif
     , m_scrollingPerformanceLoggingEnabled(false)
     , m_timeWithoutMouseMovementBeforeHidingControls(3)
     , m_setImageLoadingSettingsTimer(*this, &Settings::imageLoadingSettingsTimerFired)
@@ -494,20 +496,30 @@ double Settings::domTimerAlignmentInterval() const
     return m_page->timerAlignmentInterval();
 }
 
 void Settings::setLayoutInterval(std::chrono::milliseconds layoutInterval)
 {
     // FIXME: It seems weird that this function may disregard the specified layout interval.
     // We should either expose layoutScheduleThreshold or better communicate this invariant.
     m_layoutInterval = std::max(layoutInterval, layoutScheduleThreshold);
 }
 
+void Settings::setUsesMemoryCache(bool usesMemoryCache)
+{
+    if (m_usesPageCache == usesMemoryCache)
+        return;
+
+    m_usesMemoryCache = usesMemoryCache;
+    if (!m_usesMemoryCache)
+        MemoryCache::singleton().evictResources();
+}
+
 void Settings::setUsesPageCache(bool usesPageCache)
 {
     if (m_usesPageCache == usesPageCache)
         return;
         
     m_usesPageCache = usesPageCache;
 
     if (!m_page)
         return;
 
diff --git a/Source/WebCore/page/Settings.h b/Source/WebCore/page/Settings.h
index 85e9071..863ea7b 100644
--- a/Source/WebCore/page/Settings.h
+++ b/Source/WebCore/page/Settings.h
@@ -179,21 +179,24 @@ public:
     WEBCORE_EXPORT void setLayoutInterval(std::chrono::milliseconds);
     std::chrono::milliseconds layoutInterval() const { return m_layoutInterval; }
 
 #if ENABLE(HIDDEN_PAGE_DOM_TIMER_THROTTLING)
     bool hiddenPageDOMTimerThrottlingEnabled() const { return m_hiddenPageDOMTimerThrottlingEnabled; }
     WEBCORE_EXPORT void setHiddenPageDOMTimerThrottlingEnabled(bool);
 #endif
 
     WEBCORE_EXPORT void setUsesPageCache(bool);
     bool usesPageCache() const { return m_usesPageCache; }
-        
+
+    void setUsesMemoryCache(bool);
+    bool usesMemoryCache() const { return m_usesMemoryCache; }
+
     void setFontRenderingMode(FontRenderingMode mode);
     FontRenderingMode fontRenderingMode() const;
 
     WEBCORE_EXPORT void setShowTiledScrollingIndicator(bool);
     bool showTiledScrollingIndicator() const { return m_showTiledScrollingIndicator; }
 
 #if PLATFORM(WIN)
     static void setShouldUseHighResolutionTimers(bool);
     static bool shouldUseHighResolutionTimers() { return gShouldUseHighResolutionTimers; }
 #endif
@@ -297,20 +300,21 @@ private:
     SETTINGS_MEMBER_VARIABLES
 
     bool m_isJavaEnabled : 1;
     bool m_isJavaEnabledForLocalFiles : 1;
     bool m_loadsImagesAutomatically : 1;
     bool m_areImagesEnabled : 1;
     bool m_arePluginsEnabled : 1;
     bool m_isScriptEnabled : 1;
     bool m_needsAdobeFrameReloadingQuirk : 1;
     bool m_usesPageCache : 1;
+    bool m_usesMemoryCache : 1;
     unsigned m_fontRenderingMode : 1;
     bool m_showTiledScrollingIndicator : 1;
     bool m_backgroundShouldExtendBeyondPage : 1;
     bool m_dnsPrefetchingEnabled : 1;
 
 #if ENABLE(TOUCH_EVENTS)
     bool m_touchEventEmulationEnabled : 1;
 #endif
     bool m_scrollingPerformanceLoggingEnabled : 1;
 
diff --git a/Source/WebCore/replay/ReplayController.cpp b/Source/WebCore/replay/ReplayController.cpp
index 0764296..44c69a4 100644
--- a/Source/WebCore/replay/ReplayController.cpp
+++ b/Source/WebCore/replay/ReplayController.cpp
@@ -121,24 +121,27 @@ ReplayController::ReplayController(Page& page)
     , m_sessionState(SessionState::Inactive)
     , m_dispatchSpeed(DispatchSpeed::FastForward)
 {
 }
 
 void ReplayController::setForceDeterministicSettings(bool shouldForceDeterministicBehavior)
 {
     ASSERT_ARG(shouldForceDeterministicBehavior, shouldForceDeterministicBehavior ^ (m_sessionState == SessionState::Inactive));
 
     if (shouldForceDeterministicBehavior) {
+        m_savedSettings.usesMemoryCache = m_page.settings().usesMemoryCache();
         m_savedSettings.usesPageCache = m_page.settings().usesPageCache();
 
+        m_page.settings().setUsesMemoryCache(false);
         m_page.settings().setUsesPageCache(false);
     } else {
+        m_page.settings().setUsesMemoryCache(m_savedSettings.usesMemoryCache);
         m_page.settings().setUsesPageCache(m_savedSettings.usesPageCache);
     }
 
 #if ENABLE(ASYNC_SCROLLING)
     if (ScrollingCoordinator* scrollingCoordinator = m_page.scrollingCoordinator())
         scrollingCoordinator->replaySessionStateDidChange();
 #endif
 }
 
 void ReplayController::setSessionState(SessionState state)
diff --git a/Source/WebCore/replay/ReplayController.h b/Source/WebCore/replay/ReplayController.h
index 065a494..41ab99d 100644
--- a/Source/WebCore/replay/ReplayController.h
+++ b/Source/WebCore/replay/ReplayController.h
@@ -158,24 +158,26 @@ private:
     void loadSegmentAtIndex(size_t);
     void unloadSegment(bool suppressNotifications = false);
 
     EventLoopInputDispatcher& dispatcher() const;
 
     void setSessionState(SessionState);
     void setSegmentState(SegmentState);
     void setForceDeterministicSettings(bool);
 
     struct SavedSettings {
+        bool usesMemoryCache;
         bool usesPageCache;
 
         SavedSettings()
-            : usesPageCache(false)
+            : usesMemoryCache(false)
+            , usesPageCache(false)
         { }
     };
 
     Page& m_page;
 
     RefPtr<ReplaySessionSegment> m_loadedSegment;
     RefPtr<ReplaySession> m_loadedSession;
     Ref<JSC::InputCursor> m_emptyCursor;
     // The active cursor is set to nullptr when invalid.
     RefPtr<JSC::InputCursor> m_activeCursor;
diff --git a/Source/WebKit2/ChangeLog b/Source/WebKit2/ChangeLog
index b15f1e4..56730926 100644
--- a/Source/WebKit2/ChangeLog
+++ b/Source/WebKit2/ChangeLog
@@ -1,10 +1,24 @@
+2014-04-12  Brian J. Burg <burg@cs.washington.edu>
+
+        Web Replay: add page-level setting to bypass the MemoryCache
+        https://bugs.webkit.org/show_bug.cgi?id=130728
+
+        Reviewed by NOBODY (OOPS!).
+
+        Use the default session if the session id is not ephemeral. The default session id
+        and bypass cache session id are both considered to be non-ephemeral.
+
+        * Shared/SessionTracker.cpp:
+        (WebKit::SessionTracker::session):
+        (WebKit::SessionTracker::setSession):
+
 2014-07-15  Brian J. Burg  <burg@cs.washington.edu>
 
         Web Replay: make calls into FrameLoader::checkLoadComplete() deterministic
         https://bugs.webkit.org/show_bug.cgi?id=129451
 
         Reviewed by NOBODY (OOPS!).
 
         * CMakeLists.txt: Add replay/ directory to header include paths.
 
 2015-02-14  Alexey Proskuryakov  <ap@apple.com>
diff --git a/Source/WebKit2/Shared/SessionTracker.cpp b/Source/WebKit2/Shared/SessionTracker.cpp
index ac79a9d..0886af1 100644
--- a/Source/WebKit2/Shared/SessionTracker.cpp
+++ b/Source/WebKit2/Shared/SessionTracker.cpp
@@ -62,35 +62,35 @@ const HashMap<SessionID, std::unique_ptr<NetworkStorageSession>>& SessionTracker
     return staticSessionMap();
 }
 
 const String& SessionTracker::getIdentifierBase()
 {
     return identifierBase();
 }
 
 NetworkStorageSession* SessionTracker::session(SessionID sessionID)
 {
-    if (sessionID == SessionID::defaultSessionID())
-        return &NetworkStorageSession::defaultStorageSession();
-    return staticSessionMap().get(sessionID);
+    if (sessionID.isEphemeral())
+        return staticSessionMap().get(sessionID);
+    return &NetworkStorageSession::defaultStorageSession();
 }
 
 SessionID SessionTracker::sessionID(const NetworkStorageSession& session)
 {
     if (&session == &NetworkStorageSession::defaultStorageSession())
         return SessionID::defaultSessionID();
     return storageSessionToID().get(&session);
 }
 
 void SessionTracker::setSession(SessionID sessionID, std::unique_ptr<NetworkStorageSession> session)
 {
-    ASSERT(sessionID != SessionID::defaultSessionID());
+    ASSERT(sessionID.isEphemeral());
     storageSessionToID().set(session.get(), sessionID);
     staticSessionMap().set(sessionID, WTF::move(session));
 }
 
 void SessionTracker::destroySession(SessionID sessionID)
 {
     ASSERT(RunLoop::isMain());
     if (staticSessionMap().contains(sessionID)) {
         storageSessionToID().remove(session(sessionID));
         staticSessionMap().remove(sessionID);
-- 
2.3.5

