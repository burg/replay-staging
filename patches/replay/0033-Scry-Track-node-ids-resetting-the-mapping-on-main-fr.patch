From 66ccd93ff770eec36860c03fafa5efac7af64877 Mon Sep 17 00:00:00 2001
From: "Brian J. Burg" <burg@cs.washington.edu>
Date: Fri, 16 Jan 2015 10:48:25 -0800
Subject: [PATCH] [Scry] Track node ids, resetting the mapping on main frame
 navigations and when replay session segments are loaded.

---
 .../WebCore/inspector/InspectorDOMTracingAgent.cpp | 47 +++++++++++++++++++++-
 .../WebCore/inspector/InspectorDOMTracingAgent.h   | 18 +++++++++
 .../WebCore/inspector/InspectorInstrumentation.cpp |  8 ++++
 3 files changed, 71 insertions(+), 2 deletions(-)

diff --git a/Source/WebCore/inspector/InspectorDOMTracingAgent.cpp b/Source/WebCore/inspector/InspectorDOMTracingAgent.cpp
index a48eca3..7a30419 100644
--- a/Source/WebCore/inspector/InspectorDOMTracingAgent.cpp
+++ b/Source/WebCore/inspector/InspectorDOMTracingAgent.cpp
@@ -27,23 +27,28 @@
  */
 
 #include "config.h"
 
 #if ENABLE(INSPECTOR)
 
 #include "InspectorDOMTracingAgent.h"
 
 #include "InstrumentingAgents.h"
 #include "Element.h"
+#include "MainFrame.h"
 #include "Node.h"
 #include <inspector/InspectorFrontendChannel.h>
 
+#if ENABLE(WEB_REPLAY)
+#include "ReplaySessionSegment.h"
+#endif
+
 using namespace Inspector;
 
 namespace WebCore {
 
 InspectorDOMTracingAgent::InspectorDOMTracingAgent(InstrumentingAgents* instrumentingAgents)
     : InspectorAgentBase(ASCIILiteral("DOMTracing"), instrumentingAgents)
 {
 }
 
 InspectorDOMTracingAgent::~InspectorDOMTracingAgent()
@@ -58,18 +63,56 @@ void InspectorDOMTracingAgent::didCreateFrontendAndBackend(InspectorFrontendChan
     m_instrumentingAgents->setInspectorDOMTracingAgent(this);
 }
 
 void InspectorDOMTracingAgent::willDestroyFrontendAndBackend(InspectorDisconnectReason)
 {
     m_frontendDispatcher = nullptr;
     m_backendDispatcher.clear();
 
     m_instrumentingAgents->setInspectorDOMTracingAgent(nullptr);
 }
-    
-void InspectorDOMTracingAgent::commandDummy(Inspector::ErrorString &)
+
+void InspectorDOMTracingAgent::didInsertDOMNode(Node& node)
+{
+    if (!m_nodeIdMap.contains(&node))
+        m_nodeIdMap.set(&node, m_nextNodeId++);
+}
+
+void InspectorDOMTracingAgent::didRemoveDOMNode(Node&)
+{
+
+}
+
+void InspectorDOMTracingAgent::frameNavigated(Frame& frame)
+{
+    if (!frame.isMainFrame())
+        return;
+
+    resetCounters();
+}
+
+#if ENABLE(WEB_REPLAY)
+void InspectorDOMTracingAgent::replaySegmentCreated(RefPtr<ReplaySessionSegment>&&)
+{
+    resetCounters();
+}
+
+void InspectorDOMTracingAgent::replaySegmentLoaded(RefPtr<ReplaySessionSegment>&&)
+{
+    resetCounters();
+}
+#endif // ENABLE(WEB_REPLAY)
+
+// Methods called from the frontend.
+void InspectorDOMTracingAgent::commandDummy(ErrorString&)
+{
+}
+
+void InspectorDOMTracingAgent::resetCounters()
 {
+    m_nodeIdMap.clear();
+    m_nextNodeId = 1;
 }
 
 } // namespace WebCore
 
 #endif // ENABLE(INSPECTOR)
diff --git a/Source/WebCore/inspector/InspectorDOMTracingAgent.h b/Source/WebCore/inspector/InspectorDOMTracingAgent.h
index d8cf0a9..9ec6d9a 100644
--- a/Source/WebCore/inspector/InspectorDOMTracingAgent.h
+++ b/Source/WebCore/inspector/InspectorDOMTracingAgent.h
@@ -35,38 +35,56 @@
 #include <wtf/Forward.h>
 
 namespace WebCore {
 
 class CharacterData;
 class Document;
 class Element;
 class Frame;
 class Node;
 
+#if ENABLE(WEB_REPLAY)
+class ReplaySessionSegment;
+#endif
+
 #if ENABLE(INSPECTOR)
 
 class InspectorDOMTracingAgent final : public InspectorAgentBase
                                      , public Inspector::InspectorDOMTracingBackendDispatcherHandler {
 
     WTF_MAKE_NONCOPYABLE(InspectorDOMTracingAgent);
     WTF_MAKE_FAST_ALLOCATED;
 public:
     InspectorDOMTracingAgent(InstrumentingAgents*);
     virtual ~InspectorDOMTracingAgent();
 
     virtual void didCreateFrontendAndBackend(Inspector::InspectorFrontendChannel*, Inspector::InspectorBackendDispatcher*) override;
     virtual void willDestroyFrontendAndBackend(Inspector::InspectorDisconnectReason) override;
 
     // Methods called from the frontend.
     virtual void commandDummy(Inspector::ErrorString&) override;
 
+    // InspectorInstrumentation callbacks.
+    void didInsertDOMNode(Node&);
+    void didRemoveDOMNode(Node&);
+    void frameNavigated(Frame&);
+
+#if ENABLE(WEB_REPLAY)
+    void replaySegmentCreated(RefPtr<ReplaySessionSegment>&&);
+    void replaySegmentLoaded(RefPtr<ReplaySessionSegment>&&);
+#endif
 
 private:
+    void resetCounters();
+
     std::unique_ptr<Inspector::InspectorDOMTracingFrontendDispatcher> m_frontendDispatcher;
     RefPtr<Inspector::InspectorDOMTracingBackendDispatcher> m_backendDispatcher;
+
+    HashMap<Node*, uint64_t> m_nodeIdMap;
+    uint64_t m_nextNodeId {1};
 };
 
 #endif // ENABLE(INSPECTOR)
 
 } // namespace WebCore
 
 #endif // !defined(InspectorDOMTracingAgent_h)
diff --git a/Source/WebCore/inspector/InspectorInstrumentation.cpp b/Source/WebCore/inspector/InspectorInstrumentation.cpp
index 9c01a43..438c360 100644
--- a/Source/WebCore/inspector/InspectorInstrumentation.cpp
+++ b/Source/WebCore/inspector/InspectorInstrumentation.cpp
@@ -39,20 +39,21 @@
 #include "Database.h"
 #include "DocumentLoader.h"
 #include "Event.h"
 #include "EventDispatcher.h"
 #include "InspectorApplicationCacheAgent.h"
 #include "InspectorController.h"
 #include "InspectorCSSAgent.h"
 #include "InspectorDOMAgent.h"
 #include "InspectorDOMDebuggerAgent.h"
 #include "InspectorDOMStorageAgent.h"
+#include "InspectorDOMTracingAgent.h"
 #include "InspectorDatabaseAgent.h"
 #include "InspectorLayerTreeAgent.h"
 #include "InspectorPageAgent.h"
 #include "InspectorResourceAgent.h"
 #include "InspectorTimelineAgent.h"
 #include "InspectorWorkerAgent.h"
 #include "InstrumentingAgents.h"
 #include "MainFrame.h"
 #include "PageDebuggerAgent.h"
 #include "PageRuntimeAgent.h"
@@ -133,34 +134,38 @@ void InspectorInstrumentation::willInsertDOMNodeImpl(InstrumentingAgents& instru
     if (InspectorDOMDebuggerAgent* domDebuggerAgent = instrumentingAgents.inspectorDOMDebuggerAgent())
         domDebuggerAgent->willInsertDOMNode(parent);
 }
 
 void InspectorInstrumentation::didInsertDOMNodeImpl(InstrumentingAgents& instrumentingAgents, Node& node)
 {
     if (InspectorDOMAgent* domAgent = instrumentingAgents.inspectorDOMAgent())
         domAgent->didInsertDOMNode(node);
     if (InspectorDOMDebuggerAgent* domDebuggerAgent = instrumentingAgents.inspectorDOMDebuggerAgent())
         domDebuggerAgent->didInsertDOMNode(node);
+    if (InspectorDOMTracingAgent* domTracingAgent = instrumentingAgents.inspectorDOMTracingAgent())
+        domTracingAgent->didInsertDOMNode(node);
 }
 
 void InspectorInstrumentation::willRemoveDOMNodeImpl(InstrumentingAgents& instrumentingAgents, Node& node)
 {
     if (InspectorDOMDebuggerAgent* domDebuggerAgent = instrumentingAgents.inspectorDOMDebuggerAgent())
         domDebuggerAgent->willRemoveDOMNode(node);
 }
 
 void InspectorInstrumentation::didRemoveDOMNodeImpl(InstrumentingAgents& instrumentingAgents, Node& node)
 {
     if (InspectorDOMDebuggerAgent* domDebuggerAgent = instrumentingAgents.inspectorDOMDebuggerAgent())
         domDebuggerAgent->didRemoveDOMNode(node);
     if (InspectorDOMAgent* domAgent = instrumentingAgents.inspectorDOMAgent())
         domAgent->didRemoveDOMNode(node);
+    if (InspectorDOMTracingAgent* domTracingAgent = instrumentingAgents.inspectorDOMTracingAgent())
+        domTracingAgent->didRemoveDOMNode(node);
 }
 
 void InspectorInstrumentation::willModifyDOMAttrImpl(InstrumentingAgents& instrumentingAgents, Element& element, const AtomicString& oldValue, const AtomicString& newValue)
 {
     if (InspectorDOMDebuggerAgent* domDebuggerAgent = instrumentingAgents.inspectorDOMDebuggerAgent())
         domDebuggerAgent->willModifyDOMAttr(element);
     if (InspectorDOMAgent* domAgent = instrumentingAgents.inspectorDOMAgent())
         domAgent->willModifyDOMAttr(element, oldValue, newValue);
 }
 
@@ -776,20 +781,23 @@ void InspectorInstrumentation::didCommitLoadImpl(InstrumentingAgents& instrument
         if (InspectorDOMAgent* domAgent = instrumentingAgents.inspectorDOMAgent())
             domAgent->setDocument(page->mainFrame().document());
 
         if (InspectorLayerTreeAgent* layerTreeAgent = instrumentingAgents.inspectorLayerTreeAgent())
             layerTreeAgent->reset();
     }
 
     if (InspectorDOMAgent* domAgent = instrumentingAgents.inspectorDOMAgent())
         domAgent->didCommitLoad(loader->frame()->document());
 
+    if (InspectorDOMTracingAgent* domTracingAgent = instrumentingAgents.inspectorDOMTracingAgent())
+        domTracingAgent->frameNavigated(*loader->frame());
+
     if (InspectorPageAgent* pageAgent = instrumentingAgents.inspectorPageAgent())
         pageAgent->frameNavigated(loader);
 
 #if ENABLE(WEB_REPLAY)
     if (InspectorReplayAgent* replayAgent = instrumentingAgents.inspectorReplayAgent())
         replayAgent->frameNavigated(loader);
 #endif
 }
 
 void InspectorInstrumentation::frameDocumentUpdatedImpl(InstrumentingAgents& instrumentingAgents, Frame* frame)
-- 
2.2.2

