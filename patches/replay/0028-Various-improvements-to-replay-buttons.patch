From 3f668ff2c95aef6a15c937034ad36ac481966194 Mon Sep 17 00:00:00 2001
From: "Brian J. Burg" <burg@cs.washington.edu>
Date: Thu, 18 Sep 2014 18:55:28 -0700
Subject: [PATCH] Various improvements to replay buttons.

* Make TimelineSidebarPanel and ReplayDashboardView now have same buttons and behavior.
* PlayPause button should never be hidden, so button location is stable and eject/capture share same space.
* Properly wait for replay to be initialized before setting up button state.
---
 .../UserInterface/Views/ReplayDashboardView.js     |  44 ++++---
 .../UserInterface/Views/TimelineSidebarPanel.js    | 135 +++++++++++++++------
 2 files changed, 122 insertions(+), 57 deletions(-)

diff --git a/Source/WebInspectorUI/UserInterface/Views/ReplayDashboardView.js b/Source/WebInspectorUI/UserInterface/Views/ReplayDashboardView.js
index 5cbe52f..81c7cfe 100644
--- a/Source/WebInspectorUI/UserInterface/Views/ReplayDashboardView.js
+++ b/Source/WebInspectorUI/UserInterface/Views/ReplayDashboardView.js
@@ -28,30 +28,30 @@ WebInspector.ReplayDashboardView = function(representedObject)
     WebInspector.DashboardView.call(this, representedObject, "replay");
 
     this._navigationBar = new WebInspector.NavigationBar;
     this.element.appendChild(this._navigationBar.element);
 
     this._captureButtonItem = new WebInspector.ActivateButtonNavigationItem("replay-dashboard-capture", WebInspector.UIString("Start Recording"), WebInspector.UIString("Stop Recording"), "Images/ReplayRecordingButton.svg", 16, 16);
     this._captureButtonItem.addEventListener(WebInspector.ButtonNavigationItem.Event.Clicked, this._captureButtonItemClicked, this);
     this._captureButtonItem.hidden = true;
     this._navigationBar.addNavigationItem(this._captureButtonItem);
 
-    this._replayButtonItem = new WebInspector.ToggleButtonNavigationItem("replay-dashboard-replay", WebInspector.UIString("Start Playback"), WebInspector.UIString("Pause Playback"), "Images/ReplayPlayButton.svg", "Images/ReplayPauseButton.svg", 16, 16);
-    this._replayButtonItem.addEventListener(WebInspector.ButtonNavigationItem.Event.Clicked, this._replayButtonItemClicked, this);
-    this._replayButtonItem.hidden = true;
-    this._navigationBar.addNavigationItem(this._replayButtonItem);
-
     this._ejectButtonItem = new WebInspector.ButtonNavigationItem("replay-dashboard-eject", WebInspector.UIString("Eject Recording"), "Images/ReplayEjectButton.svg", 16, 16);
     this._ejectButtonItem.addEventListener(WebInspector.ButtonNavigationItem.Event.Clicked, this._ejectButtonItemClicked, this);
     this._ejectButtonItem.hidden = true;
     this._navigationBar.addNavigationItem(this._ejectButtonItem);
 
+    this._replayButtonItem = new WebInspector.ToggleButtonNavigationItem("replay-dashboard-replay", WebInspector.UIString("Start Playback"), WebInspector.UIString("Pause Playback"), "Images/ReplayPlayButton.svg", "Images/ReplayPauseButton.svg", 16, 16);
+    this._replayButtonItem.addEventListener(WebInspector.ButtonNavigationItem.Event.Clicked, this._replayButtonItemClicked, this);
+    this._replayButtonItem.enabled = false;
+    this._navigationBar.addNavigationItem(this._replayButtonItem);
+
     this._discreteTimelineOverviewGraphMap = new Map;
     this._discreteTimelineOverviewGraphMap.set(WebInspector.TimelineRecord.Type.Network, new WebInspector.SimpleNetworkTimelineOverviewGraph(WebInspector.timelineManager.activeRecording));
     this._discreteTimelineOverviewGraphMap.set(WebInspector.TimelineRecord.Type.Layout, new WebInspector.LayoutTimelineOverviewGraph(WebInspector.timelineManager.activeRecording));
     this._discreteTimelineOverviewGraphMap.set(WebInspector.TimelineRecord.Type.Script, new WebInspector.ScriptTimelineOverviewGraph(WebInspector.timelineManager.activeRecording));
 
     this._timelineOverview = new WebInspector.DashboardTimelineOverview(this._discreteTimelineOverviewGraphMap);
 //    this._timelineOverview.addEventListener(WebInspector.DashboardTimelineOverview.Event.TimeRangeSelectionChanged, this._timeRangeSelectionChanged, this);
     this.element.appendChild(this._timelineOverview.element);
 
     this._updating = false;
@@ -62,31 +62,35 @@ WebInspector.ReplayDashboardView = function(representedObject)
     WebInspector.timelineManager.activeRecording.addEventListener(WebInspector.TimelineRecording.Event.Reset, this._recordingReset, this);
 
     // Add events required to track capture and replay state.
     WebInspector.replayManager.addEventListener(WebInspector.ReplayManager.Event.CaptureStarted, this._captureStarted, this);
     WebInspector.replayManager.addEventListener(WebInspector.ReplayManager.Event.CaptureStopped, this._captureStopped, this);
     WebInspector.replayManager.addEventListener(WebInspector.ReplayManager.Event.PlaybackStarted, this._playbackStarted, this);
     WebInspector.replayManager.addEventListener(WebInspector.ReplayManager.Event.PlaybackPaused, this._playbackPaused, this);
     WebInspector.replayManager.addEventListener(WebInspector.ReplayManager.Event.PlaybackFinished, this._playbackFinished, this);
     WebInspector.replayManager.addEventListener(WebInspector.ReplayManager.Event.ActiveSessionChanged, this._activeSessionChanged, this);
 
-    // Manually initialize style classes by querying current replay state.
-    if (WebInspector.replayManager.sessionState === WebInspector.ReplayManager.SessionState.Capturing)
-        this._captureStarted();
-    else if (WebInspector.replayManager.sessionState === WebInspector.ReplayManager.SessionState.Inactive)
-        this._activeSessionChanged();
-    // ReplayManager.sessionState must be Replaying.
-    else if (WebInspector.replayManager.segmentState === WebInspector.ReplayManager.SegmentState.Dispatching)
-        this._playbackStarted();
-    // ReplayManager.sessionState must be Unloaded or Loaded, so execution is paused.
-    else
-        this._playbackPaused();
+    var view = this;
+
+    WebInspector.replayManager.waitUntilInitialized().then(function() {
+        // Manually initialize style classes by querying current replay state.
+        if (WebInspector.replayManager.sessionState === WebInspector.ReplayManager.SessionState.Capturing)
+            view._captureStarted();
+        else if (WebInspector.replayManager.sessionState === WebInspector.ReplayManager.SessionState.Inactive)
+            view._activeSessionChanged();
+        // ReplayManager.sessionState must be Replaying.
+        else if (WebInspector.replayManager.segmentState === WebInspector.ReplayManager.SegmentState.Dispatching)
+            view._playbackStarted();
+        // ReplayManager.sessionState must be Unloaded or Loaded, so execution is paused.
+        else
+            view._playbackPaused();
+    });
 };
 
 // Class names for single buttons.
 WebInspector.ReplayDashboardView.RecordButtonStyleClassName = "record-button";
 WebInspector.ReplayDashboardView.ReplayButtonStyleClassName = "replay-button";
 
 WebInspector.ReplayDashboardView.prototype = {
     constructor: WebInspector.ReplayDashboardView,
     __proto__: WebInspector.DashboardView.prototype,
 
@@ -127,31 +131,31 @@ WebInspector.ReplayDashboardView.prototype = {
             return WebInspector.replayManager.switchSession(sessionId);
         }).catch(function(error) {
             console.error("Failed to eject current recording: ", error);
         });
     },
 
     _captureStarted: function()
     {
         this._captureButtonItem.hidden = false;
         this._captureButtonItem.activated = true;
-        this._replayButtonItem.hidden = true;
+        this._replayButtonItem.enabled = false;
         this._ejectButtonItem.hidden = true;
 
         this._startUpdatingCurrentTime();
     },
 
     _captureStopped: function()
     {
         this._captureButtonItem.activated = false;
         this._captureButtonItem.hidden = true;
-        this._replayButtonItem.hidden = false;
+        this._replayButtonItem.enabled = true;
         this._ejectButtonItem.hidden = false;
 
         this._stopUpdatingCurrentTime();
     },
 
     _playbackStarted: function()
     {
         this._replayButtonItem.toggled = true;
     },
 
@@ -165,25 +169,25 @@ WebInspector.ReplayDashboardView.prototype = {
         this._replayButtonItem.toggled = false;
     },
 
     _activeSessionChanged: function()
     {
         var view = this;
         WebInspector.replayManager.getSession(WebInspector.replayManager.activeSessionIdentifier)
             .then(function(session) {
                 if (!session.segments.length) {
                     view._captureButtonItem.hidden = false;
-                    view._replayButtonItem.hidden = true;
+                    view._replayButtonItem.enabled = false;
                     view._ejectButtonItem.hidden = true;
                 } else {
                     view._captureButtonItem.hidden = true;
-                    view._replayButtonItem.hidden = false;
+                    view._replayButtonItem.enabled = true;
                     view._ejectButtonItem.hidden = false;
                 }
             });
     },
 
     _recordingReset: function(event)
     {
         this._currentTime = NaN;
 
         if (!this._updating) {
diff --git a/Source/WebInspectorUI/UserInterface/Views/TimelineSidebarPanel.js b/Source/WebInspectorUI/UserInterface/Views/TimelineSidebarPanel.js
index c57add6..78545ed 100644
--- a/Source/WebInspectorUI/UserInterface/Views/TimelineSidebarPanel.js
+++ b/Source/WebInspectorUI/UserInterface/Views/TimelineSidebarPanel.js
@@ -96,56 +96,53 @@ WebInspector.TimelineSidebarPanel = function()
     this._recordStatusElement = document.createElement("div");
     this._recordStatusElement.className = WebInspector.TimelineSidebarPanel.RecordStatusStyleClass;
     statusBarElement.appendChild(this._recordStatusElement);
 
     WebInspector.showReplayInterfaceSetting.addEventListener(WebInspector.Setting.Event.Changed, this._updateReplayInterfaceVisibility, this);
 
     // We always create a navigation bar; its visibility is controlled by WebInspector.showReplayInterfaceSetting.
     this._navigationBar = new WebInspector.NavigationBar;
     this.element.appendChild(this._navigationBar.element);
 
-    var toolTip = WebInspector.UIString("Begin Capturing");
-    var altToolTip = WebInspector.UIString("End Capturing");
-    this._replayCaptureButtonItem = new WebInspector.ActivateButtonNavigationItem("replay-capture", toolTip, altToolTip, "Images/Circle.svg", 16, 16);
+    this._replayCaptureButtonItem = new WebInspector.ActivateButtonNavigationItem("replay-capture", WebInspector.UIString("Begin Capturing"), WebInspector.UIString("End Capturing"), "Images/ReplayRecordingButton.svg", 17, 17);
     this._replayCaptureButtonItem.addEventListener(WebInspector.ButtonNavigationItem.Event.Clicked, this._replayCaptureButtonClicked, this);
-    this._replayCaptureButtonItem.enabled = true;
+    this._replayCaptureButtonItem.hidden = true;
     this._navigationBar.addNavigationItem(this._replayCaptureButtonItem);
 
-    var pauseImage, resumeImage;
-    if (WebInspector.Platform.isLegacyMacOS) {
-        pauseImage = {src: "Images/Legacy/Pause.svg", width: 16, height: 16};
-        resumeImage = {src: "Images/Legacy/Resume.svg", width: 16, height: 16};
-    } else {
-        pauseImage = {src: "Images/Pause.svg", width: 15, height: 15};
-        resumeImage = {src: "Images/Resume.svg", width: 15, height: 15};
-    }
+    this._replayEjectButtonItem = new WebInspector.ButtonNavigationItem("replay-eject", WebInspector.UIString("Eject Recording"), "Images/ReplayEjectButton.svg", 16, 16);
+    this._replayEjectButtonItem.addEventListener(WebInspector.ButtonNavigationItem.Event.Clicked, this._replayEjectButtonClicked, this);
+    this._replayEjectButtonItem.hidden = true;
+    this._navigationBar.addNavigationItem(this._replayEjectButtonItem);
 
-    toolTip = WebInspector.UIString("Start Playback");
-    altToolTip = WebInspector.UIString("Pause Playback");
-    this._replayPauseResumeButtonItem = new WebInspector.ToggleButtonNavigationItem("replay-pause-resume", toolTip, altToolTip, resumeImage.src, pauseImage.src, pauseImage.width, pauseImage.height, true);
+    this._replayPauseResumeButtonItem = new WebInspector.ToggleButtonNavigationItem("replay-playback", WebInspector.UIString("Start Playback"), WebInspector.UIString("Pause Playback"), "Images/ReplayPlayButton.svg", "Images/ReplayPauseButton.svg", 16, 16);
     this._replayPauseResumeButtonItem.addEventListener(WebInspector.ButtonNavigationItem.Event.Clicked, this._replayPauseResumeButtonClicked, this);
     this._replayPauseResumeButtonItem.enabled = false;
     this._navigationBar.addNavigationItem(this._replayPauseResumeButtonItem);
 
-    WebInspector.replayManager.addEventListener(WebInspector.ReplayManager.Event.CaptureStarted, this._captureStarted, this);
-    WebInspector.replayManager.addEventListener(WebInspector.ReplayManager.Event.CaptureStopped, this._captureStopped, this);
+    WebInspector.replayManager.addEventListener(WebInspector.ReplayManager.Event.CaptureStarted, this._replayCaptureStarted, this);
+    WebInspector.replayManager.addEventListener(WebInspector.ReplayManager.Event.CaptureStopped, this._replayCaptureStopped, this);
+    WebInspector.replayManager.addEventListener(WebInspector.ReplayManager.Event.PlaybackStarted, this._replayPlaybackStarted, this);
+    WebInspector.replayManager.addEventListener(WebInspector.ReplayManager.Event.PlaybackPaused, this._replayPlaybackPaused, this);
+    WebInspector.replayManager.addEventListener(WebInspector.ReplayManager.Event.PlaybackFinished, this._replayPlaybackFinished, this);
+    WebInspector.replayManager.addEventListener(WebInspector.ReplayManager.Event.ActiveSessionChanged, this._activeReplaySessionChanged, this);
 
     this._statusBarElement.oncontextmenu = this._contextMenuNavigationBarOrStatusBar.bind(this);
     this._navigationBar.element.oncontextmenu = this._contextMenuNavigationBarOrStatusBar.bind(this);
-    this._updateReplayInterfaceVisibility();
 
     WebInspector.timelineManager.addEventListener(WebInspector.TimelineManager.Event.RecordingCreated, this._recordingCreated, this);
     WebInspector.timelineManager.addEventListener(WebInspector.TimelineManager.Event.RecordingLoaded, this._recordingLoaded, this);
 
     WebInspector.contentBrowser.addEventListener(WebInspector.ContentBrowser.Event.CurrentContentViewDidChange, this._contentBrowserCurrentContentViewDidChange, this);
     WebInspector.timelineManager.addEventListener(WebInspector.TimelineManager.Event.CapturingStarted, this._capturingStarted, this);
     WebInspector.timelineManager.addEventListener(WebInspector.TimelineManager.Event.CapturingStopped, this._capturingStopped, this);
+
+    this._initializeReplayInterfaceState();
 };
 
 WebInspector.TimelineSidebarPanel.HiddenStyleClassName = "hidden";
 WebInspector.TimelineSidebarPanel.StatusBarStyleClass = "status-bar";
 WebInspector.TimelineSidebarPanel.RecordGlyphStyleClass = "record-glyph";
 WebInspector.TimelineSidebarPanel.RecordGlyphRecordingStyleClass = "recording";
 WebInspector.TimelineSidebarPanel.RecordGlyphRecordingForcedStyleClass = "forced";
 WebInspector.TimelineSidebarPanel.RecordStatusStyleClass = "record-status";
 WebInspector.TimelineSidebarPanel.TitleBarStyleClass = "title-bar";
 WebInspector.TimelineSidebarPanel.TimelinesTitleBarStyleClass = "timelines";
@@ -453,20 +450,44 @@ WebInspector.TimelineSidebarPanel.prototype = {
             WebInspector.timelineManager.stopCapturing();
         else {
             WebInspector.timelineManager.startCapturing(shouldCreateRecording);
             // Show the timeline to which events will be appended.
             this._recordingLoaded();
         }
     },
 
     // These methods are only used when ReplayAgent is available.
 
+    _initializeReplayInterfaceState: function()
+    {
+        if (!window.ReplayAgent || !WebInspector.showReplayInterfaceSetting.value)
+            return;
+
+        this._updateReplayInterfaceVisibility();
+
+        var panel = this;
+
+        WebInspector.replayManager.waitUntilInitialized().then(function() {
+            // Manually initialize style classes by querying current replay state.
+            if (WebInspector.replayManager.sessionState === WebInspector.ReplayManager.SessionState.Capturing)
+                panel._replayCaptureStarted();
+            else if (WebInspector.replayManager.sessionState === WebInspector.ReplayManager.SessionState.Inactive)
+                panel._activeReplaySessionChanged();
+            // ReplayManager.sessionState must be Replaying.
+            else if (WebInspector.replayManager.segmentState === WebInspector.ReplayManager.SegmentState.Dispatching)
+                panel._replayPlaybackStarted();
+            // ReplayManager.sessionState must be Unloaded or Loaded, so execution is paused.
+            else
+                panel._replayPlaybackPaused();
+        });
+    },
+
     _updateReplayInterfaceVisibility: function()
     {
         var shouldShowReplayInterface = window.ReplayAgent && WebInspector.showReplayInterfaceSetting.value;
 
         this._statusBarElement.classList.toggle(WebInspector.TimelineSidebarPanel.HiddenStyleClassName, shouldShowReplayInterface);
         this._navigationBar.element.classList.toggle(WebInspector.TimelineSidebarPanel.HiddenStyleClassName, !shouldShowReplayInterface);
     },
 
     _contextMenuNavigationBarOrStatusBar: function()
     {
@@ -480,54 +501,94 @@ WebInspector.TimelineSidebarPanel.prototype = {
         var contextMenu = new WebInspector.ContextMenu(event);
         if (WebInspector.showReplayInterfaceSetting.value)
             contextMenu.appendItem(WebInspector.UIString("Hide Replay Controls"), toggleReplayInterface);
         else
             contextMenu.appendItem(WebInspector.UIString("Show Replay Controls"), toggleReplayInterface);
         contextMenu.show();
     },
 
     _replayCaptureButtonClicked: function()
     {
-        if (!this._replayCaptureButtonItem.activated) {
+        if (WebInspector.replayManager.sessionState !== WebInspector.ReplayManager.SessionState.Capturing)
             WebInspector.replayManager.startCapturing();
-            WebInspector.timelineManager.startCapturing();
-
-            // De-bounce further presses until the backend has begun capturing.
-            this._replayCaptureButtonItem.activated = true;
-            this._replayCaptureButtonItem.enabled = false;
-        } else {
+        else
             WebInspector.replayManager.stopCapturing();
-            WebInspector.timelineManager.stopCapturing();
-
-            this._replayCaptureButtonItem.enabled = false;
-        }
     },
 
-    _replayPauseResumeButtonClicked: function()
+    _replayPauseResumeButtonClicked: function(event)
     {
-        if (this._replayPauseResumeButtonItem.toggled)
+        console.assert(WebInspector.replayManager.sessionState !== WebInspector.ReplayManager.SessionState.Capturing, "Tried to start replaying while SessionState is Capturing!");
+
+        if (WebInspector.replayManager.sessionState === WebInspector.ReplayManager.SessionState.Inactive)
+            WebInspector.replayManager.replayToCompletion();
+        else if (WebInspector.replayManager.segmentState === WebInspector.ReplayManager.SegmentState.Dispatching)
             WebInspector.replayManager.pausePlayback();
         else
             WebInspector.replayManager.replayToCompletion();
     },
 
-    _captureStarted: function()
+    _replayEjectButtonClicked: function(event)
     {
-        this._replayCaptureButtonItem.enabled = true;
+        console.assert(WebInspector.replayManager.sessionState !== WebInspector.ReplayManager.SessionState.Capturing, "Tried to eject session while SessionState is Capturing!");
+
+        // Debounce.
+        this._replayEjectButtonItem.enabled = false;
+
+        var button = this._replayEjectButtonItem;
+
+        WebInspector.replayManager.createSession()
+        .then(function switchToEmptySession(sessionId) {
+            button.enabled = true;
+            return WebInspector.replayManager.switchSession(sessionId);
+        }).catch(function(error) {
+            console.error("Failed to eject current recording: ", error);
+        });
     },
 
-    _captureStopped: function()
+    _replayCaptureStarted: function()
+    {
+        this._replayCaptureButtonItem.hidden = false;
+        this._replayCaptureButtonItem.activated = true;
+        this._replayPauseResumeButtonItem.enabled = false;
+        this._replayEjectButtonItem.hidden = true;
+    },
+
+    _replayCaptureStopped: function()
     {
         this._replayCaptureButtonItem.activated = false;
+        this._replayCaptureButtonItem.hidden = true;
         this._replayPauseResumeButtonItem.enabled = true;
+        this._replayEjectButtonItem.hidden = false;
     },
 
-    _playbackStarted: function()
+    _replayPlaybackStarted: function()
     {
         this._replayPauseResumeButtonItem.toggled = true;
     },
 
-    _playbackPaused: function()
+    _replayPlaybackPaused: function()
     {
         this._replayPauseResumeButtonItem.toggled = false;
-    }
+    },
+
+    _replayPlaybackFinished: function()
+    {
+        this._replayPauseResumeButtonItem.toggled = false;
+    },
+
+    _activeReplaySessionChanged: function()
+    {
+        var view = this;
+        WebInspector.replayManager.getSession(WebInspector.replayManager.activeSessionIdentifier)
+            .then(function(session) {
+                if (!session.segments.length) {
+                    view._replayCaptureButtonItem.hidden = false;
+                    view._replayPauseResumeButtonItem.enabled = false;
+                    view._replayEjectButtonItem.hidden = true;
+                } else {
+                    view._replayCaptureButtonItem.hidden = true;
+                    view._replayPauseResumeButtonItem.enabled = true;
+                    view._replayEjectButtonItem.hidden = false;
+                }
+            });
+    },
 };
-- 
2.0.1

