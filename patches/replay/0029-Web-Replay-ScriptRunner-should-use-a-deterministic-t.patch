From 0518d097eb87801302560a2c6384d270904dfd77 Mon Sep 17 00:00:00 2001
From: "Brian J. Burg" <burg@cs.washington.edu>
Date: Thu, 18 Sep 2014 21:43:08 -0700
Subject: [PATCH] Web Replay: ScriptRunner should use a deterministic timer
 Need the bug URL (OOPS!).

Reviewed by NOBODY (OOPS!).

Scripts should run in a deterministic order.

No new tests (OOPS!).

[TEST STRATEGY] Find a small test case where we reliably hit ScriptRunner asynchrony.

WIP NOTE: this may conflict with a general-purpose handling of ActiveDOMObject's suspend/resume
caused by PageGroupLoadDeferrer. See https://bugs.webkit.org/show_bug.cgi?id=140374

* dom/ScriptRunner.cpp:
(WebCore::ScriptRunner::resume):
(WebCore::ScriptRunner::notifyScriptReady):
* dom/ScriptRunner.h:
---
 Source/WebCore/ChangeLog            | 21 +++++++++++++++++++++
 Source/WebCore/dom/ScriptRunner.cpp |  4 ++--
 Source/WebCore/dom/ScriptRunner.h   |  4 ++--
 3 files changed, 25 insertions(+), 4 deletions(-)

diff --git a/Source/WebCore/ChangeLog b/Source/WebCore/ChangeLog
index a7dc3a6..200f481 100644
--- a/Source/WebCore/ChangeLog
+++ b/Source/WebCore/ChangeLog
@@ -1,10 +1,31 @@
+2015-01-12  Brian J. Burg  <burg@cs.washington.edu>
+
+        Web Replay: ScriptRunner should use a deterministic timer
+        Need the bug URL (OOPS!).
+
+        Reviewed by NOBODY (OOPS!).
+
+        Scripts should run in a deterministic order.
+
+        No new tests (OOPS!).
+
+        [TEST STRATEGY] Find a small test case where we reliably hit ScriptRunner asynchrony.
+
+        WIP NOTE: this may conflict with a general-purpose handling of ActiveDOMObject's suspend/resume
+        caused by PageGroupLoadDeferrer. See https://bugs.webkit.org/show_bug.cgi?id=140374
+
+        * dom/ScriptRunner.cpp:
+        (WebCore::ScriptRunner::resume):
+        (WebCore::ScriptRunner::notifyScriptReady):
+        * dom/ScriptRunner.h:
+
 2014-08-11  Brian J. Burg  <burg@cs.washington.edu>
 
         Web Inspector: add eject current recording button to the replay dashboard
         https://bugs.webkit.org/show_bug.cgi?id=135225
 
         Reviewed by NOBODY (OOPS!).
 
         Add a protocol method that creates an empty replay session. To eject, the
         frontend creates an empty session and then switches to it.
 
diff --git a/Source/WebCore/dom/ScriptRunner.cpp b/Source/WebCore/dom/ScriptRunner.cpp
index ed94da3..7c1eb36 100644
--- a/Source/WebCore/dom/ScriptRunner.cpp
+++ b/Source/WebCore/dom/ScriptRunner.cpp
@@ -71,36 +71,36 @@ void ScriptRunner::queueScriptForExecution(ScriptElement* scriptElement, CachedR
 }
 
 void ScriptRunner::suspend()
 {
     m_timer.stop();
 }
 
 void ScriptRunner::resume()
 {
     if (hasPendingScripts())
-        m_timer.startOneShot(0);
+        m_timer.startOneShot(0, &m_document);
 }
 
 void ScriptRunner::notifyScriptReady(ScriptElement* scriptElement, ExecutionType executionType)
 {
     switch (executionType) {
     case ASYNC_EXECUTION:
         ASSERT(m_pendingAsyncScripts.contains(scriptElement));
         m_scriptsToExecuteSoon.append(m_pendingAsyncScripts.take(scriptElement));
         break;
 
     case IN_ORDER_EXECUTION:
         ASSERT(!m_scriptsToExecuteInOrder.isEmpty());
         break;
     }
-    m_timer.startOneShot(0);
+    m_timer.startOneShot(0, &m_document);
 }
 
 void ScriptRunner::timerFired()
 {
     Ref<Document> protect(m_document);
 
     Vector<PendingScript> scripts;
     scripts.swap(m_scriptsToExecuteSoon);
 
     size_t numInOrderScriptsToExecute = 0;
diff --git a/Source/WebCore/dom/ScriptRunner.h b/Source/WebCore/dom/ScriptRunner.h
index 27cdbf8..456d9ce 100644
--- a/Source/WebCore/dom/ScriptRunner.h
+++ b/Source/WebCore/dom/ScriptRunner.h
@@ -20,21 +20,21 @@
  * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
  * OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. 
  */
 
 #ifndef ScriptRunner_h
 #define ScriptRunner_h
 
 #include "CachedResourceHandle.h"
-#include "Timer.h"
+#include "ReplayableTimer.h"
 #include <wtf/HashMap.h>
 #include <wtf/Noncopyable.h>
 #include <wtf/PassRefPtr.h>
 #include <wtf/Vector.h>
 
 namespace WebCore {
 
 class CachedScript;
 class Document;
 class PendingScript;
@@ -53,16 +53,16 @@ public:
     void resume();
     void notifyScriptReady(ScriptElement*, ExecutionType);
 
 private:
     void timerFired();
 
     Document& m_document;
     Vector<PendingScript> m_scriptsToExecuteInOrder;
     Vector<PendingScript> m_scriptsToExecuteSoon; // http://www.whatwg.org/specs/web-apps/current-work/#set-of-scripts-that-will-execute-as-soon-as-possible
     HashMap<ScriptElement*, PendingScript> m_pendingAsyncScripts;
-    Timer m_timer;
+    ReplayableTimer m_timer;
 };
 
 }
 
 #endif
-- 
2.0.1

