From b5a00dc06ffce49fcd1b95a8195a0869f872dd22 Mon Sep 17 00:00:00 2001
From: "Brian J. Burg" <burg@cs.washington.edu>
Date: Tue, 19 Aug 2014 18:50:22 -0700
Subject: [PATCH] Web Replay: support generating replay inputs for WebKit
 framework https://bugs.webkit.org/show_bug.cgi?id=140446

Reviewed by NOBODY (OOPS!).

Source/JavaScriptCore:

Add the WebKit framework to the code generator. Extract logic to generate headers
properly depending on the source and target framework. Add some missing namespace
scopings so that the generated code can both live in or be included by WebKit2 code.

Input generator test results have been rebaselined. (Their changelog subentries are elided.)

* replay/scripts/CodeGeneratorReplayInputs.py:
(Framework.fromString):
(Frameworks):
(Type.argument_type):
(Type.encoding_type_argument):
(Generator.generate_include_string):
(Generator.generate_includes):
(Generator.generate_class_declaration):
(Generator.generate_input_member_getter):
(Generator.generate_input_member_declaration):
(Generator.generate_constructor_formals_list):
* replay/scripts/tests/expected/generate-enum-encoding-helpers-with-guarded-values.json-TestReplayInputs.cpp:
* replay/scripts/tests/expected/generate-enum-encoding-helpers-with-guarded-values.json-TestReplayInputs.h:
* replay/scripts/tests/expected/generate-enum-encoding-helpers.json-TestReplayInputs.cpp:
* replay/scripts/tests/expected/generate-enum-encoding-helpers.json-TestReplayInputs.h:
* replay/scripts/tests/expected/generate-enum-with-guard.json-TestReplayInputs.cpp:
* replay/scripts/tests/expected/generate-enum-with-guard.json-TestReplayInputs.h:
* replay/scripts/tests/expected/generate-enums-with-same-base-name.json-TestReplayInputs.cpp:
* replay/scripts/tests/expected/generate-enums-with-same-base-name.json-TestReplayInputs.h:
* replay/scripts/tests/expected/generate-input-with-guard.json-TestReplayInputs.cpp:
* replay/scripts/tests/expected/generate-input-with-guard.json-TestReplayInputs.h:
* replay/scripts/tests/expected/generate-input-with-vector-members.json-TestReplayInputs.cpp:
* replay/scripts/tests/expected/generate-input-with-vector-members.json-TestReplayInputs.h:
* replay/scripts/tests/expected/generate-inputs-with-flags.json-TestReplayInputs.cpp:
* replay/scripts/tests/expected/generate-inputs-with-flags.json-TestReplayInputs.h:
* replay/scripts/tests/expected/generate-memoized-type-modes.json-TestReplayInputs.cpp:
* replay/scripts/tests/expected/generate-memoized-type-modes.json-TestReplayInputs.h:

Source/WebCore:

No new tests, no behavior changed.

* WebCore.xcodeproj/project.pbxproj: Make SerializationMethods.h a private header.

Source/WebKit2:

Generate WebKit2-specific replay inputs from WKInputs.json with the code generator.

* CMakeLists.txt:
* Configurations/BaseTarget.xcconfig: Add path for JavaScriptCore private headers
so that we can use the inputs code generator.
* DerivedSources.make: Generate WebKit2 inputs from WKInputs.json.
* WebKit2.xcodeproj/project.pbxproj:
* WebProcess/Replay/WKInputs.json: Added.
---
 Source/JavaScriptCore/ChangeLog                    | 41 ++++++++++++
 .../replay/scripts/CodeGeneratorReplayInputs.py    | 76 ++++++++++++++--------
 ...s-with-guarded-values.json-TestReplayInputs.cpp |  4 +-
 ...ers-with-guarded-values.json-TestReplayInputs.h |  8 +--
 ...enum-encoding-helpers.json-TestReplayInputs.cpp |  2 +-
 ...e-enum-encoding-helpers.json-TestReplayInputs.h |  2 +-
 ...erate-enum-with-guard.json-TestReplayInputs.cpp |  4 +-
 ...enerate-enum-with-guard.json-TestReplayInputs.h | 10 +--
 ...s-with-same-base-name.json-TestReplayInputs.cpp |  4 +-
 ...ums-with-same-base-name.json-TestReplayInputs.h | 12 ++--
 ...rate-input-with-guard.json-TestReplayInputs.cpp |  4 +-
 ...nerate-input-with-guard.json-TestReplayInputs.h |  4 +-
 ...t-with-vector-members.json-TestReplayInputs.cpp |  8 +--
 ...put-with-vector-members.json-TestReplayInputs.h | 20 +++---
 ...ate-inputs-with-flags.json-TestReplayInputs.cpp |  4 +-
 ...erate-inputs-with-flags.json-TestReplayInputs.h |  4 +-
 ...e-memoized-type-modes.json-TestReplayInputs.cpp |  4 +-
 ...ate-memoized-type-modes.json-TestReplayInputs.h |  4 +-
 Source/WebCore/ChangeLog                           | 11 ++++
 Source/WebCore/WebCore.xcodeproj/project.pbxproj   |  4 +-
 Source/WebKit2/CMakeLists.txt                      | 13 ++++
 Source/WebKit2/ChangeLog                           | 16 +++++
 Source/WebKit2/Configurations/BaseTarget.xcconfig  |  1 +
 Source/WebKit2/DerivedSources.make                 | 19 ++++++
 Source/WebKit2/WebKit2.xcodeproj/project.pbxproj   | 20 +++++-
 Source/WebKit2/WebProcess/Replay/WKInputs.json     | 15 +++++
 26 files changed, 236 insertions(+), 78 deletions(-)
 create mode 100644 Source/WebKit2/WebProcess/Replay/WKInputs.json

diff --git a/Source/JavaScriptCore/ChangeLog b/Source/JavaScriptCore/ChangeLog
index ed9369d..c04f436 100644
--- a/Source/JavaScriptCore/ChangeLog
+++ b/Source/JavaScriptCore/ChangeLog
@@ -1,10 +1,51 @@
+2015-01-09  Brian J. Burg  <burg@cs.washington.edu>
+
+        Web Replay: support generating replay inputs for WebKit framework
+        https://bugs.webkit.org/show_bug.cgi?id=140446
+
+        Reviewed by NOBODY (OOPS!).
+
+        Add the WebKit framework to the code generator. Extract logic to generate headers
+        properly depending on the source and target framework. Add some missing namespace
+        scopings so that the generated code can both live in or be included by WebKit2 code.
+
+        Input generator test results have been rebaselined. (Their changelog subentries are elided.)
+
+        * replay/scripts/CodeGeneratorReplayInputs.py:
+        (Framework.fromString):
+        (Frameworks):
+        (Type.argument_type):
+        (Type.encoding_type_argument):
+        (Generator.generate_include_string):
+        (Generator.generate_includes):
+        (Generator.generate_class_declaration):
+        (Generator.generate_input_member_getter):
+        (Generator.generate_input_member_declaration):
+        (Generator.generate_constructor_formals_list):
+        * replay/scripts/tests/expected/generate-enum-encoding-helpers-with-guarded-values.json-TestReplayInputs.cpp:
+        * replay/scripts/tests/expected/generate-enum-encoding-helpers-with-guarded-values.json-TestReplayInputs.h:
+        * replay/scripts/tests/expected/generate-enum-encoding-helpers.json-TestReplayInputs.cpp:
+        * replay/scripts/tests/expected/generate-enum-encoding-helpers.json-TestReplayInputs.h:
+        * replay/scripts/tests/expected/generate-enum-with-guard.json-TestReplayInputs.cpp:
+        * replay/scripts/tests/expected/generate-enum-with-guard.json-TestReplayInputs.h:
+        * replay/scripts/tests/expected/generate-enums-with-same-base-name.json-TestReplayInputs.cpp:
+        * replay/scripts/tests/expected/generate-enums-with-same-base-name.json-TestReplayInputs.h:
+        * replay/scripts/tests/expected/generate-input-with-guard.json-TestReplayInputs.cpp:
+        * replay/scripts/tests/expected/generate-input-with-guard.json-TestReplayInputs.h:
+        * replay/scripts/tests/expected/generate-input-with-vector-members.json-TestReplayInputs.cpp:
+        * replay/scripts/tests/expected/generate-input-with-vector-members.json-TestReplayInputs.h:
+        * replay/scripts/tests/expected/generate-inputs-with-flags.json-TestReplayInputs.cpp:
+        * replay/scripts/tests/expected/generate-inputs-with-flags.json-TestReplayInputs.h:
+        * replay/scripts/tests/expected/generate-memoized-type-modes.json-TestReplayInputs.cpp:
+        * replay/scripts/tests/expected/generate-memoized-type-modes.json-TestReplayInputs.h:
+
 2015-02-15  Brian J. Burg  <burg@cs.washington.edu>
 
         Web Inspector: remove unused XHR replay code
         https://bugs.webkit.org/show_bug.cgi?id=141622
 
         Reviewed by Timothy Hatcher.
 
         * inspector/protocol/Network.json: remove XHR replay methods.
 
 2015-02-15  David Kilzer  <ddkilzer@apple.com>
diff --git a/Source/JavaScriptCore/replay/scripts/CodeGeneratorReplayInputs.py b/Source/JavaScriptCore/replay/scripts/CodeGeneratorReplayInputs.py
index d8294b7..089e388 100644
--- a/Source/JavaScriptCore/replay/scripts/CodeGeneratorReplayInputs.py
+++ b/Source/JavaScriptCore/replay/scripts/CodeGeneratorReplayInputs.py
@@ -41,55 +41,61 @@ except ImportError:
 # Configuration values are first looked up in the framework configuration,
 # and then in the global configuration if there is no framework-specific value.
 GLOBAL_CONFIG = {
     "baseFilename": "ReplayInputs",
     "guardCondition": "ENABLE(WEB_REPLAY)",
     "traitsFrameworkName": "JavaScriptCore",
 
     # These are formatted as ([allowed_frameworks], (framework, header_path)).
     # The generator can figure out how to format the includes.
     "headerIncludes": [
-        (["WebCore"],
+        (["WebKit", "WebCore"],
             ("WebCore", "replay/EventLoopInput.h")
         ),
-        (["JavaScriptCore", "WebCore"],
+        (["WebKit", "WebCore", "JavaScriptCore"],
             ("JavaScriptCore", "replay/EncodedValue.h")
         ),
         (["JavaScriptCore"],
             ("JavaScriptCore", "replay/NondeterministicInput.h")
         ),
         (["JavaScriptCore", "WebCore"],
             ("WTF", "wtf/TypeCasts.h")
         ),
-        (["WebCore"],
+        (["WebKit", "WebCore", "JavaScriptCore"],
+            ("JavaScriptCore", "replay/EncodedValue.h")
+        ),
+        (["WebKit", "WebCore"],
             ("WTF", "wtf/text/WTFString.h")
         ),
 
         # Testing fixtures.
         (["Test"],
             ("WebCore", "platform/ExternalNamespaceHeaderIncludeDummy.h")
         ),
         (["Test"],
             ("Test", "platform/InternalNamespaceHeaderIncludeDummy.h")
         )
     ],
 
     "implIncludes": [
-        (["WebCore"],
+        (["WebKit", "WebCore"],
             ("WebCore", "replay/SerializationMethods.h")
         ),
-        (["WebCore", "JavaScriptCore"],
+        (["WebKit", "WebCore", "JavaScriptCore"],
             ("JavaScriptCore", "inspector/InspectorValues.h")
         ),
-        (["WebCore", "JavaScriptCore"],
+        (["WebKit", "WebCore", "JavaScriptCore"],
             ("WTF", "wtf/NeverDestroyed.h")
         ),
+        (["WebKit"],
+            ("WebCore", "WebReplayInputs.h")
+        ),
 
         # Testing fixtures.
         (["Test"],
             ("WebCore", "platform/ExternalNamespaceImplIncludeDummy.h")
         ),
         (["Test"],
             ("Test", "platform/InternalNamespaceImplIncludeDummy.h")
         )
     ],
 }
@@ -107,41 +113,45 @@ FRAMEWORK_CONFIG_MAP = {
     "JavaScriptCore": {
         "prefix": "JS",
         "namespace": "JSC",
         "exportMacro": "JS_EXPORT_PRIVATE",
     },
     "WebCore": {
         "prefix": "Web",
         "namespace": "WebCore",
         "exportMacro": "WEBCORE_EXPORT"
     },
+    "WebKit": {
+        "prefix": "WK",
+        "namespace": "WebKit",
+    },
     # Used for bindings tests.
     "Test": {
         "prefix": "Test",
         "namespace": "Test",
         "exportMacro": "TEST_EXPORT_MACRO"
     }
 }
 
 # These settings are specific to an input queue.
 QUEUE_CONFIG_MAP = {
     "SCRIPT_MEMOIZED": {
         "enumValue": "ScriptMemoizedData",
-        "baseClass": "NondeterministicInput<%s>",
+        "baseClass": "JSC::NondeterministicInput<%s>",
     },
     "LOADER_MEMOIZED": {
         "enumValue": "LoaderMemoizedData",
-        "baseClass": "NondeterministicInput<%s>",
+        "baseClass": "JSC::NondeterministicInput<%s>",
     },
     "EVENT_LOOP": {
         "enumValue": "EventLoopInput",
-        "baseClass": "EventLoopInput<%s>",
+        "baseClass": "WebCore::EventLoopInput<%s>",
     },
 }
 
 # Use a global logger, which normally only logs errors.
 # It can be configured to log debug messages from the CLI.
 logging.basicConfig(format='%(levelname)s: %(message)s', level=logging.ERROR)
 log = logging.getLogger('global')
 
 
 # Model classes, which transliterate JSON input.
@@ -168,31 +178,35 @@ class Framework:
 
         if frameworkString == "WTF":
             return Frameworks.WTF
 
         if frameworkString == "JavaScriptCore":
             return Frameworks.JavaScriptCore
 
         if frameworkString == "WebCore":
             return Frameworks.WebCore
 
+        if frameworkString == "WebKit":
+            return Frameworks.WebKit
+
         if frameworkString == "Test":
             return Frameworks.Test
 
         raise ParseException("Unknown framework: " + frameworkString)
 
 
 class Frameworks:
     Global = Framework("Global")
     WTF = Framework("WTF")
     JavaScriptCore = Framework("JavaScriptCore")
     WebCore = Framework("WebCore")
+    WebKit = Framework("WebKit")
     Test = Framework("Test")
 
 
 class InputQueue:
     def __init__(self, settings):
         self._settings = settings
 
     def setting(self, key, default=''):
         return self._settings.get(key, default)
 
@@ -348,24 +362,24 @@ class Type:
             return self.type_name(qualified)
         elif self.mode == TypeModes.SHARED:
             return "RefPtr<%s>" % self.type_name(qualified)
         else:
             return "const %s&" % self.type_name(qualified)
 
     def argument_type(self, qualified=False):
         if self.mode == TypeModes.SHARED:
             return "RefPtr<%s>&&" % self.type_name(qualified)
         else:
-            return self.storage_type()
+            return self.storage_type(qualified)
 
     def encoding_type_argument(self, qualified=False):
-        return self.type_name(qualified=qualified)
+        return self.type_name(qualified)
 
 
 def check_for_required_properties(props, obj, what):
     for prop in props:
         if prop not in obj:
             raise ParseException("When parsing %s, required property missing: %s" % (what, prop))
 
 
 class VectorType(Type):
     def __init__(self, element_type):
@@ -633,53 +647,55 @@ class Generator:
             'inputClassImplementations': "\n\n".join([self.generate_class_implementation(_input) for _input in inputs_to_generate]),
             'inputTraitImplementations': "\n\n".join([self.generate_input_trait_implementation(_input) for _input in inputs_to_generate]),
             'enumTraitImplementations': "\n\n".join([wrap_with_guard(self.generate_enum_trait_implementation(_type), _type.guard) for _type in enums_to_generate]),
         }
 
         return Template(Templates.ImplementationSkeleton).substitute(template_arguments)
 
     def generate_license(self):
         return Template(Templates.CopyrightBlock).substitute(None, inputFilename=os.path.basename(self._input_filepath))
 
+    def generate_include_string(self, header_framework, header_path):
+        if self.target_framework is header_framework:
+            return "#include \"%s\"" % os.path.basename(header_path)
+        elif self.target_framework is Frameworks.WebKit and header_framework is not Frameworks.WTF:
+            return "#include <%s/%s>" % (header_framework.name, os.path.basename(header_path))
+        else:
+            return "#include <%s>" % header_path
+
     def generate_includes(self, defaults=[], includes_for_types=False):
         lines = set()
 
         for _type in self._model.types:
             # Types in the "global" framework are implicitly declared and available in all namespaces.
             if _type.framework is Frameworks.Global:
                 continue
             # For RefCounted types, we reverse when to include the header so that the destructor can be
             # used in the header file.
             include_for_destructor = _type.mode is TypeModes.SHARED
             # Enums within classes cannot be forward declared, so we include
             # headers with the relevant class declaration.
             include_for_enclosing_class = _type.enclosing_class is not None
             # Include headers for types like URL and String which are copied, not owned or shared.
             include_for_copyable_member = _type.mode is TypeModes.HEAVY_SCALAR
             if (not includes_for_types) ^ (include_for_destructor or include_for_enclosing_class or include_for_copyable_member):
                 continue
 
-            if self.target_framework != _type.framework:
-                lines.add("#include <%s>" % _type.header)
-            else:
-                lines.add("#include \"%s\"" % os.path.basename(_type.header))
+            lines.add(self.generate_include_string(_type.framework, _type.header))
 
         for entry in defaults:
             (allowed_framework_names, data) = entry
-            (framework_name, header_path) = data
-
             if self.target_framework.name not in allowed_framework_names:
                 continue
-            if self.target_framework.name != framework_name:
-                lines.add("#include <%s>" % header_path)
-            else:
-                lines.add("#include \"%s\"" % os.path.basename(header_path))
+
+            (framework_name, header_path) = data
+            lines.add(self.generate_include_string(Framework.fromString(framework_name), header_path))
 
         return "\n".join(sorted(list(lines)))
 
     def generate_type_forward_declarations(self):
         lines = []
 
         decls_by_framework = {}
         frameworks = [Framework.fromString(s) for s in FRAMEWORK_CONFIG_MAP.keys() if s != Frameworks.Global.name]
         for framework in frameworks:
             decls_by_framework[framework] = []
@@ -711,26 +727,26 @@ class Generator:
             lines.append("")
 
         return "\n".join(lines)
 
     def generate_class_declaration(self, _input):
         extra_declarations = []
         if _input.queue == InputQueues.EVENT_LOOP:
             extra_declarations.extend([
                 "",
                 "    // EventLoopInput API",
-                "    virtual void dispatch(Page&) override final;",
+                "    virtual void dispatch(WebCore::Page&) override final;",
             ])
 
             if _input.setting('CREATE_FROM_PAGE'):
                 extra_declarations.extend([
-                    "    static std::unique_ptr<%s> createFromPage(const Page&);" % _input.name
+                    "    static std::unique_ptr<%s> createFromPage(const WebCore::Page&);" % _input.name
                 ])
 
         member_getters = [self.generate_input_member_getter(_member) for _member in _input.members]
 
         member_declarations = [self.generate_input_member_declaration(_member) for _member in _input.members]
         if len(member_declarations) > 0:
             member_declarations.insert(0, "private:")
 
         template_arguments = {
             'inputConstructor': self.generate_input_constructor_declaration(_input),
@@ -751,25 +767,27 @@ class Generator:
         if self.setting('exportMacro'):
             terms.append(self.setting('exportMacro'))
         terms.append("%s(%s)" % (_input.name, formals_list))
         return "    %s;" % " ".join(terms)
 
     def generate_input_destructor_declaration(self, _input):
         return "    virtual ~%s();" % _input.name
 
     def generate_input_member_getter(self, _member):
         member_type = self._model.get_type_for_member(_member)
-        return "    %s %s() const { return %s; }" % (member_type.borrow_type(), _member.memberName, self.generate_member_borrow_expression(_member))
+        shouldQualifyType = self.target_framework is not member_type.framework
+        return "    %s %s() const { return %s; }" % (member_type.borrow_type(shouldQualifyType), _member.memberName, self.generate_member_borrow_expression(_member))
 
     def generate_input_member_declaration(self, _member):
         member_type = self._model.get_type_for_member(_member)
-        return "    %s m_%s;" % (member_type.storage_type(), _member.memberName)
+        shouldQualifyType = self.target_framework is not member_type.framework
+        return "    %s m_%s;" % (member_type.storage_type(shouldQualifyType), _member.memberName)
 
     def generate_input_member_tuples(self, _input):
         return [(_member, self._model.get_type_for_member(_member)) for _member in _input.members]
 
     def qualified_input_name(self, _input, forceQualified=False):
         if forceQualified or self.target_framework != self.traits_framework:
             return "%s::%s" % (self.target_framework.setting('namespace'), _input.name)
         else:
             return _input.name
 
@@ -955,22 +973,26 @@ class Generator:
 
     def generate_constructor_initializer_list(self, _input):
         initializers = []
         initializers.append("    : %s()" % (_input.setting('baseClass') % _input.name))
         for _member in _input.members:
             initializers.append("    , m_%s(%s)" % (_member.memberName, self.generate_member_move_expression(_member)))
 
         return "\n".join(initializers)
 
     def generate_constructor_formals_list(self, _input):
-        member_tuples = self.generate_input_member_tuples(_input)
-        return ", ".join(["%s %s" % (_type.argument_type(), _member.memberName) for (_member, _type) in member_tuples])
+        formals_list = []
+        for (_member, _type) in self.generate_input_member_tuples(_input):
+            shouldQualifyType = self.target_framework is not _type.framework
+            formals_list.append("%s %s" % (_type.argument_type(shouldQualifyType), _member.memberName))
+
+        return ", ".join(formals_list)
 
     def generate_member_borrow_expression(self, _member):
         _type = self._model.get_type_for_member(_member)
         expression = "m_%s" % _member.memberName
         if _type.mode == TypeModes.OWNED:
             expression = "*" + expression
 
         return expression
 
     def generate_member_move_expression(self, _member):
diff --git a/Source/JavaScriptCore/replay/scripts/tests/expected/generate-enum-encoding-helpers-with-guarded-values.json-TestReplayInputs.cpp b/Source/JavaScriptCore/replay/scripts/tests/expected/generate-enum-encoding-helpers-with-guarded-values.json-TestReplayInputs.cpp
index d5b1585..eee881e 100644
--- a/Source/JavaScriptCore/replay/scripts/tests/expected/generate-enum-encoding-helpers-with-guarded-values.json-TestReplayInputs.cpp
+++ b/Source/JavaScriptCore/replay/scripts/tests/expected/generate-enum-encoding-helpers-with-guarded-values.json-TestReplayInputs.cpp
@@ -29,22 +29,22 @@
 
 #include "config.h"
 #include "generate-enum-encoding-helpers-with-guarded-values.json-TestReplayInputs.h"
 
 #if ENABLE(WEB_REPLAY)
 #include "InternalNamespaceImplIncludeDummy.h"
 #include <platform/ExternalNamespaceImplIncludeDummy.h>
 #include <platform/PlatformMouseEvent.h>
 
 namespace Test {
-SavedMouseButton::SavedMouseButton(MouseButton button)
-    : NondeterministicInput<SavedMouseButton>()
+SavedMouseButton::SavedMouseButton(WebCore::MouseButton button)
+    : JSC::NondeterministicInput<SavedMouseButton>()
     , m_button(button)
 {
 }
 
 SavedMouseButton::~SavedMouseButton()
 {
 }
 } // namespace Test
 
 namespace JSC {
diff --git a/Source/JavaScriptCore/replay/scripts/tests/expected/generate-enum-encoding-helpers-with-guarded-values.json-TestReplayInputs.h b/Source/JavaScriptCore/replay/scripts/tests/expected/generate-enum-encoding-helpers-with-guarded-values.json-TestReplayInputs.h
index a9f0673..379142a 100644
--- a/Source/JavaScriptCore/replay/scripts/tests/expected/generate-enum-encoding-helpers-with-guarded-values.json-TestReplayInputs.h
+++ b/Source/JavaScriptCore/replay/scripts/tests/expected/generate-enum-encoding-helpers-with-guarded-values.json-TestReplayInputs.h
@@ -48,28 +48,28 @@ template<> struct TEST_EXPORT_MACRO InputTraits<Test::SavedMouseButton> {
     static InputQueue queue() { return InputQueue::ScriptMemoizedData; }
     static const String& type();
 
     static void encode(JSC::EncodedValue&, const Test::SavedMouseButton&);
     static bool decode(JSC::EncodedValue&, std::unique_ptr<Test::SavedMouseButton>&);
 };
 
 } // namespace JSC
 
 namespace Test {
-class SavedMouseButton : public NondeterministicInput<SavedMouseButton> {
+class SavedMouseButton : public JSC::NondeterministicInput<SavedMouseButton> {
 public:
-    TEST_EXPORT_MACRO SavedMouseButton(MouseButton button);
+    TEST_EXPORT_MACRO SavedMouseButton(WebCore::MouseButton button);
     virtual ~SavedMouseButton();
 
-    MouseButton button() const { return m_button; }
+    WebCore::MouseButton button() const { return m_button; }
 private:
-    MouseButton m_button;
+    WebCore::MouseButton m_button;
 };
 } // namespace Test
 
 SPECIALIZE_TYPE_TRAITS_BEGIN(Test::SavedMouseButton)
     static bool isType(const NondeterministicInputBase& input) { return input.type() == InputTraits<Test::SavedMouseButton>::type(); }
 SPECIALIZE_TYPE_TRAITS_END()
 
 #define TEST_REPLAY_INPUT_NAMES_FOR_EACH(macro) \
     macro(SavedMouseButton) \
     \
diff --git a/Source/JavaScriptCore/replay/scripts/tests/expected/generate-enum-encoding-helpers.json-TestReplayInputs.cpp b/Source/JavaScriptCore/replay/scripts/tests/expected/generate-enum-encoding-helpers.json-TestReplayInputs.cpp
index 02df572..9454256 100644
--- a/Source/JavaScriptCore/replay/scripts/tests/expected/generate-enum-encoding-helpers.json-TestReplayInputs.cpp
+++ b/Source/JavaScriptCore/replay/scripts/tests/expected/generate-enum-encoding-helpers.json-TestReplayInputs.cpp
@@ -31,21 +31,21 @@
 #include "generate-enum-encoding-helpers.json-TestReplayInputs.h"
 
 #if ENABLE(WEB_REPLAY)
 #include "InternalNamespaceImplIncludeDummy.h"
 #include "NondeterministicInput.h"
 #include "PlatformMouseEvent.h"
 #include <platform/ExternalNamespaceImplIncludeDummy.h>
 
 namespace Test {
 SavedMouseButton::SavedMouseButton(MouseButton button)
-    : NondeterministicInput<SavedMouseButton>()
+    : JSC::NondeterministicInput<SavedMouseButton>()
     , m_button(button)
 {
 }
 
 SavedMouseButton::~SavedMouseButton()
 {
 }
 } // namespace Test
 
 namespace JSC {
diff --git a/Source/JavaScriptCore/replay/scripts/tests/expected/generate-enum-encoding-helpers.json-TestReplayInputs.h b/Source/JavaScriptCore/replay/scripts/tests/expected/generate-enum-encoding-helpers.json-TestReplayInputs.h
index d38cee7..fc62c7f 100644
--- a/Source/JavaScriptCore/replay/scripts/tests/expected/generate-enum-encoding-helpers.json-TestReplayInputs.h
+++ b/Source/JavaScriptCore/replay/scripts/tests/expected/generate-enum-encoding-helpers.json-TestReplayInputs.h
@@ -69,21 +69,21 @@ template<> struct TEST_EXPORT_MACRO EncodingTraits<Test::MouseButton> {
 
 template<> struct TEST_EXPORT_MACRO EncodingTraits<Test::PlatformEvent::Type> {
     typedef Test::PlatformEvent::Type DecodedType;
 
     static EncodedValue encodeValue(const Test::PlatformEvent::Type& value);
     static bool decodeValue(EncodedValue&, Test::PlatformEvent::Type& value);
 };
 } // namespace JSC
 
 namespace Test {
-class SavedMouseButton : public NondeterministicInput<SavedMouseButton> {
+class SavedMouseButton : public JSC::NondeterministicInput<SavedMouseButton> {
 public:
     TEST_EXPORT_MACRO SavedMouseButton(MouseButton button);
     virtual ~SavedMouseButton();
 
     MouseButton button() const { return m_button; }
 private:
     MouseButton m_button;
 };
 } // namespace Test
 
diff --git a/Source/JavaScriptCore/replay/scripts/tests/expected/generate-enum-with-guard.json-TestReplayInputs.cpp b/Source/JavaScriptCore/replay/scripts/tests/expected/generate-enum-with-guard.json-TestReplayInputs.cpp
index 0aa7820..28819bc 100644
--- a/Source/JavaScriptCore/replay/scripts/tests/expected/generate-enum-with-guard.json-TestReplayInputs.cpp
+++ b/Source/JavaScriptCore/replay/scripts/tests/expected/generate-enum-with-guard.json-TestReplayInputs.cpp
@@ -30,22 +30,22 @@
 #include "config.h"
 #include "generate-enum-with-guard.json-TestReplayInputs.h"
 
 #if ENABLE(WEB_REPLAY)
 #include "InternalNamespaceImplIncludeDummy.h"
 #include "PlatformWheelEvent.h"
 #include <platform/ExternalNamespaceImplIncludeDummy.h>
 #include <platform/PlatformWheelEvent.h>
 
 namespace Test {
-HandleWheelEvent::HandleWheelEvent(std::unique_ptr<PlatformWheelEvent> platformEvent, PlatformWheelPhase phase)
-    : EventLoopInput<HandleWheelEvent>()
+HandleWheelEvent::HandleWheelEvent(std::unique_ptr<WebCore::PlatformWheelEvent> platformEvent, PlatformWheelPhase phase)
+    : WebCore::EventLoopInput<HandleWheelEvent>()
     , m_platformEvent(WTF::move(platformEvent))
     , m_phase(phase)
 {
 }
 
 HandleWheelEvent::~HandleWheelEvent()
 {
 }
 } // namespace Test
 
diff --git a/Source/JavaScriptCore/replay/scripts/tests/expected/generate-enum-with-guard.json-TestReplayInputs.h b/Source/JavaScriptCore/replay/scripts/tests/expected/generate-enum-with-guard.json-TestReplayInputs.h
index 9af0827..0bd4947 100644
--- a/Source/JavaScriptCore/replay/scripts/tests/expected/generate-enum-with-guard.json-TestReplayInputs.h
+++ b/Source/JavaScriptCore/replay/scripts/tests/expected/generate-enum-with-guard.json-TestReplayInputs.h
@@ -59,31 +59,31 @@ template<> struct TEST_EXPORT_MACRO InputTraits<Test::HandleWheelEvent> {
 template<> struct TEST_EXPORT_MACRO EncodingTraits<Test::PlatformWheelPhase> {
     typedef Test::PlatformWheelPhase DecodedType;
 
     static EncodedValue encodeValue(const Test::PlatformWheelPhase& value);
     static bool decodeValue(EncodedValue&, Test::PlatformWheelPhase& value);
 };
 #endif // ENABLE(DUMMY_FEATURE)
 } // namespace JSC
 
 namespace Test {
-class HandleWheelEvent : public EventLoopInput<HandleWheelEvent> {
+class HandleWheelEvent : public WebCore::EventLoopInput<HandleWheelEvent> {
 public:
-    TEST_EXPORT_MACRO HandleWheelEvent(std::unique_ptr<PlatformWheelEvent> platformEvent, PlatformWheelPhase phase);
+    TEST_EXPORT_MACRO HandleWheelEvent(std::unique_ptr<WebCore::PlatformWheelEvent> platformEvent, PlatformWheelPhase phase);
     virtual ~HandleWheelEvent();
 
     // EventLoopInput API
-    virtual void dispatch(Page&) override final;
-    const PlatformWheelEvent& platformEvent() const { return *m_platformEvent; }
+    virtual void dispatch(WebCore::Page&) override final;
+    const WebCore::PlatformWheelEvent& platformEvent() const { return *m_platformEvent; }
     PlatformWheelPhase phase() const { return m_phase; }
 private:
-    std::unique_ptr<PlatformWheelEvent> m_platformEvent;
+    std::unique_ptr<WebCore::PlatformWheelEvent> m_platformEvent;
     PlatformWheelPhase m_phase;
 };
 } // namespace Test
 
 SPECIALIZE_TYPE_TRAITS_BEGIN(Test::HandleWheelEvent)
     static bool isType(const NondeterministicInputBase& input) { return input.type() == InputTraits<Test::HandleWheelEvent>::type(); }
 SPECIALIZE_TYPE_TRAITS_END()
 
 #define TEST_REPLAY_INPUT_NAMES_FOR_EACH(macro) \
     macro(HandleWheelEvent) \
diff --git a/Source/JavaScriptCore/replay/scripts/tests/expected/generate-enums-with-same-base-name.json-TestReplayInputs.cpp b/Source/JavaScriptCore/replay/scripts/tests/expected/generate-enums-with-same-base-name.json-TestReplayInputs.cpp
index a19644f..f6991e0 100644
--- a/Source/JavaScriptCore/replay/scripts/tests/expected/generate-enums-with-same-base-name.json-TestReplayInputs.cpp
+++ b/Source/JavaScriptCore/replay/scripts/tests/expected/generate-enums-with-same-base-name.json-TestReplayInputs.cpp
@@ -28,22 +28,22 @@
 // by the script: JavaScriptCore/replay/scripts/CodeGeneratorReplayInputs.py
 
 #include "config.h"
 #include "generate-enums-with-same-base-name.json-TestReplayInputs.h"
 
 #if ENABLE(WEB_REPLAY)
 #include "InternalNamespaceImplIncludeDummy.h"
 #include <platform/ExternalNamespaceImplIncludeDummy.h>
 
 namespace Test {
-FormCombo::FormCombo(PlatformEvent1::Type eventType1, PlatformEvent2::Type eventType2, FormData1::Type formType1, FormData2::Type formType2)
-    : NondeterministicInput<FormCombo>()
+FormCombo::FormCombo(JSC::PlatformEvent1::Type eventType1, JSC::PlatformEvent2::Type eventType2, FormData1::Type formType1, FormData2::Type formType2)
+    : JSC::NondeterministicInput<FormCombo>()
     , m_eventType1(eventType1)
     , m_eventType2(eventType2)
     , m_formType1(formType1)
     , m_formType2(formType2)
 {
 }
 
 FormCombo::~FormCombo()
 {
 }
diff --git a/Source/JavaScriptCore/replay/scripts/tests/expected/generate-enums-with-same-base-name.json-TestReplayInputs.h b/Source/JavaScriptCore/replay/scripts/tests/expected/generate-enums-with-same-base-name.json-TestReplayInputs.h
index fd3b398..624827a 100644
--- a/Source/JavaScriptCore/replay/scripts/tests/expected/generate-enums-with-same-base-name.json-TestReplayInputs.h
+++ b/Source/JavaScriptCore/replay/scripts/tests/expected/generate-enums-with-same-base-name.json-TestReplayInputs.h
@@ -60,32 +60,32 @@ template<> struct TEST_EXPORT_MACRO EncodingTraits<Test::FormData1::Type> {
 
 template<> struct TEST_EXPORT_MACRO EncodingTraits<Test::FormData2::Type> {
     typedef Test::FormData2::Type DecodedType;
 
     static EncodedValue encodeValue(const Test::FormData2::Type& value);
     static bool decodeValue(EncodedValue&, Test::FormData2::Type& value);
 };
 } // namespace JSC
 
 namespace Test {
-class FormCombo : public NondeterministicInput<FormCombo> {
+class FormCombo : public JSC::NondeterministicInput<FormCombo> {
 public:
-    TEST_EXPORT_MACRO FormCombo(PlatformEvent1::Type eventType1, PlatformEvent2::Type eventType2, FormData1::Type formType1, FormData2::Type formType2);
+    TEST_EXPORT_MACRO FormCombo(JSC::PlatformEvent1::Type eventType1, JSC::PlatformEvent2::Type eventType2, FormData1::Type formType1, FormData2::Type formType2);
     virtual ~FormCombo();
 
-    PlatformEvent1::Type eventType1() const { return m_eventType1; }
-    PlatformEvent2::Type eventType2() const { return m_eventType2; }
+    JSC::PlatformEvent1::Type eventType1() const { return m_eventType1; }
+    JSC::PlatformEvent2::Type eventType2() const { return m_eventType2; }
     FormData1::Type formType1() const { return m_formType1; }
     FormData2::Type formType2() const { return m_formType2; }
 private:
-    PlatformEvent1::Type m_eventType1;
-    PlatformEvent2::Type m_eventType2;
+    JSC::PlatformEvent1::Type m_eventType1;
+    JSC::PlatformEvent2::Type m_eventType2;
     FormData1::Type m_formType1;
     FormData2::Type m_formType2;
 };
 } // namespace Test
 
 SPECIALIZE_TYPE_TRAITS_BEGIN(Test::FormCombo)
     static bool isType(const NondeterministicInputBase& input) { return input.type() == InputTraits<Test::FormCombo>::type(); }
 SPECIALIZE_TYPE_TRAITS_END()
 
 #define TEST_REPLAY_INPUT_NAMES_FOR_EACH(macro) \
diff --git a/Source/JavaScriptCore/replay/scripts/tests/expected/generate-input-with-guard.json-TestReplayInputs.cpp b/Source/JavaScriptCore/replay/scripts/tests/expected/generate-input-with-guard.json-TestReplayInputs.cpp
index 9cbb7af..9b80ceb 100644
--- a/Source/JavaScriptCore/replay/scripts/tests/expected/generate-input-with-guard.json-TestReplayInputs.cpp
+++ b/Source/JavaScriptCore/replay/scripts/tests/expected/generate-input-with-guard.json-TestReplayInputs.cpp
@@ -30,32 +30,32 @@
 #include "config.h"
 #include "generate-input-with-guard.json-TestReplayInputs.h"
 
 #if ENABLE(WEB_REPLAY)
 #include "InternalNamespaceImplIncludeDummy.h"
 #include <platform/ExternalNamespaceImplIncludeDummy.h>
 
 namespace Test {
 #if ENABLE(DUMMY_FEATURE)
 GetCurrentTime::GetCurrentTime(double currentTime)
-    : NondeterministicInput<GetCurrentTime>()
+    : JSC::NondeterministicInput<GetCurrentTime>()
     , m_currentTime(currentTime)
 {
 }
 
 GetCurrentTime::~GetCurrentTime()
 {
 }
 #endif // ENABLE(DUMMY_FEATURE)
 
 SetRandomSeed::SetRandomSeed(uint64_t randomSeed)
-    : NondeterministicInput<SetRandomSeed>()
+    : JSC::NondeterministicInput<SetRandomSeed>()
     , m_randomSeed(randomSeed)
 {
 }
 
 SetRandomSeed::~SetRandomSeed()
 {
 }
 } // namespace Test
 
 namespace JSC {
diff --git a/Source/JavaScriptCore/replay/scripts/tests/expected/generate-input-with-guard.json-TestReplayInputs.h b/Source/JavaScriptCore/replay/scripts/tests/expected/generate-input-with-guard.json-TestReplayInputs.h
index e0967cc..a1e6a44 100644
--- a/Source/JavaScriptCore/replay/scripts/tests/expected/generate-input-with-guard.json-TestReplayInputs.h
+++ b/Source/JavaScriptCore/replay/scripts/tests/expected/generate-input-with-guard.json-TestReplayInputs.h
@@ -59,32 +59,32 @@ template<> struct TEST_EXPORT_MACRO InputTraits<Test::SetRandomSeed> {
     static const String& type();
 
     static void encode(JSC::EncodedValue&, const Test::SetRandomSeed&);
     static bool decode(JSC::EncodedValue&, std::unique_ptr<Test::SetRandomSeed>&);
 };
 
 } // namespace JSC
 
 namespace Test {
 #if ENABLE(DUMMY_FEATURE)
-class GetCurrentTime : public NondeterministicInput<GetCurrentTime> {
+class GetCurrentTime : public JSC::NondeterministicInput<GetCurrentTime> {
 public:
     TEST_EXPORT_MACRO GetCurrentTime(double currentTime);
     virtual ~GetCurrentTime();
 
     double currentTime() const { return m_currentTime; }
 private:
     double m_currentTime;
 };
 #endif // ENABLE(DUMMY_FEATURE)
 
-class SetRandomSeed : public NondeterministicInput<SetRandomSeed> {
+class SetRandomSeed : public JSC::NondeterministicInput<SetRandomSeed> {
 public:
     TEST_EXPORT_MACRO SetRandomSeed(uint64_t randomSeed);
     virtual ~SetRandomSeed();
 
     uint64_t randomSeed() const { return m_randomSeed; }
 private:
     uint64_t m_randomSeed;
 };
 } // namespace Test
 
diff --git a/Source/JavaScriptCore/replay/scripts/tests/expected/generate-input-with-vector-members.json-TestReplayInputs.cpp b/Source/JavaScriptCore/replay/scripts/tests/expected/generate-input-with-vector-members.json-TestReplayInputs.cpp
index f2f962a..91d18f4 100644
--- a/Source/JavaScriptCore/replay/scripts/tests/expected/generate-input-with-vector-members.json-TestReplayInputs.cpp
+++ b/Source/JavaScriptCore/replay/scripts/tests/expected/generate-input-with-vector-members.json-TestReplayInputs.cpp
@@ -30,34 +30,34 @@
 #include "config.h"
 #include "generate-input-with-vector-members.json-TestReplayInputs.h"
 
 #if ENABLE(WEB_REPLAY)
 #include "InternalNamespaceImplIncludeDummy.h"
 #include <platform/ExternalNamespaceImplIncludeDummy.h>
 #include <things/JSThing.h>
 #include <things/WebThing.h>
 
 namespace Test {
-ArrayOfThings::ArrayOfThings(Vector<double>& doubles, Vector<JSThing>& jsthings, Vector<WebThing>& webthings)
-    : NondeterministicInput<ArrayOfThings>()
+ArrayOfThings::ArrayOfThings(Vector<double>& doubles, Vector<JSC::JSThing>& jsthings, Vector<WebCore::WebThing>& webthings)
+    : JSC::NondeterministicInput<ArrayOfThings>()
     , m_doubles(doubles)
     , m_jsthings(jsthings)
     , m_webthings(webthings)
 {
 }
 
 ArrayOfThings::~ArrayOfThings()
 {
 }
 
-SavedHistory::SavedHistory(Vector<RefPtr<HistoryItem>>& entries)
-    : NondeterministicInput<SavedHistory>()
+SavedHistory::SavedHistory(Vector<RefPtr<WebCore::HistoryItem>>& entries)
+    : JSC::NondeterministicInput<SavedHistory>()
     , m_entries(entries)
 {
 }
 
 SavedHistory::~SavedHistory()
 {
 }
 } // namespace Test
 
 namespace JSC {
diff --git a/Source/JavaScriptCore/replay/scripts/tests/expected/generate-input-with-vector-members.json-TestReplayInputs.h b/Source/JavaScriptCore/replay/scripts/tests/expected/generate-input-with-vector-members.json-TestReplayInputs.h
index 467c010..901e15f 100644
--- a/Source/JavaScriptCore/replay/scripts/tests/expected/generate-input-with-vector-members.json-TestReplayInputs.h
+++ b/Source/JavaScriptCore/replay/scripts/tests/expected/generate-input-with-vector-members.json-TestReplayInputs.h
@@ -58,42 +58,42 @@ template<> struct TEST_EXPORT_MACRO InputTraits<Test::SavedHistory> {
     static InputQueue queue() { return InputQueue::ScriptMemoizedData; }
     static const String& type();
 
     static void encode(JSC::EncodedValue&, const Test::SavedHistory&);
     static bool decode(JSC::EncodedValue&, std::unique_ptr<Test::SavedHistory>&);
 };
 
 } // namespace JSC
 
 namespace Test {
-class ArrayOfThings : public NondeterministicInput<ArrayOfThings> {
+class ArrayOfThings : public JSC::NondeterministicInput<ArrayOfThings> {
 public:
-    TEST_EXPORT_MACRO ArrayOfThings(Vector<double>& doubles, Vector<JSThing>& jsthings, Vector<WebThing>& webthings);
+    TEST_EXPORT_MACRO ArrayOfThings(Vector<double>& doubles, Vector<JSC::JSThing>& jsthings, Vector<WebCore::WebThing>& webthings);
     virtual ~ArrayOfThings();
 
     const Vector<double>& doubles() const { return m_doubles; }
-    const Vector<JSThing>& jsthings() const { return m_jsthings; }
-    const Vector<WebThing>& webthings() const { return m_webthings; }
+    const Vector<JSC::JSThing>& jsthings() const { return m_jsthings; }
+    const Vector<WebCore::WebThing>& webthings() const { return m_webthings; }
 private:
     Vector<double> m_doubles;
-    Vector<JSThing> m_jsthings;
-    Vector<WebThing> m_webthings;
+    Vector<JSC::JSThing> m_jsthings;
+    Vector<WebCore::WebThing> m_webthings;
 };
 
-class SavedHistory : public NondeterministicInput<SavedHistory> {
+class SavedHistory : public JSC::NondeterministicInput<SavedHistory> {
 public:
-    TEST_EXPORT_MACRO SavedHistory(Vector<RefPtr<HistoryItem>>& entries);
+    TEST_EXPORT_MACRO SavedHistory(Vector<RefPtr<WebCore::HistoryItem>>& entries);
     virtual ~SavedHistory();
 
-    const Vector<RefPtr<HistoryItem>>& entries() const { return m_entries; }
+    const Vector<RefPtr<WebCore::HistoryItem>>& entries() const { return m_entries; }
 private:
-    Vector<RefPtr<HistoryItem>> m_entries;
+    Vector<RefPtr<WebCore::HistoryItem>> m_entries;
 };
 } // namespace Test
 
 SPECIALIZE_TYPE_TRAITS_BEGIN(Test::ArrayOfThings)
     static bool isType(const NondeterministicInputBase& input) { return input.type() == InputTraits<Test::ArrayOfThings>::type(); }
 SPECIALIZE_TYPE_TRAITS_END()
 
 SPECIALIZE_TYPE_TRAITS_BEGIN(Test::SavedHistory)
     static bool isType(const NondeterministicInputBase& input) { return input.type() == InputTraits<Test::SavedHistory>::type(); }
 SPECIALIZE_TYPE_TRAITS_END()
diff --git a/Source/JavaScriptCore/replay/scripts/tests/expected/generate-inputs-with-flags.json-TestReplayInputs.cpp b/Source/JavaScriptCore/replay/scripts/tests/expected/generate-inputs-with-flags.json-TestReplayInputs.cpp
index 821f4d0..6b901d6 100644
--- a/Source/JavaScriptCore/replay/scripts/tests/expected/generate-inputs-with-flags.json-TestReplayInputs.cpp
+++ b/Source/JavaScriptCore/replay/scripts/tests/expected/generate-inputs-with-flags.json-TestReplayInputs.cpp
@@ -29,31 +29,31 @@
 
 #include "config.h"
 #include "generate-inputs-with-flags.json-TestReplayInputs.h"
 
 #if ENABLE(WEB_REPLAY)
 #include "InternalNamespaceImplIncludeDummy.h"
 #include <platform/ExternalNamespaceImplIncludeDummy.h>
 
 namespace Test {
 ScalarInput1::ScalarInput1(ScalarType data)
-    : NondeterministicInput<ScalarInput1>()
+    : JSC::NondeterministicInput<ScalarInput1>()
     , m_data(data)
 {
 }
 
 ScalarInput1::~ScalarInput1()
 {
 }
 
 ScalarInput2::ScalarInput2(ScalarType data)
-    : NondeterministicInput<ScalarInput2>()
+    : JSC::NondeterministicInput<ScalarInput2>()
     , m_data(data)
 {
 }
 
 ScalarInput2::~ScalarInput2()
 {
 }
 } // namespace Test
 
 namespace JSC {
diff --git a/Source/JavaScriptCore/replay/scripts/tests/expected/generate-inputs-with-flags.json-TestReplayInputs.h b/Source/JavaScriptCore/replay/scripts/tests/expected/generate-inputs-with-flags.json-TestReplayInputs.h
index 7b98bfc..cb9e538 100644
--- a/Source/JavaScriptCore/replay/scripts/tests/expected/generate-inputs-with-flags.json-TestReplayInputs.h
+++ b/Source/JavaScriptCore/replay/scripts/tests/expected/generate-inputs-with-flags.json-TestReplayInputs.h
@@ -54,31 +54,31 @@ template<> struct TEST_EXPORT_MACRO InputTraits<Test::ScalarInput2> {
     static InputQueue queue() { return InputQueue::ScriptMemoizedData; }
     static const String& type();
 
     static void encode(JSC::EncodedValue&, const Test::ScalarInput2&);
     static bool decode(JSC::EncodedValue&, std::unique_ptr<Test::ScalarInput2>&);
 };
 
 } // namespace JSC
 
 namespace Test {
-class ScalarInput1 : public NondeterministicInput<ScalarInput1> {
+class ScalarInput1 : public JSC::NondeterministicInput<ScalarInput1> {
 public:
     TEST_EXPORT_MACRO ScalarInput1(ScalarType data);
     virtual ~ScalarInput1();
 
     ScalarType data() const { return m_data; }
 private:
     ScalarType m_data;
 };
 
-class ScalarInput2 : public NondeterministicInput<ScalarInput2> {
+class ScalarInput2 : public JSC::NondeterministicInput<ScalarInput2> {
 public:
     TEST_EXPORT_MACRO ScalarInput2(ScalarType data);
     virtual ~ScalarInput2();
 
     ScalarType data() const { return m_data; }
 private:
     ScalarType m_data;
 };
 } // namespace Test
 
diff --git a/Source/JavaScriptCore/replay/scripts/tests/expected/generate-memoized-type-modes.json-TestReplayInputs.cpp b/Source/JavaScriptCore/replay/scripts/tests/expected/generate-memoized-type-modes.json-TestReplayInputs.cpp
index 0be9206..dd4b7de 100644
--- a/Source/JavaScriptCore/replay/scripts/tests/expected/generate-memoized-type-modes.json-TestReplayInputs.cpp
+++ b/Source/JavaScriptCore/replay/scripts/tests/expected/generate-memoized-type-modes.json-TestReplayInputs.cpp
@@ -29,31 +29,31 @@
 
 #include "config.h"
 #include "generate-memoized-type-modes.json-TestReplayInputs.h"
 
 #if ENABLE(WEB_REPLAY)
 #include "InternalNamespaceImplIncludeDummy.h"
 #include <platform/ExternalNamespaceImplIncludeDummy.h>
 
 namespace Test {
 ScalarInput::ScalarInput(ScalarType data)
-    : NondeterministicInput<ScalarInput>()
+    : JSC::NondeterministicInput<ScalarInput>()
     , m_data(data)
 {
 }
 
 ScalarInput::~ScalarInput()
 {
 }
 
 MapInput::MapInput(std::unique_ptr<MapType> data)
-    : NondeterministicInput<MapInput>()
+    : JSC::NondeterministicInput<MapInput>()
     , m_data(WTF::move(data))
 {
 }
 
 MapInput::~MapInput()
 {
 }
 } // namespace Test
 
 namespace JSC {
diff --git a/Source/JavaScriptCore/replay/scripts/tests/expected/generate-memoized-type-modes.json-TestReplayInputs.h b/Source/JavaScriptCore/replay/scripts/tests/expected/generate-memoized-type-modes.json-TestReplayInputs.h
index d77bcff..648ab91 100644
--- a/Source/JavaScriptCore/replay/scripts/tests/expected/generate-memoized-type-modes.json-TestReplayInputs.h
+++ b/Source/JavaScriptCore/replay/scripts/tests/expected/generate-memoized-type-modes.json-TestReplayInputs.h
@@ -54,31 +54,31 @@ template<> struct TEST_EXPORT_MACRO InputTraits<Test::MapInput> {
     static InputQueue queue() { return InputQueue::ScriptMemoizedData; }
     static const String& type();
 
     static void encode(JSC::EncodedValue&, const Test::MapInput&);
     static bool decode(JSC::EncodedValue&, std::unique_ptr<Test::MapInput>&);
 };
 
 } // namespace JSC
 
 namespace Test {
-class ScalarInput : public NondeterministicInput<ScalarInput> {
+class ScalarInput : public JSC::NondeterministicInput<ScalarInput> {
 public:
     TEST_EXPORT_MACRO ScalarInput(ScalarType data);
     virtual ~ScalarInput();
 
     ScalarType data() const { return m_data; }
 private:
     ScalarType m_data;
 };
 
-class MapInput : public NondeterministicInput<MapInput> {
+class MapInput : public JSC::NondeterministicInput<MapInput> {
 public:
     TEST_EXPORT_MACRO MapInput(std::unique_ptr<MapType> data);
     virtual ~MapInput();
 
     const MapType& data() const { return *m_data; }
 private:
     std::unique_ptr<MapType> m_data;
 };
 } // namespace Test
 
diff --git a/Source/WebCore/ChangeLog b/Source/WebCore/ChangeLog
index 3d79874..11ebc1a 100644
--- a/Source/WebCore/ChangeLog
+++ b/Source/WebCore/ChangeLog
@@ -1,12 +1,23 @@
 2015-01-09  Brian J. Burg  <burg@cs.washington.edu>
 
+        Web Replay: support generating replay inputs for WebKit framework
+        https://bugs.webkit.org/show_bug.cgi?id=140446
+
+        Reviewed by NOBODY (OOPS!).
+
+        No new tests, no behavior changed.
+
+        * WebCore.xcodeproj/project.pbxproj: Make SerializationMethods.h a private header.
+
+2015-01-09  Brian J. Burg  <burg@cs.washington.edu>
+
         Web Replay: create a ReplayClient for Page and dispatch inputs through it
         https://bugs.webkit.org/show_bug.cgi?id=140445
 
         Reviewed by NOBODY (OOPS!).
 
         Right now all dispatchable inputs are dispatched from WebCore using Page&, but
         we want to be able to dispatch some WK2-only inputs from WebKit2 using WebPage&.
         As a first step, this patch creates a ReplayClient interface that delegates
         dispatching inputs to a WebPage's WebReplayClient.
 
diff --git a/Source/WebCore/WebCore.xcodeproj/project.pbxproj b/Source/WebCore/WebCore.xcodeproj/project.pbxproj
index fd49bd6..9905464 100644
--- a/Source/WebCore/WebCore.xcodeproj/project.pbxproj
+++ b/Source/WebCore/WebCore.xcodeproj/project.pbxproj
@@ -3687,21 +3687,21 @@
 		99CC0B5618BE984A006CEBCC /* ReplayingInputCursor.h in Headers */ = {isa = PBXBuildFile; fileRef = 99CC0B4118BE9849006CEBCC /* ReplayingInputCursor.h */; };
 		99CC0B5718BE984A006CEBCC /* ReplayInputCreationMethods.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 99CC0B4218BE9849006CEBCC /* ReplayInputCreationMethods.cpp */; };
 		99CC0B5818BE984A006CEBCC /* ReplayInputDispatchMethods.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 99CC0B4318BE9849006CEBCC /* ReplayInputDispatchMethods.cpp */; };
 		99CC0B5918BE984A006CEBCC /* ReplaySession.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 99CC0B4418BE9849006CEBCC /* ReplaySession.cpp */; };
 		99CC0B5A18BE984A006CEBCC /* ReplaySession.h in Headers */ = {isa = PBXBuildFile; fileRef = 99CC0B4518BE9849006CEBCC /* ReplaySession.h */; };
 		99CC0B5B18BE984A006CEBCC /* ReplaySessionSegment.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 99CC0B4618BE9849006CEBCC /* ReplaySessionSegment.cpp */; };
 		99CC0B5C18BE984A006CEBCC /* ReplaySessionSegment.h in Headers */ = {isa = PBXBuildFile; fileRef = 99CC0B4718BE9849006CEBCC /* ReplaySessionSegment.h */; };
 		99CC0B5D18BE984A006CEBCC /* SegmentedInputStorage.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 99CC0B4818BE9849006CEBCC /* SegmentedInputStorage.cpp */; };
 		99CC0B5E18BE984A006CEBCC /* SegmentedInputStorage.h in Headers */ = {isa = PBXBuildFile; fileRef = 99CC0B4918BE9849006CEBCC /* SegmentedInputStorage.h */; };
 		99CC0B5F18BE984A006CEBCC /* SerializationMethods.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 99CC0B4A18BE9849006CEBCC /* SerializationMethods.cpp */; };
-		99CC0B6018BE984A006CEBCC /* SerializationMethods.h in Headers */ = {isa = PBXBuildFile; fileRef = 99CC0B4B18BE9849006CEBCC /* SerializationMethods.h */; };
+		99CC0B6018BE984A006CEBCC /* SerializationMethods.h in Headers */ = {isa = PBXBuildFile; fileRef = 99CC0B4B18BE9849006CEBCC /* SerializationMethods.h */; settings = {ATTRIBUTES = (Private, ); }; };
 		99CC0B6618BE9F15006CEBCC /* InspectorReplayAgent.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 99CC0B6418BE9F15006CEBCC /* InspectorReplayAgent.cpp */; };
 		99CC0B6718BE9F15006CEBCC /* InspectorReplayAgent.h in Headers */ = {isa = PBXBuildFile; fileRef = 99CC0B6518BE9F15006CEBCC /* InspectorReplayAgent.h */; };
 		99CC0B6A18BEA1FF006CEBCC /* WebReplayInputs.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 99CC0B6818BEA1FF006CEBCC /* WebReplayInputs.cpp */; };
 		99CC0B6B18BEA1FF006CEBCC /* WebReplayInputs.h in Headers */ = {isa = PBXBuildFile; fileRef = 99CC0B6918BEA1FF006CEBCC /* WebReplayInputs.h */; };
 		99E45A1718A063BE0026D88F /* EventLoopInput.h in Headers */ = {isa = PBXBuildFile; fileRef = 99E45A1618A063BE0026D88F /* EventLoopInput.h */; settings = {ATTRIBUTES = (Private, ); }; };
 		9A1142041832D135000BB8AD /* ValueToString.h in Headers */ = {isa = PBXBuildFile; fileRef = 9A1142031832D134000BB8AD /* ValueToString.h */; settings = {ATTRIBUTES = (Private, ); }; };
 		9A1B6F97158869C80011A8C4 /* JSDOMStringListCustom.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 9A1B6F96158869C80011A8C4 /* JSDOMStringListCustom.cpp */; };
 		9A528E8317D7F52F00AA9518 /* FloatingObjects.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 9A528E8117D7F52F00AA9518 /* FloatingObjects.cpp */; };
 		9A528E8417D7F52F00AA9518 /* FloatingObjects.h in Headers */ = {isa = PBXBuildFile; fileRef = 9A528E8217D7F52F00AA9518 /* FloatingObjects.h */; settings = {ATTRIBUTES = (Private, ); }; };
 		9AB1F38018E2489A00534743 /* CSSToLengthConversionData.h in Headers */ = {isa = PBXBuildFile; fileRef = 9AB1F37E18E2489A00534743 /* CSSToLengthConversionData.h */; };
@@ -5557,20 +5557,21 @@
 		C37CDEBD149EF2030042090D /* ColorChooserClient.h in Headers */ = {isa = PBXBuildFile; fileRef = C37CDEBC149EF2030042090D /* ColorChooserClient.h */; settings = {ATTRIBUTES = (Private, ); }; };
 		C3CF17A415B0063F00276D39 /* IdTargetObserver.cpp in Sources */ = {isa = PBXBuildFile; fileRef = C3CF17A015B0063F00276D39 /* IdTargetObserver.cpp */; };
 		C3CF17A515B0063F00276D39 /* IdTargetObserver.h in Headers */ = {isa = PBXBuildFile; fileRef = C3CF17A115B0063F00276D39 /* IdTargetObserver.h */; settings = {ATTRIBUTES = (Private, ); }; };
 		C3CF17A615B0063F00276D39 /* IdTargetObserverRegistry.cpp in Sources */ = {isa = PBXBuildFile; fileRef = C3CF17A215B0063F00276D39 /* IdTargetObserverRegistry.cpp */; };
 		C3CF17A715B0063F00276D39 /* IdTargetObserverRegistry.h in Headers */ = {isa = PBXBuildFile; fileRef = C3CF17A315B0063F00276D39 /* IdTargetObserverRegistry.h */; settings = {ATTRIBUTES = (Private, ); }; };
 		C400D10918F1C8F60090D863 /* EventLoopInput.cpp in Sources */ = {isa = PBXBuildFile; fileRef = C400D10818F1C8F60090D863 /* EventLoopInput.cpp */; };
 		C49474A119A2847C009B3DE8 /* SharedEventSenders.h in Headers */ = {isa = PBXBuildFile; fileRef = C49474A019A2847C009B3DE8 /* SharedEventSenders.h */; };
 		C49474A819A2D612009B3DE8 /* EventSender.h in Headers */ = {isa = PBXBuildFile; fileRef = CE5CB1B314EDAB6F00BB2795 /* EventSender.h */; };
 		C49474AA19A2E2E5009B3DE8 /* SharedEventSenders.cpp in Sources */ = {isa = PBXBuildFile; fileRef = C49474A919A2E2E5009B3DE8 /* SharedEventSenders.cpp */; };
 		C49474AC19A3F7A2009B3DE8 /* ReplayClient.h in Headers */ = {isa = PBXBuildFile; fileRef = C49474AB19A3F7A2009B3DE8 /* ReplayClient.h */; settings = {ATTRIBUTES = (Private, ); }; };
+		C49E39F71A70334100429A46 /* WebInputs.json in Headers */ = {isa = PBXBuildFile; fileRef = 99CC0B4C18BE9849006CEBCC /* WebInputs.json */; settings = {ATTRIBUTES = (Private, ); }; };
 		C4CD629A18383766007EBAF1 /* FrameSnapshotting.cpp in Sources */ = {isa = PBXBuildFile; fileRef = C4CD629818383766007EBAF1 /* FrameSnapshotting.cpp */; };
 		C4CD629B18383766007EBAF1 /* FrameSnapshotting.h in Headers */ = {isa = PBXBuildFile; fileRef = C4CD629918383766007EBAF1 /* FrameSnapshotting.h */; settings = {ATTRIBUTES = (Private, ); }; };
 		C4D4F52B1975C88B003EF5BC /* ReplayableTimer.cpp in Sources */ = {isa = PBXBuildFile; fileRef = C4D4F5271975C88B003EF5BC /* ReplayableTimer.cpp */; };
 		C4D4F52C1975C88B003EF5BC /* ReplayableTimer.h in Headers */ = {isa = PBXBuildFile; fileRef = C4D4F5281975C88B003EF5BC /* ReplayableTimer.h */; settings = {ATTRIBUTES = (Private, ); }; };
 		C4D4F52D1975C88B003EF5BC /* ReplayableTimers.cpp in Sources */ = {isa = PBXBuildFile; fileRef = C4D4F5291975C88B003EF5BC /* ReplayableTimers.cpp */; };
 		C4D4F52E1975C88B003EF5BC /* ReplayableTimers.h in Headers */ = {isa = PBXBuildFile; fileRef = C4D4F52A1975C88B003EF5BC /* ReplayableTimers.h */; settings = {ATTRIBUTES = (Private, ); }; };
 		C50D0E830FF4272900AC2644 /* StorageNamespace.h in Headers */ = {isa = PBXBuildFile; fileRef = C50D0E810FF4272900AC2644 /* StorageNamespace.h */; settings = {ATTRIBUTES = (Private, ); }; };
 		C5137CF211A58378004ADB99 /* JSDOMStringList.cpp in Sources */ = {isa = PBXBuildFile; fileRef = C5137CF011A58378004ADB99 /* JSDOMStringList.cpp */; };
 		C5137CF311A58378004ADB99 /* JSDOMStringList.h in Headers */ = {isa = PBXBuildFile; fileRef = C5137CF111A58378004ADB99 /* JSDOMStringList.h */; };
 		C5278B0C17F212EA003A2998 /* PlatformPasteboardIOS.mm in Sources */ = {isa = PBXBuildFile; fileRef = C5278B0B17F212EA003A2998 /* PlatformPasteboardIOS.mm */; };
@@ -23450,20 +23451,21 @@
 				2D97F04819DD4140001EE9C3 /* MockPageOverlayClient.h in Headers */,
 				AA5F3B8D16CC33D100455EB0 /* PlatformSpeechSynthesizerMock.h in Headers */,
 				41815C1F138319830057AAA4 /* WebCoreTestSupport.h in Headers */,
 			);
 			runOnlyForDeploymentPostprocessing = 0;
 		};
 		93F198A608245E59001E9ABC /* Headers */ = {
 			isa = PBXHeadersBuildPhase;
 			buildActionMask = 2147483647;
 			files = (
+				C49E39F71A70334100429A46 /* WebInputs.json in Headers */,
 				FE115FAB167988CD00249134 /* AbstractDatabaseServer.h in Headers */,
 				41E1B1D10FF5986900576B3B /* AbstractWorker.h in Headers */,
 				29A8122E0FBB9C1D00510293 /* AccessibilityARIAGridCell.h in Headers */,
 				29A812330FBB9C1D00510293 /* AccessibilityARIAGridRow.h in Headers */,
 				29A8123B0FBB9C1D00510293 /* AccessibilityImageMapLink.h in Headers */,
 				29A8122C0FBB9C1D00510293 /* AccessibilityList.h in Headers */,
 				29A812430FBB9C1D00510293 /* AccessibilityListBox.h in Headers */,
 				29A812420FBB9C1D00510293 /* AccessibilityListBoxOption.h in Headers */,
 				07B0113F1032242200FBDC33 /* AccessibilityMediaControls.h in Headers */,
 				76CDD2F31103DA6600680521 /* AccessibilityMenuList.h in Headers */,
diff --git a/Source/WebKit2/CMakeLists.txt b/Source/WebKit2/CMakeLists.txt
index d5399b1..3201760 100644
--- a/Source/WebKit2/CMakeLists.txt
+++ b/Source/WebKit2/CMakeLists.txt
@@ -56,20 +56,21 @@ set(WebKit2_INCLUDE_DIRECTORIES
     "${WEBKIT2_DIR}/WebProcess/InjectedBundle/API/c"
     "${WEBKIT2_DIR}/WebProcess/InjectedBundle/DOM"
     "${WEBKIT2_DIR}/WebProcess/Launching"
     "${WEBKIT2_DIR}/WebProcess/MediaCache"
     "${WEBKIT2_DIR}/WebProcess/MediaStream"
     "${WEBKIT2_DIR}/WebProcess/Network"
     "${WEBKIT2_DIR}/WebProcess/Notifications"
     "${WEBKIT2_DIR}/WebProcess/OriginData"
     "${WEBKIT2_DIR}/WebProcess/Plugins"
     "${WEBKIT2_DIR}/WebProcess/Plugins/Netscape"
+    "${WEBKIT2_DIR}/WebProcess/Replay"
     "${WEBKIT2_DIR}/WebProcess/ResourceCache"
     "${WEBKIT2_DIR}/WebProcess/Storage"
     "${WEBKIT2_DIR}/WebProcess/UserContent"
     "${WEBKIT2_DIR}/WebProcess/WebCoreSupport"
     "${WEBKIT2_DIR}/WebProcess/WebPage"
     "${WEBCORE_DIR}"
     "${WEBCORE_DIR}/Modules/battery"
     "${WEBCORE_DIR}/Modules/mediastream"
     "${WEBCORE_DIR}/Modules/networkinfo"
     "${WEBCORE_DIR}/Modules/notifications"
@@ -821,20 +822,32 @@ if (ENABLE_DATABASE_PROCESS)
     if (WebKit2_DatabaseProcess_OUTPUT_NAME)
         set_target_properties(DatabaseProcess PROPERTIES OUTPUT_NAME ${WebKit2_DatabaseProcess_OUTPUT_NAME})
     endif ()
 endif ()
 
 if (ENABLE_WEB_REPLAY)
     list(APPEND WebKit2_INCLUDE_DIRECTORIES
         "${WEBKIT2_DIR}/WebProcess/Replay"
     )
 
+<<<<<<< HEAD
     list(APPEND WebKit2_SOURCES
         WebProcess/Replay/WebReplayClient.cpp
+=======
+    set(WebKit2_WEB_REPLAY_INPUTS ${WEBKIT2_DIR}/WebProcess/Replay/WebInputs.json)
+    add_custom_command(
+        OUTPUT ${DERIVED_SOURCES_WEBKIT2_DIR}/WKReplayInputs.h ${DERIVED_SOURCES_WEBKIT2_DIR}/WKReplayInputs.cpp
+        MAIN_DEPENDENCY ${JAVASCRIPTCORE_DIR}/replay/scripts/CodeGeneratorReplayInputs.py
+        DEPENDS ${WebKit2_WEB_REPLAY_INPUTS}
+        COMMAND ${PYTHON_EXECUTABLE} ${JAVASCRIPTCORE_DIR}/replay/scripts/CodeGeneratorReplayInputs.py --outputDir ${DERIVED_SOURCES_WEBKIT2_DIR}/ --framework WebKit ${WebKit2_WEB_REPLAY_INPUTS}
+        VERBATIM)
+
+    list(APPEND WebKit2_SOURCES
+        ${DERIVED_SOURCES_WEBKIT2_DIR}/WKReplayInputs.cpp
     )
 endif ()
 
 POPULATE_LIBRARY_VERSION(WEBKIT2)
 set_target_properties(WebKit2 PROPERTIES VERSION ${WEBKIT2_VERSION} SOVERSION ${WEBKIT2_VERSION_MAJOR})
 
 install(TARGETS WebKit2 DESTINATION "${LIB_INSTALL_DIR}")
 install(TARGETS WebProcess DESTINATION "${LIBEXEC_INSTALL_DIR}")
diff --git a/Source/WebKit2/ChangeLog b/Source/WebKit2/ChangeLog
index f1e07b3..23cb0b4 100644
--- a/Source/WebKit2/ChangeLog
+++ b/Source/WebKit2/ChangeLog
@@ -1,12 +1,28 @@
 2015-01-09  Brian J. Burg  <burg@cs.washington.edu>
 
+        Web Replay: support generating replay inputs for WebKit framework
+        https://bugs.webkit.org/show_bug.cgi?id=140446
+
+        Reviewed by NOBODY (OOPS!).
+
+        Generate WebKit2-specific replay inputs from WKInputs.json with the code generator.
+
+        * CMakeLists.txt:
+        * Configurations/BaseTarget.xcconfig: Add path for JavaScriptCore private headers
+        so that we can use the inputs code generator.
+        * DerivedSources.make: Generate WebKit2 inputs from WKInputs.json.
+        * WebKit2.xcodeproj/project.pbxproj:
+        * WebProcess/Replay/WKInputs.json: Added.
+
+2015-01-09  Brian J. Burg  <burg@cs.washington.edu>
+
         Web Replay: create a ReplayClient for Page and dispatch inputs through it
         https://bugs.webkit.org/show_bug.cgi?id=140445
 
         Reviewed by NOBODY (OOPS!).
 
         Add a WebReplayClient implementation and provide it to WebPage. For now, it
         dispatches all inputs the same way as before (with WebCore context).
 
         * CMakeLists.txt:
         * WebKit2.xcodeproj/project.pbxproj:
diff --git a/Source/WebKit2/Configurations/BaseTarget.xcconfig b/Source/WebKit2/Configurations/BaseTarget.xcconfig
index 2a3c40b..34ae278 100644
--- a/Source/WebKit2/Configurations/BaseTarget.xcconfig
+++ b/Source/WebKit2/Configurations/BaseTarget.xcconfig
@@ -46,15 +46,16 @@ WEBKIT_FRAMEWORKS_DIR_macosx_USE_STAGING_INSTALL_PATH_YES = $(SYSTEM_LIBRARY_DIR
 UMBRELLA_FRAMEWORKS_DIR = $(UMBRELLA_FRAMEWORKS_DIR_$(CONFIGURATION));
 UMBRELLA_FRAMEWORKS_DIR_Debug = $(UMBRELLA_FRAMEWORKS_DIR_engineering);
 UMBRELLA_FRAMEWORKS_DIR_Release = $(UMBRELLA_FRAMEWORKS_DIR_engineering);
 UMBRELLA_FRAMEWORKS_DIR_Production[sdk=iphone*] = $(SDKROOT)$(SYSTEM_LIBRARY_DIR)/PrivateFrameworks;
 UMBRELLA_FRAMEWORKS_DIR_Production[sdk=macosx*] = $(SDKROOT)$(UMBRELLA_FRAMEWORKS_DIR_Production_macosx_USE_STAGING_INSTALL_PATH_$(USE_STAGING_INSTALL_PATH));
 UMBRELLA_FRAMEWORKS_DIR_Production_macosx_USE_STAGING_INSTALL_PATH_ = $(UMBRELLA_FRAMEWORKS_DIR_Production_macosx_USE_STAGING_INSTALL_PATH_NO);
 UMBRELLA_FRAMEWORKS_DIR_Production_macosx_USE_STAGING_INSTALL_PATH_NO = $(NEXT_ROOT)$(SYSTEM_LIBRARY_DIR)/Frameworks/WebKit.framework/Versions/A/Frameworks;
 UMBRELLA_FRAMEWORKS_DIR_Production_macosx_USE_STAGING_INSTALL_PATH_YES = $(NEXT_ROOT)$(SYSTEM_LIBRARY_DIR)/StagedFrameworks/Safari;
 UMBRELLA_FRAMEWORKS_DIR_engineering = $(BUILT_PRODUCTS_DIR);
 
+JAVASCRIPTCORE_PRIVATE_HEADERS_DIR = $(UMBRELLA_FRAMEWORKS_DIR)/JavaScriptCore.framework/PrivateHeaders;
 WEBCORE_PRIVATE_HEADERS_DIR = $(UMBRELLA_FRAMEWORKS_DIR)/WebCore.framework/PrivateHeaders;
 WEBKIT_LEGACY_PRIVATE_HEADERS_DIR = $(UMBRELLA_FRAMEWORKS_DIR)/WebKitLegacy.framework/PrivateHeaders;
 
 OTHER_LDFLAGS_VERSIONED_FRAMEWORK_PATH = $(OTHER_LDFLAGS_VERSIONED_FRAMEWORK_PATH_$(USE_STAGING_INSTALL_PATH));
 OTHER_LDFLAGS_VERSIONED_FRAMEWORK_PATH_YES = -Wl,-dyld_env -Wl,DYLD_VERSIONED_FRAMEWORK_PATH=/System/Library/StagedFrameworks/Safari;
diff --git a/Source/WebKit2/DerivedSources.make b/Source/WebKit2/DerivedSources.make
index b31b14f..b6b411d 100644
--- a/Source/WebKit2/DerivedSources.make
+++ b/Source/WebKit2/DerivedSources.make
@@ -39,20 +39,21 @@ VPATH = \
     $(WebKit2)/WebProcess/Cookies \
     $(WebKit2)/WebProcess/Databases/IndexedDB \
     $(WebKit2)/WebProcess/FullScreen \
     $(WebKit2)/WebProcess/Geolocation \
     $(WebKit2)/WebProcess/IconDatabase \
     $(WebKit2)/WebProcess/MediaCache \
     $(WebKit2)/WebProcess/Network \
     $(WebKit2)/WebProcess/Notifications \
     $(WebKit2)/WebProcess/OriginData \
     $(WebKit2)/WebProcess/Plugins \
+    $(WebKit2)/WebProcess/Replay \
     $(WebKit2)/WebProcess/ResourceCache \
     $(WebKit2)/WebProcess/Scrolling \
     $(WebKit2)/WebProcess/Storage \
     $(WebKit2)/WebProcess/UserContent \
     $(WebKit2)/WebProcess/WebCoreSupport \
     $(WebKit2)/WebProcess/WebPage \
     $(WebKit2)/WebProcess/ios \
     $(WebKit2)/WebProcess \
     $(WebKit2)/UIProcess \
     $(WebKit2)/UIProcess/Databases \
@@ -188,10 +189,28 @@ SANDBOX_PROFILES = \
 	com.apple.WebProcess.sb \
 	com.apple.WebKit.Databases.sb \
 	com.apple.WebKit.NetworkProcess.sb
 
 all: $(SANDBOX_PROFILES)
 
 %.sb : %.sb.in
 	@echo Pre-processing $* sandbox profile...
 	$(CC) $(SDK_FLAGS) $(TEXT_PREPROCESSOR_FLAGS) $(FRAMEWORK_FLAGS) $(HEADER_FLAGS) -include "wtf/Platform.h" $< > $@
 
+# Web Replay inputs generator
+
+INPUT_GENERATOR_SCRIPTS = \
+    $(WebReplayScripts)/CodeGeneratorReplayInputs.py \
+    $(WebReplayScripts)/CodeGeneratorReplayInputsTemplates.py \
+#
+
+INPUT_GENERATOR_SPECIFICATIONS = \
+	$(WebKit2)/WebProcess/Replay/WKInputs.json \
+	$(WEBCORE_PRIVATE_HEADERS_DIR)/WebInputs.json \
+	$(JAVASCRIPTCORE_PRIVATE_HEADERS_DIR)/JSInputs.json \
+#
+
+all : WKReplayInputs.h
+
+WKReplayInputs.h : $(INPUT_GENERATOR_SPECIFICATIONS) $(INPUT_GENERATOR_SCRIPTS)
+	python $(WebReplayScripts)/CodeGeneratorReplayInputs.py --outputDir . --framework WebKit $(INPUT_GENERATOR_SPECIFICATIONS)
+
diff --git a/Source/WebKit2/WebKit2.xcodeproj/project.pbxproj b/Source/WebKit2/WebKit2.xcodeproj/project.pbxproj
index ef9c753..641850e 100644
--- a/Source/WebKit2/WebKit2.xcodeproj/project.pbxproj
+++ b/Source/WebKit2/WebKit2.xcodeproj/project.pbxproj
@@ -1619,20 +1619,22 @@
 		C06C6095124C144B0001682F /* WebPageCreationParameters.cpp in Sources */ = {isa = PBXBuildFile; fileRef = C06C6093124C14430001682F /* WebPageCreationParameters.cpp */; };
 		C09AE5E9125257C20025825D /* WKNativeEvent.h in Headers */ = {isa = PBXBuildFile; fileRef = C09AE5E8125257C20025825D /* WKNativeEvent.h */; settings = {ATTRIBUTES = (Private, ); }; };
 		C0CE72A01247E71D00BC0EC4 /* WebPageMessageReceiver.cpp in Sources */ = {isa = PBXBuildFile; fileRef = C0CE729E1247E71D00BC0EC4 /* WebPageMessageReceiver.cpp */; };
 		C0CE72A11247E71D00BC0EC4 /* WebPageMessages.h in Headers */ = {isa = PBXBuildFile; fileRef = C0CE729F1247E71D00BC0EC4 /* WebPageMessages.h */; };
 		C0CE72AD1247E78D00BC0EC4 /* HandleMessage.h in Headers */ = {isa = PBXBuildFile; fileRef = C0CE72AC1247E78D00BC0EC4 /* HandleMessage.h */; };
 		C0E3AA7A1209E83000A49D01 /* ModuleCF.cpp in Sources */ = {isa = PBXBuildFile; fileRef = C0E3AA481209E45000A49D01 /* ModuleCF.cpp */; };
 		C0E3AA7B1209E83500A49D01 /* Module.cpp in Sources */ = {isa = PBXBuildFile; fileRef = C0E3AA451209E2BA00A49D01 /* Module.cpp */; };
 		C0E3AA7C1209E83C00A49D01 /* Module.h in Headers */ = {isa = PBXBuildFile; fileRef = C0E3AA441209E2BA00A49D01 /* Module.h */; };
 		C49474B019A3F93F009B3DE8 /* WebReplayClient.h in Headers */ = {isa = PBXBuildFile; fileRef = C49474AE19A3F924009B3DE8 /* WebReplayClient.h */; };
 		C49474B119A3F947009B3DE8 /* WebReplayClient.cpp in Sources */ = {isa = PBXBuildFile; fileRef = C49474AD19A3F924009B3DE8 /* WebReplayClient.cpp */; };
+		C49474B719A41B73009B3DE8 /* WKReplayInputs.cpp in Sources */ = {isa = PBXBuildFile; fileRef = C49474B519A41B73009B3DE8 /* WKReplayInputs.cpp */; };
+		C49474B819A41B73009B3DE8 /* WKReplayInputs.h in Headers */ = {isa = PBXBuildFile; fileRef = C49474B619A41B73009B3DE8 /* WKReplayInputs.h */; };
 		C517388112DF8F4F00EE3F47 /* DragControllerAction.h in Headers */ = {isa = PBXBuildFile; fileRef = C517388012DF8F4F00EE3F47 /* DragControllerAction.h */; };
 		C5237F6012441CA300780472 /* WebEditorClientMac.mm in Sources */ = {isa = PBXBuildFile; fileRef = C5237F5F12441CA300780472 /* WebEditorClientMac.mm */; };
 		C54256B518BEC18C00DE4179 /* WKFormInputControl.h in Headers */ = {isa = PBXBuildFile; fileRef = C54256AF18BEC18B00DE4179 /* WKFormInputControl.h */; };
 		C54256B618BEC18C00DE4179 /* WKFormInputControl.mm in Sources */ = {isa = PBXBuildFile; fileRef = C54256B018BEC18B00DE4179 /* WKFormInputControl.mm */; };
 		C54256B718BEC18C00DE4179 /* WKFormPeripheral.h in Headers */ = {isa = PBXBuildFile; fileRef = C54256B118BEC18B00DE4179 /* WKFormPeripheral.h */; };
 		C54256B818BEC18C00DE4179 /* WKFormPopover.h in Headers */ = {isa = PBXBuildFile; fileRef = C54256B218BEC18B00DE4179 /* WKFormPopover.h */; };
 		C54256B918BEC18C00DE4179 /* WKFormPopover.mm in Sources */ = {isa = PBXBuildFile; fileRef = C54256B318BEC18B00DE4179 /* WKFormPopover.mm */; };
 		C54256BA18BEC18C00DE4179 /* WKFormSelectControl.h in Headers */ = {isa = PBXBuildFile; fileRef = C54256B418BEC18C00DE4179 /* WKFormSelectControl.h */; };
 		C55CB5B718C269CF00CA81E1 /* WKFormSelectPopover.mm in Sources */ = {isa = PBXBuildFile; fileRef = C57193BA18C149D0002D0F12 /* WKFormSelectPopover.mm */; };
 		C55CB5B818C2A5D600CA81E1 /* WKFormSelectPicker.mm in Sources */ = {isa = PBXBuildFile; fileRef = C57193B918C149D0002D0F12 /* WKFormSelectPicker.mm */; };
@@ -3838,20 +3840,23 @@
 		C0CE729F1247E71D00BC0EC4 /* WebPageMessages.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = WebPageMessages.h; sourceTree = "<group>"; };
 		C0CE72AC1247E78D00BC0EC4 /* HandleMessage.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = HandleMessage.h; sourceTree = "<group>"; };
 		C0CE72DB1247E8F700BC0EC4 /* DerivedSources.make */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = text; path = DerivedSources.make; sourceTree = "<group>"; };
 		C0CE73361247F70E00BC0EC4 /* generate-message-receiver.py */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = text.script.python; path = "generate-message-receiver.py"; sourceTree = "<group>"; };
 		C0CE73371247F70E00BC0EC4 /* generate-messages-header.py */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = text.script.python; path = "generate-messages-header.py"; sourceTree = "<group>"; };
 		C0E3AA441209E2BA00A49D01 /* Module.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = Module.h; sourceTree = "<group>"; };
 		C0E3AA451209E2BA00A49D01 /* Module.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = Module.cpp; sourceTree = "<group>"; };
 		C0E3AA481209E45000A49D01 /* ModuleCF.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = ModuleCF.cpp; sourceTree = "<group>"; };
 		C49474AD19A3F924009B3DE8 /* WebReplayClient.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = WebReplayClient.cpp; sourceTree = "<group>"; };
 		C49474AE19A3F924009B3DE8 /* WebReplayClient.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = WebReplayClient.h; sourceTree = "<group>"; };
+		C49474B319A41246009B3DE8 /* WKInputs.json */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = text.json; path = WKInputs.json; sourceTree = "<group>"; };
+		C49474B519A41B73009B3DE8 /* WKReplayInputs.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = WKReplayInputs.cpp; sourceTree = "<group>"; };
+		C49474B619A41B73009B3DE8 /* WKReplayInputs.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = WKReplayInputs.h; sourceTree = "<group>"; };
 		C517388012DF8F4F00EE3F47 /* DragControllerAction.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = DragControllerAction.h; sourceTree = "<group>"; };
 		C5237F5F12441CA300780472 /* WebEditorClientMac.mm */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.objcpp; path = WebEditorClientMac.mm; sourceTree = "<group>"; };
 		C54256AF18BEC18B00DE4179 /* WKFormInputControl.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; name = WKFormInputControl.h; path = ios/forms/WKFormInputControl.h; sourceTree = "<group>"; };
 		C54256B018BEC18B00DE4179 /* WKFormInputControl.mm */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.objcpp; name = WKFormInputControl.mm; path = ios/forms/WKFormInputControl.mm; sourceTree = "<group>"; };
 		C54256B118BEC18B00DE4179 /* WKFormPeripheral.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; name = WKFormPeripheral.h; path = ios/forms/WKFormPeripheral.h; sourceTree = "<group>"; };
 		C54256B218BEC18B00DE4179 /* WKFormPopover.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; name = WKFormPopover.h; path = ios/forms/WKFormPopover.h; sourceTree = "<group>"; };
 		C54256B318BEC18B00DE4179 /* WKFormPopover.mm */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.objcpp; name = WKFormPopover.mm; path = ios/forms/WKFormPopover.mm; sourceTree = "<group>"; };
 		C54256B418BEC18C00DE4179 /* WKFormSelectControl.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; name = WKFormSelectControl.h; path = ios/forms/WKFormSelectControl.h; sourceTree = "<group>"; };
 		C554FFA212E4E8EA002F22C0 /* WebDragClientMac.mm */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.objcpp; path = WebDragClientMac.mm; sourceTree = "<group>"; };
 		C57193B918C149D0002D0F12 /* WKFormSelectPicker.mm */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.objcpp; name = WKFormSelectPicker.mm; path = ios/forms/WKFormSelectPicker.mm; sourceTree = "<group>"; };
@@ -5896,20 +5901,21 @@
 				BC0E5FCB12D696DD0012A72A /* Geolocation */,
 				51FBB9C1132E079200F327B4 /* IconDatabase */,
 				BC204EDF11C83E72008F3375 /* InjectedBundle */,
 				2DA944B11884E9DF00ED86DB /* ios */,
 				33D3A3BD1339609800709BE4 /* MediaCache */,
 				4A410F4119AF7B27002EBAB5 /* MediaStream */,
 				5105B0D2162F7A5E00E27709 /* Network */,
 				31099974146C8AA80029DEB9 /* Notifications (User) */,
 				755422C518064FFC0046F6A8 /* OriginData */,
 				1A6FB7AA11E64B4900DB1371 /* Plugins */,
+				C49474B219A4121A009B3DE8 /* Replay */,
 				3336762B130C9978006C9DE2 /* ResourceCache */,
 				0F59478C187B3B2A00437857 /* Scrolling */,
 				1AAC4DDE16B1CBF6009425E3 /* Storage */,
 				1AAF08AA1926930B00B6390C /* UserContent */,
 				BC032D5D10F437220058C15A /* WebCoreSupport */,
 				BC032D5E10F4372B0058C15A /* WebPage */,
 				BCE9C0CF1485965D00E33D61 /* WebConnectionToUIProcess.cpp */,
 				BCE9C0D01485965D00E33D61 /* WebConnectionToUIProcess.h */,
 				BC111AE3112F5C2600337BAB /* WebProcess.cpp */,
 				BC032D9110F437AF0058C15A /* WebProcess.h */,
@@ -7165,20 +7171,22 @@
 				2D1B5D5B185869C8006C6596 /* ViewGestureControllerMessageReceiver.cpp */,
 				2D1B5D5C185869C8006C6596 /* ViewGestureControllerMessages.h */,
 				2D819B9F1862800E001F03D1 /* ViewGestureGeometryCollectorMessageReceiver.cpp */,
 				2D819BA01862800E001F03D1 /* ViewGestureGeometryCollectorMessages.h */,
 				2684055018B86ED60022C38B /* ViewUpdateDispatcherMessageReceiver.cpp */,
 				2684055118B86ED60022C38B /* ViewUpdateDispatcherMessages.h */,
 				1A60224A18C16B9F00C3E8C9 /* VisitedLinkProviderMessageReceiver.cpp */,
 				1A60224B18C16B9F00C3E8C9 /* VisitedLinkProviderMessages.h */,
 				1A8E7D3A18C15149005A702A /* VisitedLinkTableControllerMessageReceiver.cpp */,
 				1A8E7D3B18C15149005A702A /* VisitedLinkTableControllerMessages.h */,
+				C49474B519A41B73009B3DE8 /* WKReplayInputs.cpp */,
+				C49474B619A41B73009B3DE8 /* WKReplayInputs.h */,
 				512E3568130B57F000ABD19A /* WebApplicationCacheManagerMessageReceiver.cpp */,
 				512E3569130B57F000ABD19A /* WebApplicationCacheManagerMessages.h */,
 				512E35F6130B642E00ABD19A /* WebApplicationCacheManagerProxyMessageReceiver.cpp */,
 				512E35F7130B642E00ABD19A /* WebApplicationCacheManagerProxyMessages.h */,
 				1A1FEC1A1627B45600700F6D /* WebConnectionMessageReceiver.cpp */,
 				1A1FEC1B1627B45700700F6D /* WebConnectionMessages.h */,
 				330934431315B9220097A7BC /* WebCookieManagerMessageReceiver.cpp */,
 				330934441315B9220097A7BC /* WebCookieManagerMessages.h */,
 				330934451315B9220097A7BC /* WebCookieManagerProxyMessageReceiver.cpp */,
 				330934461315B9220097A7BC /* WebCookieManagerProxyMessages.h */,
@@ -7261,20 +7269,28 @@
 				C0CE73371247F70E00BC0EC4 /* generate-messages-header.py */,
 				0FC0856F187CE0A900780D86 /* messages.py */,
 				0FC08570187CE0A900780D86 /* model.py */,
 				0FC08571187CE0A900780D86 /* parser.py */,
 			);
 			path = Scripts;
 			sourceTree = "<group>";
 			tabWidth = 8;
 			usesTabs = 0;
 		};
+		C49474B219A4121A009B3DE8 /* Replay */ = {
+			isa = PBXGroup;
+			children = (
+				C49474B319A41246009B3DE8 /* WKInputs.json */,
+			);
+			path = Replay;
+			sourceTree = "<group>";
+		};
 		C54256AE18BEC16100DE4179 /* forms */ = {
 			isa = PBXGroup;
 			children = (
 				C5FA1ED118E1062200B3F402 /* WKAirPlayRoutePicker.h */,
 				C5FA1ED218E1062200B3F402 /* WKAirPlayRoutePicker.mm */,
 				A58B6F0618FCA733008CBA53 /* WKFileUploadPanel.h */,
 				A58B6F0718FCA733008CBA53 /* WKFileUploadPanel.mm */,
 				C54256AF18BEC18B00DE4179 /* WKFormInputControl.h */,
 				C54256B018BEC18B00DE4179 /* WKFormInputControl.mm */,
 				C54256B118BEC18B00DE4179 /* WKFormPeripheral.h */,
@@ -8227,20 +8243,21 @@
 				1A6509CE18B4146200614332 /* WKProcessPoolPrivate.h in Headers */,
 				512F58FC12A88A5400629530 /* WKProtectionSpace.h in Headers */,
 				2DF9EEEE1A786EAD00B6CFBE /* APINavigationResponse.h in Headers */,
 				518ACAEA12AEE6BB00B04B83 /* WKProtectionSpaceTypes.h in Headers */,
 				1AD01BCD1905D54900C9C45F /* WKReloadFrameErrorRecoveryAttempter.h in Headers */,
 				1A9E329B1822E1CC00F5D04C /* WKRemoteObject.h in Headers */,
 				1A9E329F1822FEDD00F5D04C /* WKRemoteObjectCoder.h in Headers */,
 				37948409150C4B9700E52CE9 /* WKRenderLayer.h in Headers */,
 				37608823150414F700FC82C7 /* WKRenderObject.h in Headers */,
 				7C89D2A01A678554003A5FDE /* WKUserContentControllerRef.h in Headers */,
+				C49474B819A41B73009B3DE8 /* WKReplayInputs.h in Headers */,
 				3336763B130C99DC006C9DE2 /* WKResourceCacheManager.h in Headers */,
 				BC8A501511765F5600757573 /* WKRetainPtr.h in Headers */,
 				1A7E377918E4A4FE003D0FFF /* WKScriptMessage.h in Headers */,
 				1A7E377518E4A33A003D0FFF /* WKScriptMessageHandler.h in Headers */,
 				7CC99A3618EF7CBC0048C8B4 /* WKScriptMessageInternal.h in Headers */,
 				0FCB4E5418BBE044000FCFC9 /* WKScrollView.h in Headers */,
 				F634445D12A885E9000612D8 /* WKSecurityOrigin.h in Headers */,
 				BC407604124FF0270068F20A /* WKSerializedScriptValue.h in Headers */,
 				F67DD7BA125E40D9007BDCB8 /* WKSerializedScriptValuePrivate.h in Headers */,
 				75A8D2D7187D303A00C39C9E /* WKSessionRef.h in Headers */,
@@ -9121,21 +9138,21 @@
 			buildActionMask = 2147483647;
 			files = (
 			);
 			inputPaths = (
 			);
 			name = "Generate Derived Sources";
 			outputPaths = (
 			);
 			runOnlyForDeploymentPostprocessing = 0;
 			shellPath = /bin/sh;
-			shellScript = "mkdir -p \"${BUILT_PRODUCTS_DIR}/DerivedSources/WebKit2\"\ncd \"${BUILT_PRODUCTS_DIR}/DerivedSources/WebKit2\"\n\nexport WebKit2=\"${SRCROOT}\"\n\nif [ ! $CC ]; then\n    export CC=\"`xcrun -find clang`\"\nfi\n\nif [ \"${ACTION}\" = \"build\" -o \"${ACTION}\" = \"install\" -o \"${ACTION}\" = \"installhdrs\" ]; then\n    make --no-builtin-rules -f \"${WebKit2}/DerivedSources.make\" -j `/usr/sbin/sysctl -n hw.activecpu` SDKROOT=${SDKROOT}\nfi\n";
+			shellScript = "mkdir -p \"${BUILT_PRODUCTS_DIR}/DerivedSources/WebKit2\"\ncd \"${BUILT_PRODUCTS_DIR}/DerivedSources/WebKit2\"\n\nexport WebKit2=\"${SRCROOT}\"\nexport WebReplayScripts=\"${JAVASCRIPTCORE_PRIVATE_HEADERS_DIR}\"\n\nif [ ! $CC ]; then\n    export CC=\"`xcrun -find clang`\"\nfi\n\nif [ \"${ACTION}\" = \"build\" -o \"${ACTION}\" = \"install\" -o \"${ACTION}\" = \"installhdrs\" ]; then\n    make --no-builtin-rules -f \"${WebKit2}/DerivedSources.make\" -j `/usr/sbin/sysctl -n hw.activecpu` SDKROOT=${SDKROOT}\nfi\n";
 		};
 		E19C7DDA194A4C9500F1866F /* Add CFBundle Localization Info.plist Key */ = {
 			isa = PBXShellScriptBuildPhase;
 			buildActionMask = 2147483647;
 			files = (
 			);
 			inputPaths = (
 			);
 			name = "Add CFBundle Localization Info.plist Key";
 			outputPaths = (
@@ -9947,20 +9964,21 @@
 				BCBAACEC145225E30053F82F /* WKProcessGroup.mm in Sources */,
 				1A158419189044F50017616C /* WKProcessPool.mm in Sources */,
 				512F58FB12A88A5400629530 /* WKProtectionSpace.cpp in Sources */,
 				1AD01BCC1905D54900C9C45F /* WKReloadFrameErrorRecoveryAttempter.mm in Sources */,
 				7C89D2A61A6789EA003A5FDE /* APIUserScript.cpp in Sources */,
 				1A9E329A1822E1CC00F5D04C /* WKRemoteObject.mm in Sources */,
 				1AFA4B8B1A65A1D0006C4AB4 /* WebProcessLifetimeTracker.cpp in Sources */,
 				1A9E329E1822FEDD00F5D04C /* WKRemoteObjectCoder.mm in Sources */,
 				37948408150C4B9700E52CE9 /* WKRenderLayer.cpp in Sources */,
 				37608822150414F700FC82C7 /* WKRenderObject.cpp in Sources */,
+				C49474B719A41B73009B3DE8 /* WKReplayInputs.cpp in Sources */,
 				3336763A130C99DC006C9DE2 /* WKResourceCacheManager.cpp in Sources */,
 				1A7E377818E4A4FE003D0FFF /* WKScriptMessage.mm in Sources */,
 				0FCB4E5518BBE044000FCFC9 /* WKScrollView.mm in Sources */,
 				F634445C12A885E9000612D8 /* WKSecurityOrigin.cpp in Sources */,
 				BC407603124FF0270068F20A /* WKSerializedScriptValue.cpp in Sources */,
 				75A8D2D8187D304000C39C9E /* WKSessionRef.cpp in Sources */,
 				1ADE46B21954EC61000F7985 /* WKSessionStateRef.cpp in Sources */,
 				BC407605124FF0270068F20A /* WKString.cpp in Sources */,
 				BC407619124FF0370068F20A /* WKStringCF.mm in Sources */,
 				26F10BE919187E2E001D0E68 /* WKSyntheticClickTapGestureRecognizer.m in Sources */,
diff --git a/Source/WebKit2/WebProcess/Replay/WKInputs.json b/Source/WebKit2/WebProcess/Replay/WKInputs.json
new file mode 100644
index 0000000..8951d77
--- /dev/null
+++ b/Source/WebKit2/WebProcess/Replay/WKInputs.json
@@ -0,0 +1,15 @@
+{
+    "inputs": {
+        "WebKit": [
+            {
+                "name": "HandleMouseMove",
+                "description": "The embedder signalled a mouse move event.",
+                "queue": "EVENT_LOOP",
+                "members": [
+                    { "name": "platformEvent", "type": "PlatformMouseEvent" },
+                    { "name": "scrollbarTargeted", "type": "bool" }
+                ]
+            }
+        ]
+    }
+}
-- 
2.3.5

