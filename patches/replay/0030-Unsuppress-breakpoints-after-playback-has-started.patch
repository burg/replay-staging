From 15bd3731dd5c3b20f92c9cae6fdb7967bd7c521a Mon Sep 17 00:00:00 2001
From: "Brian J. Burg" <burg@cs.washington.edu>
Date: Sat, 20 Sep 2014 14:42:00 -0700
Subject: [PATCH] Unsuppress breakpoints after playback has started.

---
 .../UserInterface/Controllers/ReplayManager.js     | 41 +++++++++++++---------
 1 file changed, 24 insertions(+), 17 deletions(-)

diff --git a/Source/WebInspectorUI/UserInterface/Controllers/ReplayManager.js b/Source/WebInspectorUI/UserInterface/Controllers/ReplayManager.js
index 0de1226..be7faa9 100644
--- a/Source/WebInspectorUI/UserInterface/Controllers/ReplayManager.js
+++ b/Source/WebInspectorUI/UserInterface/Controllers/ReplayManager.js
@@ -362,21 +362,21 @@ WebInspector.ReplayManager.prototype = {
             }).catch(function(error) {
                 console.error("Failed to stop playback: ", error);
                 throw error;
             });
 
         return result;
     },
 
     // Replay to the specified position as soon as possible using the current replay speed.
     // Returns a promise that resolves when replay has begun (NOT when the position is reached).
-    replayToPosition: function(replayPosition) // --> ()
+    replayToPosition: function(replayPosition, suppressBreakpoints) // --> ()
     {
         console.assert(replayPosition instanceof WebInspector.ReplayPosition, "Cannot replay to a position while capturing.");
 
         var manager = this;
         var result = this.waitUntilInitialized();
 
         if (this.sessionState === WebInspector.ReplayManager.SessionState.Capturing) {
             result = result.then(function() {
                 return WebInspector.replayManager.stopCapturing();
             });
@@ -387,26 +387,29 @@ WebInspector.ReplayManager.prototype = {
         result = result.then(function() {
                 console.assert(manager.sessionState !== WebInspector.ReplayManager.SessionState.Capturing);
                 console.assert(manager.segmentState !== WebInspector.ReplayManager.SegmentState.Appending);
 
                 return ReplayAgent.replayToPosition(replayPosition, manager.playbackSpeed === WebInspector.ReplayManager.PlaybackSpeed.FastForward);
             }).catch(function(error) {
                 console.error("Failed to start playback to position: ", replayPosition, error);
                 throw error;
             });
 
+        if (!suppressBreakpoints)
+            result = result.then(this._unsuppressBreakpointsIfNeeded.bind(this));
+
         return result;
     },
 
     // Replay to the end of the session as soon as possible using the current replay speed.
     // Returns a promise that resolves when replay has begun (NOT when the end is reached).
-    replayToCompletion: function() // --> ()
+    replayToCompletion: function(suppressBreakpoints) // --> ()
     {
         var manager = this;
         var result = this.waitUntilInitialized();
 
         if (this.segmentState === WebInspector.ReplayManager.SegmentState.Dispatching)
             return result; // Already running.
 
         if (this.sessionState === WebInspector.ReplayManager.SessionState.Capturing) {
             result = result.then(function() {
                 return WebInspector.replayManager.stopCapturing();
@@ -418,20 +421,23 @@ WebInspector.ReplayManager.prototype = {
         result = result.then(function() {
                 console.assert(manager.sessionState !== WebInspector.ReplayManager.SessionState.Capturing);
                 console.assert(manager.segmentState === WebInspector.ReplayManager.SegmentState.Loaded || manager.segmentState === WebInspector.ReplayManager.SegmentState.Unloaded);
 
                 return ReplayAgent.replayToCompletion(manager.playbackSpeed === WebInspector.ReplayManager.PlaybackSpeed.FastForward)
             }).catch(function(error) {
                 console.error("Failed to start playback to completion: ", error);
                 throw error;
             });
 
+        if (!suppressBreakpoints)
+            result = result.then(this._unsuppressBreakpointsIfNeeded.bind(this));
+
         return result;
     },
 
     // Protected (called by ReplayObserver)
 
     // Since these methods update session and segment state, they depend on the manager
     // being properly initialized. So, each function body is prepended with a retry guard.
     // This makes call sites simpler and avoids an extra event loop turn in the common case.
 
     captureStarted: function()
@@ -445,25 +451,21 @@ WebInspector.ReplayManager.prototype = {
     },
 
     captureStopped: function()
     {
         if (!this._initialized)
             return this.waitUntilInitialized().then(this.captureStopped.bind(this));
 
         this._changeSessionState(WebInspector.ReplayManager.SessionState.Inactive);
         this._changeSegmentState(WebInspector.ReplayManager.SegmentState.Unloaded);
 
-        if (this._breakpointsWereSuppressed) {
-            delete this._breakpointsWereSuppressed;
-            WebInspector.debuggerManager.breakpointsEnabled = true;
-        }
-
+        this._unsuppressBreakpointsIfNeeded();
         this.dispatchEventToListeners(WebInspector.ReplayManager.Event.CaptureStopped);
     },
 
     playbackStarted: function()
     {
         if (!this._initialized)
             return this.waitUntilInitialized().then(this.playbackStarted.bind(this));
 
         if (this.sessionState === WebInspector.ReplayManager.SessionState.Inactive)
             this._changeSessionState(WebInspector.ReplayManager.SessionState.Replaying);
@@ -487,41 +489,33 @@ WebInspector.ReplayManager.prototype = {
     },
 
     playbackPaused: function(position)
     {
         if (!this._initialized)
             return this.waitUntilInitialized().then(this.playbackPaused.bind(this, position));
 
         console.assert(this.sessionState === WebInspector.ReplayManager.SessionState.Replaying);
         this._changeSegmentState(WebInspector.ReplayManager.SegmentState.Loaded);
 
-        if (this._breakpointsWereSuppressed) {
-            delete this._breakpointsWereSuppressed;
-            WebInspector.debuggerManager.breakpointsEnabled = true;
-        }
-
+        this._unsuppressBreakpointsIfNeeded();
         this.dispatchEventToListeners(WebInspector.ReplayManager.Event.PlaybackPaused);
     },
 
     playbackFinished: function()
     {
         if (!this._initialized)
             return this.waitUntilInitialized().then(this.playbackFinished.bind(this));
 
         this._changeSessionState(WebInspector.ReplayManager.SessionState.Inactive);
         console.assert(this.segmentState === WebInspector.ReplayManager.SegmentState.Unloaded);
 
-        if (this._breakpointsWereSuppressed) {
-            delete this._breakpointsWereSuppressed;
-            WebInspector.debuggerManager.breakpointsEnabled = true;
-        }
-
+        this._unsuppressBreakpointsIfNeeded();
         this.dispatchEventToListeners(WebInspector.ReplayManager.Event.PlaybackFinished);
     },
 
     sessionCreated: function(sessionId)
     {
         if (!this._initialized)
             return this.waitUntilInitialized().then(this.sessionCreated.bind(this, sessionId));
 
         console.assert(!this._sessions.has(sessionId), "Tried to add duplicate session identifier:", sessionId);
         var sessionMap = this._sessions;
@@ -717,13 +711,26 @@ WebInspector.ReplayManager.prototype = {
     _suppressBreakpointsAndResumeIfNeeded: function()
     {
         var manager = this;
 
         return new Promise(function(resolve, reject) {
             manager._breakpointsWereSuppressed = WebInspector.debuggerManager.breakpointsEnabled;
             WebInspector.debuggerManager.breakpointsEnabled = false;
 
             return WebInspector.debuggerManager.resume();
         });
+    },
+
+    _unsuppressBreakpointsIfNeeded: function()
+    {
+        var manager = this;
+
+        return new WebInspector.Promise(function(resolve, reject) {
+            if (manager._breakpointsWereSuppressed) {
+                delete manager._breakpointsWereSuppressed;
+                WebInspector.debuggerManager.breakpointsEnabled = true;
+            }
+            return resolve();
+        });
     }
 };
 
-- 
2.3.5

