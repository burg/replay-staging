From 117543a50902b5a6260ab2adb9a6aa85d2d11703 Mon Sep 17 00:00:00 2001
From: "Brian J. Burg" <burg@cs.washington.edu>
Date: Sat, 23 Aug 2014 16:21:19 -0700
Subject: [PATCH] Web Replay: capture and replay navigation actions in WebPage

---
 Source/WebCore/CMakeLists.txt                      |   1 -
 Source/WebCore/WebCore.exp.in                      |  20 +--
 Source/WebCore/WebCore.vcxproj/WebCore.vcxproj     |   2 -
 .../WebCore.vcxproj/WebCore.vcxproj.filters        |   6 -
 Source/WebCore/WebCore.xcodeproj/project.pbxproj   |   8 --
 Source/WebCore/page/Page.cpp                       |   2 -
 Source/WebCore/page/Page.h                         |   3 -
 Source/WebCore/replay/ReplayController.cpp         |   4 -
 Source/WebCore/replay/UserInputBridge.cpp          | 157 ---------------------
 Source/WebCore/replay/UserInputBridge.h            |  88 ------------
 Source/WebCore/replay/WebInputs.json               |  31 ----
 Source/WebCore/replay/WebReplayInputCoders.h       |   4 +-
 .../replay/WebReplayInputDispatchMethods.cpp       |  27 ----
 Source/WebKit2/WebProcess/Replay/WKInputs.json     |  40 +++++-
 .../Replay/WKReplayInputDispatchMethods.cpp        |  31 ++++
 Source/WebKit2/WebProcess/WebPage/WebPage.cpp      |  85 +++++++++--
 Source/WebKit2/WebProcess/WebPage/WebPage.h        |   7 +
 17 files changed, 158 insertions(+), 358 deletions(-)
 delete mode 100644 Source/WebCore/replay/UserInputBridge.cpp
 delete mode 100644 Source/WebCore/replay/UserInputBridge.h

diff --git a/Source/WebCore/CMakeLists.txt b/Source/WebCore/CMakeLists.txt
index 1d1ba5c..f7a8ecc 100644
--- a/Source/WebCore/CMakeLists.txt
+++ b/Source/WebCore/CMakeLists.txt
@@ -2486,21 +2486,20 @@ set(WebCore_SOURCES
     rendering/svg/SVGTextLayoutAttributesBuilder.cpp
     rendering/svg/SVGTextLayoutEngine.cpp
     rendering/svg/SVGTextLayoutEngineBaseline.cpp
     rendering/svg/SVGTextLayoutEngineSpacing.cpp
     rendering/svg/SVGTextMetrics.cpp
     rendering/svg/SVGTextMetricsBuilder.cpp
     rendering/svg/SVGTextQuery.cpp
     rendering/svg/SVGTextRunRenderingContext.cpp
 
     replay/ReplayableTimer.cpp
-    replay/UserInputBridge.cpp
 
     storage/Storage.cpp
     storage/StorageAreaImpl.cpp
     storage/StorageAreaSync.cpp
     storage/StorageEvent.cpp
     storage/StorageEventDispatcher.cpp
     storage/StorageMap.cpp
     storage/StorageNamespace.cpp
     storage/StorageNamespaceImpl.cpp
     storage/StorageStrategy.cpp
diff --git a/Source/WebCore/WebCore.exp.in b/Source/WebCore/WebCore.exp.in
index 01f41ff..4a49430 100644
--- a/Source/WebCore/WebCore.exp.in
+++ b/Source/WebCore/WebCore.exp.in
@@ -641,24 +641,20 @@ __ZN7WebCore15SQLiteStatement9bindInt64Eix
 __ZN7WebCore15SQLiteStatementC1ERNS_14SQLiteDatabaseERKN3WTF6StringE
 __ZN7WebCore15SQLiteStatementD1Ev
 __ZN7WebCore15ScrollAlignment17alignCenterAlwaysE
 __ZN7WebCore15ScrollAlignment19alignToEdgeIfNeededE
 __ZN7WebCore15StorageStrategy21localStorageNamespaceEPNS_9PageGroupE
 __ZN7WebCore15StorageStrategy23sessionStorageNamespaceEPNS_4PageE
 __ZN7WebCore15StorageStrategy30transientLocalStorageNamespaceEPNS_9PageGroupEPNS_14SecurityOriginE
 __ZN7WebCore15StringTruncator13rightTruncateERKN3WTF6StringEfRKNS_4FontENS0_24EnableRoundingHacksOrNotE
 __ZN7WebCore15StringTruncator14centerTruncateERKN3WTF6StringEfRKNS_4FontENS0_24EnableRoundingHacksOrNotE
 __ZN7WebCore15StringTruncator5widthERKN3WTF6StringERKNS_4FontENS0_24EnableRoundingHacksOrNotE
-__ZN7WebCore15UserInputBridge11loadRequestERKNS_16FrameLoadRequestENS_11InputSourceE
-__ZN7WebCore15UserInputBridge11reloadFrameEPNS_5FrameEbNS_11InputSourceE
-__ZN7WebCore15UserInputBridge12tryClosePageENS_11InputSourceE
-__ZN7WebCore15UserInputBridge16stopLoadingFrameEPNS_5FrameENS_11InputSourceE
 __ZN7WebCore15VisiblePositionC1ERKNS_8PositionENS_9EAffinityE
 __ZN7WebCore15defaultLanguageEv
 __ZN7WebCore15localizedStringEPKc
 __ZN7WebCore15mimeTypeFromURLERKNS_3URLE
 __ZN7WebCore15originalURLDataEP5NSURL
 __ZN7WebCore15pathGetFileNameERKN3WTF6StringE
 __ZN7WebCore15reportExceptionEPN3JSC9ExecStateENS0_7JSValueEPNS_12CachedScriptE
 __ZN7WebCore15setDOMExceptionEPN3JSC9ExecStateEi
 __ZN7WebCore15toDOMStringListEPN3JSC9ExecStateENS0_7JSValueE
 __ZN7WebCore15visitedLinkHashEPKtj
@@ -3439,44 +3435,32 @@ __ZTVN7WebCore32WebVideoFullscreenInterfaceAVKitE
 
 #if ENABLE(VIDEO_TRACK)
 __ZN7WebCore9PageGroup18captionPreferencesEv
 #endif
 
 #if ENABLE(VIEW_MODE_CSS_MEDIA)
 __ZN7WebCore4Page11setViewModeENS0_8ViewModeE
 #endif
 
 #if ENABLE(WEB_REPLAY)
-__ZN3JSC11InputTraitsIN7WebCore11ReloadFrameEE4typeEv
-__ZN3JSC11InputTraitsIN7WebCore11ReloadFrameEE6decodeERNS_12EncodedValueERNSt3__110unique_ptrIS2_NS6_14default_deleteIS2_EEEE
-__ZN3JSC11InputTraitsIN7WebCore11ReloadFrameEE6encodeERNS_12EncodedValueERKS2_
-__ZN3JSC11InputTraitsIN7WebCore12TryClosePageEE4typeEv
-__ZN3JSC11InputTraitsIN7WebCore12TryClosePageEE6decodeERNS_12EncodedValueERNSt3__110unique_ptrIS2_NS6_14default_deleteIS2_EEEE
-__ZN3JSC11InputTraitsIN7WebCore12TryClosePageEE6encodeERNS_12EncodedValueERKS2_
 __ZN3JSC11InputTraitsIN7WebCore13DOMTimerFiredEE4typeEv
 __ZN3JSC11InputTraitsIN7WebCore13DOMTimerFiredEE6decodeERNS_12EncodedValueERNSt3__110unique_ptrIS2_NS6_14default_deleteIS2_EEEE
 __ZN3JSC11InputTraitsIN7WebCore13DOMTimerFiredEE6encodeERNS_12EncodedValueERKS2_
-__ZN3JSC11InputTraitsIN7WebCore14LoadURLRequestEE4typeEv
-__ZN3JSC11InputTraitsIN7WebCore14LoadURLRequestEE6decodeERNS_12EncodedValueERNSt3__110unique_ptrIS2_NS6_14default_deleteIS2_EEEE
-__ZN3JSC11InputTraitsIN7WebCore14LoadURLRequestEE6encodeERNS_12EncodedValueERKS2_
 __ZN3JSC11InputTraitsIN7WebCore15AsyncTimerFiredEE4typeEv
 __ZN3JSC11InputTraitsIN7WebCore15AsyncTimerFiredEE6decodeERNS_12EncodedValueERNSt3__110unique_ptrIS2_NS6_14default_deleteIS2_EEEE
 __ZN3JSC11InputTraitsIN7WebCore15AsyncTimerFiredEE6encodeERNS_12EncodedValueERKS2_
 __ZN3JSC11InputTraitsIN7WebCore15DOMTimerCreatedEE4typeEv
 __ZN3JSC11InputTraitsIN7WebCore15DOMTimerCreatedEE6decodeERNS_12EncodedValueERNSt3__110unique_ptrIS2_NS6_14default_deleteIS2_EEEE
 __ZN3JSC11InputTraitsIN7WebCore15DOMTimerCreatedEE6encodeERNS_12EncodedValueERKS2_
 __ZN3JSC11InputTraitsIN7WebCore15FetchPluginDataEE4typeEv
 __ZN3JSC11InputTraitsIN7WebCore15FetchPluginDataEE6decodeERNS_12EncodedValueERNSt3__110unique_ptrIS2_NS6_14default_deleteIS2_EEEE
 __ZN3JSC11InputTraitsIN7WebCore15FetchPluginDataEE6encodeERNS_12EncodedValueERKS2_
-__ZN3JSC11InputTraitsIN7WebCore16StopLoadingFrameEE4typeEv
-__ZN3JSC11InputTraitsIN7WebCore16StopLoadingFrameEE6decodeERNS_12EncodedValueERNSt3__110unique_ptrIS2_NS6_14default_deleteIS2_EEEE
-__ZN3JSC11InputTraitsIN7WebCore16StopLoadingFrameEE6encodeERNS_12EncodedValueERKS2_
 __ZN3JSC11InputTraitsIN7WebCore17InitialNavigationEE4typeEv
 __ZN3JSC11InputTraitsIN7WebCore17InitialNavigationEE6decodeERNS_12EncodedValueERNSt3__110unique_ptrIS2_NS6_14default_deleteIS2_EEEE
 __ZN3JSC11InputTraitsIN7WebCore17InitialNavigationEE6encodeERNS_12EncodedValueERKS2_
 __ZN3JSC11InputTraitsIN7WebCore17InitializeHistoryEE4typeEv
 __ZN3JSC11InputTraitsIN7WebCore17InitializeHistoryEE6decodeERNS_12EncodedValueERNSt3__110unique_ptrIS2_NS6_14default_deleteIS2_EEEE
 __ZN3JSC11InputTraitsIN7WebCore17InitializeHistoryEE6encodeERNS_12EncodedValueERKS2_
 __ZN3JSC11InputTraitsIN7WebCore18EndSegmentSentinelEE4typeEv
 __ZN3JSC11InputTraitsIN7WebCore18EndSegmentSentinelEE6decodeERNS_12EncodedValueERNSt3__110unique_ptrIS2_NS6_14default_deleteIS2_EEEE
 __ZN3JSC11InputTraitsIN7WebCore18EndSegmentSentinelEE6encodeERNS_12EncodedValueERKS2_
 __ZN3JSC11InputTraitsIN7WebCore20BeginSegmentSentinelEE4typeEv
@@ -3498,23 +3482,27 @@ __ZN3JSC11InputTraitsIN7WebCore28ResourceLoaderDidReceiveDataEE4typeEv
 __ZN3JSC11InputTraitsIN7WebCore28ResourceLoaderDidReceiveDataEE6decodeERNS_12EncodedValueERNSt3__110unique_ptrIS2_NS6_14default_deleteIS2_EEEE
 __ZN3JSC11InputTraitsIN7WebCore28ResourceLoaderDidReceiveDataEE6encodeERNS_12EncodedValueERKS2_
 __ZN3JSC11InputTraitsIN7WebCore30ResourceLoaderDidFinishLoadingEE4typeEv
 __ZN3JSC11InputTraitsIN7WebCore30ResourceLoaderDidFinishLoadingEE6decodeERNS_12EncodedValueERNSt3__110unique_ptrIS2_NS6_14default_deleteIS2_EEEE
 __ZN3JSC11InputTraitsIN7WebCore30ResourceLoaderDidFinishLoadingEE6encodeERNS_12EncodedValueERKS2_
 __ZN3JSC11InputTraitsIN7WebCore32ResourceLoaderDidReceiveResponseEE4typeEv
 __ZN3JSC11InputTraitsIN7WebCore32ResourceLoaderDidReceiveResponseEE6decodeERNS_12EncodedValueERNSt3__110unique_ptrIS2_NS6_14default_deleteIS2_EEEE
 __ZN3JSC11InputTraitsIN7WebCore32ResourceLoaderDidReceiveResponseEE6encodeERNS_12EncodedValueERKS2_
 __ZN3JSC14EncodingTraitsIN7WebCore15KeypressCommandEE11decodeValueERNS_12EncodedValueERS2_
 __ZN3JSC14EncodingTraitsIN7WebCore15KeypressCommandEE11encodeValueERKS2_
+__ZN3JSC14EncodingTraitsIN7WebCore16FrameLoadRequestEE11decodeValueERNS_12EncodedValueERNSt3__110unique_ptrIS2_NS6_14default_deleteIS2_EEEE
+__ZN3JSC14EncodingTraitsIN7WebCore16FrameLoadRequestEE11encodeValueERKS2_
 __ZN3JSC14EncodingTraitsIN7WebCore8IntPointEE11decodeValueERNS_12EncodedValueERS2_
 __ZN3JSC14EncodingTraitsIN7WebCore8IntPointEE11encodeValueERKS2_
 __ZN3JSC14EncodingTraitsIN7WebCore9FloatSizeEE11decodeValueERNS_12EncodedValueERS2_
 __ZN3JSC14EncodingTraitsIN7WebCore9FloatSizeEE11encodeValueERKS2_
+__ZN7WebCore19frameFromFrameIndexEPNS_4PageEj
+__ZN7WebCore19frameIndexFromFrameEPKNS_5FrameE
 __ZN7WebCore20EventLoopInputExtentC1ERN3JSC11InputCursorE
 __ZN7WebCore20EventLoopInputExtentD1Ev
 __ZNK7WebCore14ResourceLoader17activeInputCursorEv
 __ZNK7WebCore16ReplayController17activeInputCursorEv
 #endif
 
 #if ENABLE(WEB_TIMING)
 __ZNK7WebCore20ResourceResponseBase18resourceLoadTimingEv
 #endif
diff --git a/Source/WebCore/WebCore.vcxproj/WebCore.vcxproj b/Source/WebCore/WebCore.vcxproj/WebCore.vcxproj
index b28a039..24884cc 100644
--- a/Source/WebCore/WebCore.vcxproj/WebCore.vcxproj
+++ b/Source/WebCore/WebCore.vcxproj/WebCore.vcxproj
@@ -12331,21 +12331,20 @@ ï»¿<?xml version="1.0" encoding="utf-8"?>
       <ExcludedFromBuild Condition="'$(Configuration)|$(Platform)'=='DebugSuffix|Win32'">true</ExcludedFromBuild>
       <ExcludedFromBuild Condition="'$(Configuration)|$(Platform)'=='DebugSuffix|x64'">true</ExcludedFromBuild>
       <ExcludedFromBuild Condition="'$(Configuration)|$(Platform)'=='Release|Win32'">true</ExcludedFromBuild>
       <ExcludedFromBuild Condition="'$(Configuration)|$(Platform)'=='Release|x64'">true</ExcludedFromBuild>
       <ExcludedFromBuild Condition="'$(Configuration)|$(Platform)'=='Release_WinCairo|Win32'">true</ExcludedFromBuild>
       <ExcludedFromBuild Condition="'$(Configuration)|$(Platform)'=='Release_WinCairo|x64'">true</ExcludedFromBuild>
       <ExcludedFromBuild Condition="'$(Configuration)|$(Platform)'=='Production|Win32'">true</ExcludedFromBuild>
       <ExcludedFromBuild Condition="'$(Configuration)|$(Platform)'=='Production|x64'">true</ExcludedFromBuild>
     </ClCompile>
     <ClCompile Include="..\replay\ReplayableTimer.cpp" />
-    <ClCompile Include="..\replay\UserInputBridge.cpp" />
     <ClCompile Include="..\workers\SharedWorkerRepository.cpp" />
     <ClCompile Include="..\xml\DOMParser.cpp" />
     <ClCompile Include="..\xml\NativeXPathNSResolver.cpp" />
     <ClCompile Include="..\xml\XMLErrors.cpp" />
     <ClCompile Include="..\xml\XMLHttpRequest.cpp" />
     <ClCompile Include="..\xml\XMLHttpRequestException.cpp" />
     <ClCompile Include="..\xml\XMLHttpRequestProgressEventThrottle.cpp" />
     <ClCompile Include="..\xml\XMLHttpRequestUpload.cpp" />
     <ClCompile Include="..\xml\XMLSerializer.cpp" />
     <ClCompile Include="..\xml\XMLTreeViewer.cpp" />
@@ -20398,21 +20397,20 @@ ï»¿<?xml version="1.0" encoding="utf-8"?>
     <ClInclude Include="..\rendering\svg\SVGTextLayoutAttributes.h" />
     <ClInclude Include="..\rendering\svg\SVGTextLayoutAttributesBuilder.h" />
     <ClInclude Include="..\rendering\svg\SVGTextLayoutEngine.h" />
     <ClInclude Include="..\rendering\svg\SVGTextLayoutEngineBaseline.h" />
     <ClInclude Include="..\rendering\svg\SVGTextLayoutEngineSpacing.h" />
     <ClInclude Include="..\rendering\svg\SVGTextMetrics.h" />
     <ClInclude Include="..\rendering\svg\SVGTextMetricsBuilder.h" />
     <ClInclude Include="..\rendering\svg\SVGTextQuery.h" />
     <ClInclude Include="..\rendering\svg\SVGTextRunRenderingContext.h" />
     <ClInclude Include="..\replay\ReplayableTimer.h" />
-    <ClInclude Include="..\replay\UserInputBridge.h" />
     <ClInclude Include="..\xml\DOMParser.h" />
     <ClInclude Include="..\xml\NativeXPathNSResolver.h" />
     <ClInclude Include="..\xml\XMLErrors.h" />
     <ClInclude Include="..\xml\XMLHttpRequest.h" />
     <ClInclude Include="..\xml\XMLHttpRequestException.h" />
     <ClInclude Include="..\xml\XMLHttpRequestProgressEvent.h" />
     <ClInclude Include="..\xml\XMLHttpRequestProgressEventThrottle.h" />
     <ClInclude Include="..\xml\XMLHttpRequestUpload.h" />
     <ClInclude Include="..\xml\XMLSerializer.h" />
     <ClInclude Include="..\xml\XMLTreeViewer.h" />
diff --git a/Source/WebCore/WebCore.vcxproj/WebCore.vcxproj.filters b/Source/WebCore/WebCore.vcxproj/WebCore.vcxproj.filters
index 3aa56ed..07eb529 100644
--- a/Source/WebCore/WebCore.vcxproj/WebCore.vcxproj.filters
+++ b/Source/WebCore/WebCore.vcxproj/WebCore.vcxproj.filters
@@ -2930,23 +2930,20 @@ ï»¿<?xml version="1.0" encoding="utf-8"?>
     </ClCompile>
     <ClCompile Include="..\rendering\svg\SVGTextRunRenderingContext.cpp">
       <Filter>rendering\svg</Filter>
     </ClCompile>
     <ClCompile Include="..\rendering\TextPainter.cpp">
       <Filter>rendering</Filter>
     </ClCompile>
     <ClCompile Include="..\replay\ReplayableTimer.cpp">
       <Filter>replay</Filter>
     </ClCompile>
-    <ClCompile Include="..\replay\UserInputBridge.cpp">
-      <Filter>replay</Filter>
-    </ClCompile>
     <ClCompile Include="..\xml\DOMParser.cpp">
       <Filter>xml</Filter>
     </ClCompile>
     <ClCompile Include="..\xml\NativeXPathNSResolver.cpp">
       <Filter>xml</Filter>
     </ClCompile>
     <ClCompile Include="..\xml\XMLErrors.cpp">
       <Filter>xml</Filter>
     </ClCompile>
     <ClCompile Include="..\xml\XMLHttpRequest.cpp">
@@ -9980,23 +9977,20 @@ ï»¿<?xml version="1.0" encoding="utf-8"?>
     </ClInclude>
     <ClInclude Include="..\rendering\svg\SVGTextQuery.h">
       <Filter>rendering\svg</Filter>
     </ClInclude>
     <ClInclude Include="..\rendering\svg\SVGTextRunRenderingContext.h">
       <Filter>rendering\svg</Filter>
     </ClInclude>
     <ClInclude Include="..\replay\ReplayableTimer.h">
       <Filter>replay</Filter>
     </ClInclude>
-    <ClInclude Include="..\replay\UserInputBridge.h">
-      <Filter>replay</Filter>
-    </ClInclude>
     <ClInclude Include="..\xml\DOMParser.h">
       <Filter>xml</Filter>
     </ClInclude>
     <ClInclude Include="..\xml\NativeXPathNSResolver.h">
       <Filter>xml</Filter>
     </ClInclude>
     <ClInclude Include="..\xml\XMLErrors.h">
       <Filter>xml</Filter>
     </ClInclude>
     <ClInclude Include="..\xml\XMLHttpRequest.h">
diff --git a/Source/WebCore/WebCore.xcodeproj/project.pbxproj b/Source/WebCore/WebCore.xcodeproj/project.pbxproj
index 92e1ca9..c7ccb62 100644
--- a/Source/WebCore/WebCore.xcodeproj/project.pbxproj
+++ b/Source/WebCore/WebCore.xcodeproj/project.pbxproj
@@ -3578,22 +3578,20 @@
 		97E4029013A696ED00913D67 /* IconController.h in Headers */ = {isa = PBXBuildFile; fileRef = 97E4028E13A696ED00913D67 /* IconController.h */; settings = {ATTRIBUTES = (Private, ); }; };
 		97F8E665151D4A4B00D2D181 /* WorkerGlobalScopeNotifications.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 97F8E661151D4A3F00D2D181 /* WorkerGlobalScopeNotifications.cpp */; };
 		97F8E666151D4A4E00D2D181 /* WorkerGlobalScopeNotifications.h in Headers */ = {isa = PBXBuildFile; fileRef = 97F8E662151D4A3F00D2D181 /* WorkerGlobalScopeNotifications.h */; };
 		9831AE4A154225C900FE2644 /* ReferrerPolicy.h in Headers */ = {isa = PBXBuildFile; fileRef = 9831AE49154225A200FE2644 /* ReferrerPolicy.h */; settings = {ATTRIBUTES = (Private, ); }; };
 		984264F112D5280A000D88A4 /* LinkLoaderClient.h in Headers */ = {isa = PBXBuildFile; fileRef = 984264EF12D5280A000D88A4 /* LinkLoaderClient.h */; };
 		985BB96D13A94058007A0B69 /* LinkRelAttribute.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 985BB96B13A94058007A0B69 /* LinkRelAttribute.cpp */; };
 		985BB96E13A94058007A0B69 /* LinkRelAttribute.h in Headers */ = {isa = PBXBuildFile; fileRef = 985BB96C13A94058007A0B69 /* LinkRelAttribute.h */; };
 		98CE4326129E00BD005821DC /* LinkLoader.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 98CE4325129E00BD005821DC /* LinkLoader.cpp */; };
 		98CE432A129E00E5005821DC /* LinkLoader.h in Headers */ = {isa = PBXBuildFile; fileRef = 98CE4329129E00E5005821DC /* LinkLoader.h */; };
 		98EB1F951313FE0500D0E1EA /* NotImplemented.h in Headers */ = {isa = PBXBuildFile; fileRef = 98EB1F941313FE0500D0E1EA /* NotImplemented.h */; settings = {ATTRIBUTES = (Private, ); }; };
-		9920398218B95BC600B39AF9 /* UserInputBridge.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 9920398018B95BC600B39AF9 /* UserInputBridge.cpp */; };
-		9920398318B95BC600B39AF9 /* UserInputBridge.h in Headers */ = {isa = PBXBuildFile; fileRef = 9920398118B95BC600B39AF9 /* UserInputBridge.h */; settings = {ATTRIBUTES = (Private, ); }; };
 		996231F318D18AC300C03FDA /* InspectorWebBackendCommands.js in Headers */ = {isa = PBXBuildFile; fileRef = 996231F118D189BD00C03FDA /* InspectorWebBackendCommands.js */; };
 		996231F418D22FA200C03FDA /* InspectorWebBackendCommands.js in Copy Generated Headers */ = {isa = PBXBuildFile; fileRef = 996231F118D189BD00C03FDA /* InspectorWebBackendCommands.js */; };
 		99C7CCB318C663E40032E413 /* MemoizedDOMResult.h in Headers */ = {isa = PBXBuildFile; fileRef = 99C7CCB218C663E40032E413 /* MemoizedDOMResult.h */; settings = {ATTRIBUTES = (Private, ); }; };
 		99C7CCB518C6B8990032E413 /* MemoizedDOMResult.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 99C7CCB418C6B8990032E413 /* MemoizedDOMResult.cpp */; };
 		99CC0B4E18BE9849006CEBCC /* CapturingInputCursor.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 99CC0B3918BE9849006CEBCC /* CapturingInputCursor.cpp */; };
 		99CC0B4F18BE9849006CEBCC /* CapturingInputCursor.h in Headers */ = {isa = PBXBuildFile; fileRef = 99CC0B3A18BE9849006CEBCC /* CapturingInputCursor.h */; };
 		99CC0B5018BE9849006CEBCC /* EventLoopInputDispatcher.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 99CC0B3B18BE9849006CEBCC /* EventLoopInputDispatcher.cpp */; };
 		99CC0B5118BE9849006CEBCC /* EventLoopInputDispatcher.h in Headers */ = {isa = PBXBuildFile; fileRef = 99CC0B3C18BE9849006CEBCC /* EventLoopInputDispatcher.h */; settings = {ATTRIBUTES = (Private, ); }; };
 		99CC0B5218BE9849006CEBCC /* FunctorInputCursor.h in Headers */ = {isa = PBXBuildFile; fileRef = 99CC0B3D18BE9849006CEBCC /* FunctorInputCursor.h */; };
 		99CC0B5318BE9849006CEBCC /* ReplayController.cpp in Sources */ = {isa = PBXBuildFile; fileRef = 99CC0B3E18BE9849006CEBCC /* ReplayController.cpp */; };
@@ -10725,22 +10723,20 @@
 		97F8E661151D4A3F00D2D181 /* WorkerGlobalScopeNotifications.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = WorkerGlobalScopeNotifications.cpp; sourceTree = "<group>"; };
 		97F8E662151D4A3F00D2D181 /* WorkerGlobalScopeNotifications.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = WorkerGlobalScopeNotifications.h; sourceTree = "<group>"; };
 		97F8E663151D4A3F00D2D181 /* WorkerGlobalScopeNotifications.idl */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = text; path = WorkerGlobalScopeNotifications.idl; sourceTree = "<group>"; };
 		9831AE49154225A200FE2644 /* ReferrerPolicy.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = ReferrerPolicy.h; sourceTree = "<group>"; };
 		984264EF12D5280A000D88A4 /* LinkLoaderClient.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = LinkLoaderClient.h; sourceTree = "<group>"; };
 		985BB96B13A94058007A0B69 /* LinkRelAttribute.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = LinkRelAttribute.cpp; sourceTree = "<group>"; };
 		985BB96C13A94058007A0B69 /* LinkRelAttribute.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = LinkRelAttribute.h; sourceTree = "<group>"; };
 		98CE4325129E00BD005821DC /* LinkLoader.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = LinkLoader.cpp; sourceTree = "<group>"; };
 		98CE4329129E00E5005821DC /* LinkLoader.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = LinkLoader.h; sourceTree = "<group>"; };
 		98EB1F941313FE0500D0E1EA /* NotImplemented.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = NotImplemented.h; sourceTree = "<group>"; };
-		9920398018B95BC600B39AF9 /* UserInputBridge.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = UserInputBridge.cpp; sourceTree = "<group>"; };
-		9920398118B95BC600B39AF9 /* UserInputBridge.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = UserInputBridge.h; sourceTree = "<group>"; };
 		996231F118D189BD00C03FDA /* InspectorWebBackendCommands.js */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.javascript; path = InspectorWebBackendCommands.js; sourceTree = "<group>"; };
 		99C7CCB218C663E40032E413 /* MemoizedDOMResult.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = MemoizedDOMResult.h; sourceTree = "<group>"; };
 		99C7CCB418C6B8990032E413 /* MemoizedDOMResult.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = MemoizedDOMResult.cpp; sourceTree = "<group>"; };
 		99CC0B3918BE9849006CEBCC /* CapturingInputCursor.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = CapturingInputCursor.cpp; sourceTree = "<group>"; };
 		99CC0B3A18BE9849006CEBCC /* CapturingInputCursor.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = CapturingInputCursor.h; sourceTree = "<group>"; };
 		99CC0B3B18BE9849006CEBCC /* EventLoopInputDispatcher.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = EventLoopInputDispatcher.cpp; sourceTree = "<group>"; };
 		99CC0B3C18BE9849006CEBCC /* EventLoopInputDispatcher.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = EventLoopInputDispatcher.h; sourceTree = "<group>"; };
 		99CC0B3D18BE9849006CEBCC /* FunctorInputCursor.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = FunctorInputCursor.h; sourceTree = "<group>"; };
 		99CC0B3E18BE9849006CEBCC /* ReplayController.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = ReplayController.cpp; sourceTree = "<group>"; };
 		99CC0B3F18BE9849006CEBCC /* ReplayController.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = ReplayController.h; sourceTree = "<group>"; };
@@ -18332,22 +18328,20 @@
 				99CC0B4618BE9849006CEBCC /* ReplaySessionSegment.cpp */,
 				99CC0B4718BE9849006CEBCC /* ReplaySessionSegment.h */,
 				C4D4F5271975C88B003EF5BC /* ReplayableTimer.cpp */,
 				C4D4F5281975C88B003EF5BC /* ReplayableTimer.h */,
 				C4D4F5291975C88B003EF5BC /* ReplayableTimers.cpp */,
 				C4D4F52A1975C88B003EF5BC /* ReplayableTimers.h */,
 				99CC0B4018BE9849006CEBCC /* ReplayingInputCursor.cpp */,
 				99CC0B4118BE9849006CEBCC /* ReplayingInputCursor.h */,
 				99CC0B4818BE9849006CEBCC /* SegmentedInputStorage.cpp */,
 				99CC0B4918BE9849006CEBCC /* SegmentedInputStorage.h */,
-				9920398018B95BC600B39AF9 /* UserInputBridge.cpp */,
-				9920398118B95BC600B39AF9 /* UserInputBridge.h */,
 				99CC0B4C18BE9849006CEBCC /* WebInputs.json */,
 				99CC0B4A18BE9849006CEBCC /* WebReplayInputCoders.cpp */,
 				99CC0B4B18BE9849006CEBCC /* WebReplayInputCoders.h */,
 				99CC0B4218BE9849006CEBCC /* WebReplayInputCreationMethods.cpp */,
 				99CC0B4318BE9849006CEBCC /* WebReplayInputDispatchMethods.cpp */,
 			);
 			path = replay;
 			sourceTree = "<group>";
 		};
 		A148328B187F506800DA63A6 /* wak */ = {
@@ -26370,21 +26364,20 @@
 				F55B3DDE1251F12D003EF269 /* URLInputType.h in Headers */,
 				A72763BF16689BFB002FCACB /* UserActionElementSet.h in Headers */,
 				868160D618766A130021E79D /* UserActivity.h in Headers */,
 				26255F0318878E110006E1FD /* UserAgent.h in Headers */,
 				CDAB6D3117C9259500C60B34 /* UserAgentScripts.h in Headers */,
 				656581B209D14EE6000E61D7 /* UserAgentStyleSheets.h in Headers */,
 				1AE79D43188DB61F002239C2 /* UserContentController.h in Headers */,
 				003F1FEA11E6AB43008258D9 /* UserContentTypes.h in Headers */,
 				BCACF3BD1072921A00C0C8A3 /* UserContentURLPattern.h in Headers */,
 				2542F4DB1166C25A00E89A86 /* UserGestureIndicator.h in Headers */,
-				9920398318B95BC600B39AF9 /* UserInputBridge.h in Headers */,
 				078E092E17D14D1C00420AA1 /* UserMediaClient.h in Headers */,
 				078E092F17D14D1C00420AA1 /* UserMediaController.h in Headers */,
 				078E093017D14D1C00420AA1 /* UserMediaRequest.h in Headers */,
 				BCA2B061105047600043BD1C /* UserScript.h in Headers */,
 				BCA2B08B10505BCD0043BD1C /* UserScriptTypes.h in Headers */,
 				BC8BF151105813BF00A40A07 /* UserStyleSheet.h in Headers */,
 				BC8BF15A1058141800A40A07 /* UserStyleSheetTypes.h in Headers */,
 				BCDF317C11F8D683003C5BF8 /* UserTypingGestureIndicator.h in Headers */,
 				7C74D43818823B1900E5ED57 /* UTextProvider.h in Headers */,
 				7C74D43418823A9300E5ED57 /* UTextProviderLatin1.h in Headers */,
@@ -29679,21 +29672,20 @@
 				A769E96A16689D0C005D4529 /* UserActionElementSet.cpp in Sources */,
 				868160D418766A0A0021E79D /* UserActivity.cpp in Sources */,
 				868160D518766A0E0021E79D /* UserActivityMac.mm in Sources */,
 				26255F0018878DFF0006E1FD /* UserAgentIOS.mm in Sources */,
 				26255F0418878E110006E1FD /* UserAgentMac.mm in Sources */,
 				CDAB6D3217C9259500C60B34 /* UserAgentScriptsData.cpp in Sources */,
 				65DF326109D1E199000BE325 /* UserAgentStyleSheetsData.cpp in Sources */,
 				1AE79D42188DB61F002239C2 /* UserContentController.cpp in Sources */,
 				BCACF3BC1072921A00C0C8A3 /* UserContentURLPattern.cpp in Sources */,
 				2542F4DA1166C25A00E89A86 /* UserGestureIndicator.cpp in Sources */,
-				9920398218B95BC600B39AF9 /* UserInputBridge.cpp in Sources */,
 				078E091217D14CEE00420AA1 /* UserMediaController.cpp in Sources */,
 				078E091317D14CEE00420AA1 /* UserMediaRequest.cpp in Sources */,
 				BCDF317B11F8D683003C5BF8 /* UserTypingGestureIndicator.cpp in Sources */,
 				7C74D43718823B1900E5ED57 /* UTextProvider.cpp in Sources */,
 				7C74D43318823A9300E5ED57 /* UTextProviderLatin1.cpp in Sources */,
 				7C74D43B1882400400E5ED57 /* UTextProviderUTF16.cpp in Sources */,
 				1FAFBF1815A5FA6E00083A20 /* UTIUtilities.mm in Sources */,
 				2E3BBF071162DA1100B9409A /* UUID.cpp in Sources */,
 				F5A154271279534D00D0B0C0 /* ValidationMessage.cpp in Sources */,
 				FD3160AE12B026F700C1A359 /* VectorMath.cpp in Sources */,
diff --git a/Source/WebCore/page/Page.cpp b/Source/WebCore/page/Page.cpp
index c9e523d..2c183b2 100644
--- a/Source/WebCore/page/Page.cpp
+++ b/Source/WebCore/page/Page.cpp
@@ -75,21 +75,20 @@
 #include "ScriptController.h"
 #include "ScrollingCoordinator.h"
 #include "Settings.h"
 #include "SharedBuffer.h"
 #include "StorageArea.h"
 #include "StorageNamespace.h"
 #include "StyleResolver.h"
 #include "SubframeLoader.h"
 #include "TextResourceDecoder.h"
 #include "UserContentController.h"
-#include "UserInputBridge.h"
 #include "ViewStateChangeObserver.h"
 #include "VisitedLinkState.h"
 #include "VisitedLinkStore.h"
 #include "VoidCallback.h"
 #include "Widget.h"
 #include <wtf/HashMap.h>
 #include <wtf/RefCountedLeakCounter.h>
 #include <wtf/StdLibExtras.h>
 #include <wtf/text/Base64.h>
 #include <wtf/text/StringHash.h>
@@ -127,21 +126,20 @@ static const ViewState::Flags PageInitialViewState = ViewState::IsVisible | View
 Page::Page(PageClients& pageClients)
     : m_chrome(std::make_unique<Chrome>(*this, *pageClients.chromeClient))
     , m_dragCaretController(std::make_unique<DragCaretController>())
 #if ENABLE(DRAG_SUPPORT)
     , m_dragController(std::make_unique<DragController>(*this, *pageClients.dragClient))
 #endif
     , m_focusController(std::make_unique<FocusController>(*this, PageInitialViewState))
 #if ENABLE(CONTEXT_MENUS)
     , m_contextMenuController(std::make_unique<ContextMenuController>(*this, *pageClients.contextMenuClient))
 #endif
-    , m_userInputBridge(std::make_unique<UserInputBridge>(*this))
 #if ENABLE(WEB_REPLAY)
     , m_replayController(std::make_unique<ReplayController>(*this, *pageClients.replayClient))
 #endif
 #if ENABLE(INSPECTOR)
     , m_inspectorController(std::make_unique<InspectorController>(*this, pageClients.inspectorClient))
 #endif
 #if ENABLE(POINTER_LOCK)
     , m_pointerLockController(std::make_unique<PointerLockController>(*this))
 #endif
     , m_settings(Settings::create(this))
diff --git a/Source/WebCore/page/Page.h b/Source/WebCore/page/Page.h
index 5b92753..1aa9cb2 100644
--- a/Source/WebCore/page/Page.h
+++ b/Source/WebCore/page/Page.h
@@ -68,21 +68,20 @@ class Color;
 class ContextMenuClient;
 class ContextMenuController;
 class DragCaretController;
 class DragClient;
 class DragController;
 class EditorClient;
 class FocusController;
 class Frame;
 class FrameLoaderClient;
 class HistoryItem;
-class UserInputBridge;
 class InspectorClient;
 class InspectorController;
 class MainFrame;
 class MediaCanStartListener;
 class PageActivityAssertionToken;
 class PageConsoleClient;
 class PageDebuggable;
 class PageGroup;
 class PageThrottler;
 class PlugInClient;
@@ -195,21 +194,20 @@ public:
 
     Chrome& chrome() const { return *m_chrome; }
     DragCaretController& dragCaretController() const { return *m_dragCaretController; }
 #if ENABLE(DRAG_SUPPORT)
     DragController& dragController() const { return *m_dragController; }
 #endif
     FocusController& focusController() const { return *m_focusController; }
 #if ENABLE(CONTEXT_MENUS)
     ContextMenuController& contextMenuController() const { return *m_contextMenuController; }
 #endif
-    UserInputBridge& userInputBridge() const { return *m_userInputBridge; }
 #if ENABLE(WEB_REPLAY)
     ReplayController& replayController() const { return *m_replayController; }
 #endif
 #if ENABLE(INSPECTOR)
     InspectorController& inspectorController() const { return *m_inspectorController; }
 #endif
 #if ENABLE(POINTER_LOCK)
     PointerLockController& pointerLockController() const { return *m_pointerLockController; }
 #endif
     ValidationMessageClient* validationMessageClient() const { return m_validationMessageClient; }
@@ -469,21 +467,20 @@ private:
     const std::unique_ptr<Chrome> m_chrome;
     const std::unique_ptr<DragCaretController> m_dragCaretController;
 
 #if ENABLE(DRAG_SUPPORT)
     const std::unique_ptr<DragController> m_dragController;
 #endif
     const std::unique_ptr<FocusController> m_focusController;
 #if ENABLE(CONTEXT_MENUS)
     const std::unique_ptr<ContextMenuController> m_contextMenuController;
 #endif
-    const std::unique_ptr<UserInputBridge> m_userInputBridge;
 #if ENABLE(WEB_REPLAY)
     const std::unique_ptr<ReplayController> m_replayController;
 #endif
 #if ENABLE(INSPECTOR)
     const std::unique_ptr<InspectorController> m_inspectorController;
 #endif
 #if ENABLE(POINTER_LOCK)
     const std::unique_ptr<PointerLockController> m_pointerLockController;
 #endif
     WEBCORE_EXPORT RefPtr<ScrollingCoordinator> m_scrollingCoordinator;
diff --git a/Source/WebCore/replay/ReplayController.cpp b/Source/WebCore/replay/ReplayController.cpp
index 5340e5a..7c963b3 100644
--- a/Source/WebCore/replay/ReplayController.cpp
+++ b/Source/WebCore/replay/ReplayController.cpp
@@ -40,21 +40,20 @@
 #include "Logging.h"
 #include "MainFrame.h"
 #include "Page.h"
 #include "ReplayClient.h"
 #include "ReplaySession.h"
 #include "ReplaySessionSegment.h"
 #include "ReplayingInputCursor.h"
 #include "ScriptController.h"
 #include "WebReplayInputCoders.h"
 #include "Settings.h"
-#include "UserInputBridge.h"
 #include "WebReplayInputs.h"
 #include <replay/EmptyInputCursor.h>
 #include <wtf/text/CString.h>
 
 #if ENABLE(ASYNC_SCROLLING)
 #include "ScrollingCoordinator.h"
 #endif
 
 namespace WebCore {
 
@@ -151,33 +150,30 @@ void ReplayController::setSessionState(SessionState state)
 {
     ASSERT(state != m_sessionState);
 
     LOG(WebReplay, "%-20s SessionState transition: %10s --> %10s.\n", "ReplayController", sessionStateToString(m_sessionState), sessionStateToString(state));
 
     switch (m_sessionState) {
     case SessionState::Capturing:
         ASSERT(state == SessionState::Inactive);
 
         m_sessionState = state;
-        m_page.userInputBridge().setState(UserInputBridge::State::Open);
         break;
 
     case SessionState::Inactive:
         m_sessionState = state;
-        m_page.userInputBridge().setState(state == SessionState::Capturing ? UserInputBridge::State::Capturing : UserInputBridge::State::Replaying);
         break;
 
     case SessionState::Replaying:
         ASSERT(state == SessionState::Inactive);
 
         m_sessionState = state;
-        m_page.userInputBridge().setState(UserInputBridge::State::Open);
         break;
     }
 }
 
 void ReplayController::setSegmentState(SegmentState state)
 {
     ASSERT(state != m_segmentState);
 
     LOG(WebReplay, "%-20s SegmentState transition: %10s --> %10s.\n", "ReplayController", segmentStateToString(m_segmentState), segmentStateToString(state));
 
diff --git a/Source/WebCore/replay/UserInputBridge.cpp b/Source/WebCore/replay/UserInputBridge.cpp
deleted file mode 100644
index 233b6e8..0000000
--- a/Source/WebCore/replay/UserInputBridge.cpp
+++ /dev/null
@@ -1,157 +0,0 @@
-/*
- * Copyright (C) 2013 University of Washington. All rights reserved.
- * Copyright (C) 2014 Apple Inc. All rights reserved.
- *
- * Redistribution and use in source and binary forms, with or without
- * modification, are permitted provided that the following conditions
- * are met:
- *
- * 1.  Redistributions of source code must retain the above copyright
- *     notice, this list of conditions and the following disclaimer.
- * 2.  Redistributions in binary form must reproduce the above copyright
- *     notice, this list of conditions and the following disclaimer in the
- *     documentation and/or other materials provided with the distribution.
- *
- * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS
- * IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
- * TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
- * PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
- * HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
- * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
- * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
- * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
- * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
- * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
- * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
- */
-
-#include "config.h"
-#include "UserInputBridge.h"
-
-#include "EventHandler.h"
-#include "FocusController.h"
-#include "Frame.h"
-#include "FrameLoadRequest.h"
-#include "MainFrame.h"
-#include "Page.h"
-
-#if ENABLE(WEB_REPLAY)
-#include "ReplayController.h"
-#include "WebReplayInputCoders.h"
-#include "WebReplayInputs.h"
-#include <replay/InputCursor.h>
-#endif
-
-#define EARLY_RETURN_IF_SHOULD_IGNORE_INPUT \
-    do { \
-        if (inputSource == InputSource::User && m_state == UserInputBridge::State::Replaying) \
-            return true; \
-    } while (false)
-
-#define EARLY_VOID_RETURN_IF_SHOULD_IGNORE_INPUT \
-do { \
-if (inputSource == InputSource::User && m_state == UserInputBridge::State::Replaying) \
-return; \
-} while (false)
-
-
-namespace WebCore {
-
-UserInputBridge::UserInputBridge(Page& page)
-    : m_page(page)
-#if ENABLE(WEB_REPLAY)
-    , m_state(UserInputBridge::State::Open)
-#endif
-{
-}
-
-#if ENABLE(WEB_REPLAY)
-InputCursor& UserInputBridge::activeCursor() const
-{
-    return m_page.replayController().activeInputCursor();
-}
-#endif
-
-void UserInputBridge::focusSetActive(bool active, InputSource)
-{
-    m_page.focusController().setActive(active);
-}
-
-void UserInputBridge::focusSetFocused(bool focused, InputSource)
-{
-    m_page.focusController().setFocused(focused);
-}
-
-void UserInputBridge::loadRequest(const FrameLoadRequest& request, InputSource inputSource)
-{
-#if ENABLE(WEB_REPLAY)
-    EARLY_VOID_RETURN_IF_SHOULD_IGNORE_INPUT;
-
-    InputCursor& cursor = activeCursor();
-    if (cursor.isCapturing()) {
-        std::unique_ptr<FrameLoadRequest> ownedRequest = std::make_unique<FrameLoadRequest>(request);
-        cursor.appendInput<LoadURLRequest>(std::move(ownedRequest));
-    }
-
-    EventLoopInputExtent extent(cursor);
-#else
-    UNUSED_PARAM(inputSource);
-#endif
-
-    m_page.mainFrame().loader().load(request);
-}
-
-void UserInputBridge::reloadFrame(Frame* frame, bool endToEndReload, InputSource inputSource)
-{
-#if ENABLE(WEB_REPLAY)
-    EARLY_VOID_RETURN_IF_SHOULD_IGNORE_INPUT;
-
-    InputCursor& cursor = activeCursor();
-    if (cursor.isCapturing()) {
-        unsigned long frameIndex = frameIndexFromFrame(frame);
-        cursor.appendInput<ReloadFrame>(frameIndex, endToEndReload);
-    }
-    EventLoopInputExtent extent(cursor);
-#else
-    UNUSED_PARAM(inputSource);
-#endif
-
-    frame->loader().reload(endToEndReload);
-}
-
-void UserInputBridge::stopLoadingFrame(Frame* frame, InputSource inputSource)
-{
-#if ENABLE(WEB_REPLAY)
-    EARLY_VOID_RETURN_IF_SHOULD_IGNORE_INPUT;
-
-    InputCursor& cursor = activeCursor();
-    if (cursor.isCapturing()) {
-        unsigned long frameIndex = frameIndexFromFrame(frame);
-        cursor.appendInput<StopLoadingFrame>(frameIndex);
-    }
-    EventLoopInputExtent extent(cursor);
-#else
-    UNUSED_PARAM(inputSource);
-#endif
-
-    frame->loader().stopForUserCancel();
-}
-
-bool UserInputBridge::tryClosePage(InputSource inputSource)
-{
-#if ENABLE(WEB_REPLAY)
-    EARLY_RETURN_IF_SHOULD_IGNORE_INPUT;
-
-    InputCursor& cursor = activeCursor();
-    if (cursor.isCapturing())
-        cursor.appendInput<TryClosePage>();
-
-    EventLoopInputExtent extent(cursor);
-#else
-    UNUSED_PARAM(inputSource);
-#endif
-
-    return m_page.mainFrame().loader().shouldClose();
-}
-
-} // namespace WebCore
diff --git a/Source/WebCore/replay/UserInputBridge.h b/Source/WebCore/replay/UserInputBridge.h
deleted file mode 100644
index eefc8c8..0000000
--- a/Source/WebCore/replay/UserInputBridge.h
+++ /dev/null
@@ -1,88 +0,0 @@
-/*
- * Copyright (C) 2012, 2013 University of Washington. All rights reserved.
- * Copyright (C) 2014 Apple Inc. All rights reserved.
- *
- * Redistribution and use in source and binary forms, with or without
- * modification, are permitted provided that the following conditions
- * are met:
- *
- * 1.  Redistributions of source code must retain the above copyright
- *     notice, this list of conditions and the following disclaimer.
- * 2.  Redistributions in binary form must reproduce the above copyright
- *     notice, this list of conditions and the following disclaimer in the
- *     documentation and/or other materials provided with the distribution.
- *
- * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS
- * IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
- * TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
- * PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
- * HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
- * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
- * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
- * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
- * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
- * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
- * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
- */
-
-#ifndef UserInputBridge_h
-#define UserInputBridge_h
-
-#include <wtf/Noncopyable.h>
-
-namespace JSC {
-class InputCursor;
-}
-
-namespace WebCore {
-
-struct FrameLoadRequest;
-
-class Frame;
-class Page;
-
-// Real user inputs come from WebKit or WebKit2.
-// Synthetic inputs come from within WebCore (i.e., from web replay or fake mouse moves).
-enum class InputSource {
-    User,
-    Synthetic
-};
-
-class UserInputBridge {
-    WTF_MAKE_NONCOPYABLE(UserInputBridge);
-public:
-    UserInputBridge(Page&);
-
-#if ENABLE(WEB_REPLAY)
-    enum class State {
-        Capturing,
-        Open,
-        Replaying,
-    };
-
-    void setState(State bridgeState) { m_state = bridgeState; }
-    State state() const { return m_state; }
-
-    JSC::InputCursor& activeCursor() const;
-#endif
-
-    // User input APIs.
-    WEBCORE_EXPORT void focusSetActive(bool active, InputSource source = InputSource::User);
-    WEBCORE_EXPORT void focusSetFocused(bool focused, InputSource source = InputSource::User);
-
-    // Navigation APIs.
-    WEBCORE_EXPORT void loadRequest(const FrameLoadRequest&, InputSource source = InputSource::User);
-    WEBCORE_EXPORT void reloadFrame(Frame*, bool endToEndReload, InputSource source = InputSource::User);
-    WEBCORE_EXPORT void stopLoadingFrame(Frame*, InputSource source = InputSource::User);
-    WEBCORE_EXPORT bool tryClosePage(InputSource source = InputSource::User);
-
-private:
-    Page& m_page;
-#if ENABLE(WEB_REPLAY)
-    State m_state;
-#endif
-};
-
-} // namespace WebCore
-
-#endif // UserInputBridge_h
diff --git a/Source/WebCore/replay/WebInputs.json b/Source/WebCore/replay/WebInputs.json
index c285540..5c9af24 100644
--- a/Source/WebCore/replay/WebInputs.json
+++ b/Source/WebCore/replay/WebInputs.json
@@ -244,37 +244,20 @@
         },
         {
             "name": "FetchPluginData",
             "description": "Plugin data was requested through DOMPluginArray or DOMMimeTypeArray.",
             "queue": "SCRIPT_MEMOIZED",
             "members": [
                 { "name": "pluginData", "type": "PluginData" }
             ]
         },
         {
-            "name": "LoadURLRequest",
-            "description": "The embedder requested that the specified frame start a new load.",
-            "queue": "EVENT_LOOP",
-            "members": [
-                { "name": "loadRequest", "type": "FrameLoadRequest" }
-            ]
-        },
-        {
-            "name": "ReloadFrame",
-            "description": "The embedder requested that the specified frame should reload.",
-            "queue": "EVENT_LOOP",
-            "members": [
-                { "name": "frameIndex", "type": "uint32_t" },
-                { "name": "endToEndReload", "type": "bool" }
-            ]
-        },
-        {
             "name": "ResourceLoaderDidFail",
             "description": "A resource loader failed to load its resource.",
             "queue": "EVENT_LOOP",
             "members": [
                 { "name": "ordinal", "type": "uint64_t" },
                 { "name": "frameIndex", "type": "uint32_t" },
                 { "name": "error", "type": "ResourceError" }
             ]
         },
         {
@@ -311,27 +294,13 @@
         {
             "name": "ResourceLoaderDidReceiveData",
             "description": "A resource loader received some data.",
             "queue": "EVENT_LOOP",
             "members": [
                 { "name": "ordinal", "type": "uint64_t" },
                 { "name": "frameIndex", "type": "uint32_t" },
                 { "name": "buffer", "type": "SharedBuffer" },
                 { "name": "encodedLength", "type": "int32_t" }
             ]
-        },
-        {
-            "name": "StopLoadingFrame",
-            "description": "The embedder requested that the specified frame should stop loading.",
-            "queue": "EVENT_LOOP",
-            "members": [
-                { "name": "frameIndex", "type": "uint32_t" }
-            ]
-        },
-        {
-            "name": "TryClosePage",
-            "description": "The embedder requested that the page should be closed (subject to beforeunload cancellation).",
-            "queue": "EVENT_LOOP",
-            "members": [ ]
         }
     ]
 }
diff --git a/Source/WebCore/replay/WebReplayInputCoders.h b/Source/WebCore/replay/WebReplayInputCoders.h
index 9101b9c8..86e744a 100644
--- a/Source/WebCore/replay/WebReplayInputCoders.h
+++ b/Source/WebCore/replay/WebReplayInputCoders.h
@@ -53,23 +53,23 @@ class ResourceResponse;
 class SecurityOrigin;
 class SerializedScriptValue;
 class SharedBuffer;
 class URL;
 
 #if USE(APPKIT)
 struct KeypressCommand;
 #endif
 
 uint32_t frameIndexFromDocument(const Document*);
-uint32_t frameIndexFromFrame(const Frame*);
+WEBCORE_EXPORT uint32_t frameIndexFromFrame(const Frame*);
 Document* documentFromFrameIndex(Page*, uint32_t frameIndex);
-Frame* frameFromFrameIndex(Page*, uint32_t frameIndex);
+WEBCORE_EXPORT Frame* frameFromFrameIndex(Page*, uint32_t frameIndex);
 
 } // namespace WebCore
 
 // Template specializations must be defined in the same namespace as the template declaration.
 namespace JSC {
 
 template<> struct EncodingTraits<WebCore::FloatSize> {
     typedef WebCore::FloatSize DecodedType;
 
     static EncodedValue encodeValue(const WebCore::FloatSize& value);
diff --git a/Source/WebCore/replay/WebReplayInputDispatchMethods.cpp b/Source/WebCore/replay/WebReplayInputDispatchMethods.cpp
index 595f01c..74bf5af 100644
--- a/Source/WebCore/replay/WebReplayInputDispatchMethods.cpp
+++ b/Source/WebCore/replay/WebReplayInputDispatchMethods.cpp
@@ -39,21 +39,20 @@
 #include "NavigationScheduler.h"
 #include "Page.h"
 #include "ReplayController.h"
 #include "ReplayableTimers.h"
 #include "ResourceError.h"
 #include "ResourceLoader.h"
 #include "ResourceRequest.h"
 #include "WebReplayInputCoders.h"
 #include "WebReplayInputs.h"
 #include "URL.h"
-#include "UserInputBridge.h"
 #include <cinttypes>
 
 namespace WebCore {
 
 static ResourceLoader* resourceLoaderForOrdinal(Page& page, unsigned long ordinal, int frameIndex)
 {
     Frame* frame = frameFromFrameIndex(&page, frameIndex);
     ASSERT(frame);
 
     const Vector<unsigned long>& usedIdentifiers = frame->mainFrame().loader().activeDocumentLoader()->usedIdentifiers();
@@ -71,46 +70,20 @@ void BeginSegmentSentinel::dispatchOnPage(Page&)
 void EndSegmentSentinel::dispatchOnPage(Page&)
 {
 }
 
 // Navigation inputs.
 void InitialNavigation::dispatchOnPage(Page& page)
 {
     page.mainFrame().navigationScheduler().scheduleLocationChange(m_securityOrigin.get(), m_url, m_referrer);
 }
 
-void LoadURLRequest::dispatchOnPage(Page& page)
-{
-    page.userInputBridge().loadRequest(*m_loadRequest);
-}
-
-void ReloadFrame::dispatchOnPage(Page& page)
-{
-    Frame* frame = frameFromFrameIndex(&page, m_frameIndex);
-    ASSERT(frame);
-
-    page.userInputBridge().reloadFrame(frame, m_endToEndReload, InputSource::Synthetic);
-}
-
-void StopLoadingFrame::dispatchOnPage(Page& page)
-{
-    Frame* frame = frameFromFrameIndex(&page, m_frameIndex);
-    ASSERT(frame);
-
-    page.userInputBridge().stopLoadingFrame(frame, InputSource::Synthetic);
-}
-
-void TryClosePage::dispatchOnPage(Page& page)
-{
-    page.userInputBridge().tryClosePage(InputSource::Synthetic);
-}
-
 void InitializeHistory::dispatchOnPage(Page& page)
 {
     return; // HACK
 
     // FIXME: Load the empty document, so that when we prune the back-forward list it
     // is the single remaining entry. <https://webkit.org/b/131989>
     page.backForward().clear();
 
     for (RefPtr<HistoryItem> historyEntry : m_entries)
         page.backForward().addItem(historyEntry->copy());
diff --git a/Source/WebKit2/WebProcess/Replay/WKInputs.json b/Source/WebKit2/WebProcess/Replay/WKInputs.json
index 75960a1..9ee7dd3 100644
--- a/Source/WebKit2/WebProcess/Replay/WKInputs.json
+++ b/Source/WebKit2/WebProcess/Replay/WKInputs.json
@@ -1,20 +1,27 @@
 {
     "types": {
         "Global": [
+            { "name": "bool", "mode": "SCALAR" },
             { "name": "double", "mode": "SCALAR" },
             { "name": "float", "mode": "SCALAR" },
             { "name": "int8_t", "mode": "SCALAR", "description": "Signed 8-bit integer." },
-            { "name": "uint8_t", "mode": "SCALAR", "description": "Unsigned 8-bit integer." }
+            { "name": "uint8_t", "mode": "SCALAR", "description": "Unsigned 8-bit integer." },
+            { "name": "uint32_t", "mode": "SCALAR", "description": "Unsigned 32-bit integer." }
         ],
         "WebCore": [
             {
+                "name": "FrameLoadRequest", "mode": "OWNED",
+                "flags": ["STRUCT"],
+                "header": "loader/FrameLoadRequest.h"
+            },
+            {
                 "name": "ScrollDirection", "mode": "SCALAR", "storage": "uint8_t",
                 "flags": ["ENUM"],
                 "values": ["ScrollUp", "ScrollDown", "ScrollLeft", "ScrollRight"],
                 "header": "platform/ScrollTypes.h"
             },
             {
                 "name": "ScrollGranularity", "mode": "SCALAR", "storage": "uint8_t",
                 "flags": ["ENUM"],
                 "values": [
                     "ScrollByLine",
@@ -99,20 +106,45 @@
                         "TouchCancel"
                     ]
                 },
                 "header": "Shared/WebEvent.h"
             }
         ]
     },
 
     "inputs": [
         {
+            "name": "HandleFrameLoad",
+            "description": "The embedder requested a specific frame to load a resource.",
+            "queue": "EVENT_LOOP",
+            "members": [
+                { "name": "loadRequest", "type": "FrameLoadRequest" }
+            ]
+        },
+        {
+            "name": "HandleFrameReload",
+            "description": "The embedder requested that the specified frame should reload.",
+            "queue": "EVENT_LOOP",
+            "members": [
+                { "name": "frameIndex", "type": "uint32_t" },
+                { "name": "endToEndReload", "type": "bool" }
+            ]
+        },
+        {
+            "name": "HandleFrameStop",
+            "description": "The embedder requested that the specified frame should stop loading.",
+            "queue": "EVENT_LOOP",
+            "members": [
+                { "name": "frameIndex", "type": "uint32_t" }
+            ]
+        },
+        {
             "name": "HandleMouseEvent",
             "description": "A mouse event is forwarded to the web page.",
             "queue": "EVENT_LOOP",
             "members": [
                 { "name": "mouseEvent", "type": "WebMouseEvent" }
             ]
         },
         {
             "name": "HandleKeyEvent",
             "description": "A keyboard event is forwarded to the web page.",
@@ -130,13 +162,19 @@
                 { "name": "granularity", "type": "ScrollGranularity" }
             ]
         },
         {
             "name": "HandleWheelEvent",
             "description": "A wheel event is forwarded to the web page.",
             "queue": "EVENT_LOOP",
             "members": [
                 { "name": "wheelEvent", "type": "WebWheelEvent" }
             ]
+        },
+        {
+            "name": "TryClosePage",
+            "description": "The embedder requested that the page should be closed (subject to beforeunload cancellation).",
+            "queue": "EVENT_LOOP",
+            "members": [ ]
         }
     ]
 }
diff --git a/Source/WebKit2/WebProcess/Replay/WKReplayInputDispatchMethods.cpp b/Source/WebKit2/WebProcess/Replay/WKReplayInputDispatchMethods.cpp
index c90e5b7..cc24b09 100644
--- a/Source/WebKit2/WebProcess/Replay/WKReplayInputDispatchMethods.cpp
+++ b/Source/WebKit2/WebProcess/Replay/WKReplayInputDispatchMethods.cpp
@@ -23,20 +23,21 @@
  * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF
  * THE POSSIBILITY OF SUCH DAMAGE.
  */
 
 #include "config.h"
 
 #if ENABLE(WEB_REPLAY)
 
 #include "WKReplayInputs.h"
 #include "WebPage.h"
+#include <WebCore/WebReplayInputCoders.h>
 
 namespace WebKit {
 
 void HandleKeyEvent::dispatchOnWebPage(WebPage& page)
 {
     page.handleKeyEvent(keyboardEvent(), WebPage::ActionSource::Synthetic);
 }
 
 void HandleMouseEvent::dispatchOnWebPage(WebPage& page)
 {
@@ -46,13 +47,43 @@ void HandleMouseEvent::dispatchOnWebPage(WebPage& page)
 void HandleScroll::dispatchOnWebPage(WebPage& page)
 {
     page.handleScroll(direction(), granularity(), WebPage::ActionSource::Synthetic);
 }
 
 void HandleWheelEvent::dispatchOnWebPage(WebPage& page)
 {
     page.handleWheelEvent(wheelEvent(), WebPage::ActionSource::Synthetic);
 }
 
+void HandleFrameLoad::dispatchOnWebPage(WebPage& page)
+{
+    page.handleFrameLoad(loadRequest(), WebPage::ActionSource::Synthetic);
+}
+
+void HandleFrameReload::dispatchOnWebPage(WebPage& page)
+{
+    WebCore::Frame* frame = WebCore::frameFromFrameIndex(page.corePage(), m_frameIndex);
+    ASSERT(frame);
+    if (!frame)
+        return;
+
+    page.handleFrameReload(*frame, endToEndReload(), WebPage::ActionSource::Synthetic);
+}
+
+void HandleFrameStop::dispatchOnWebPage(WebPage& page)
+{
+    WebCore::Frame* frame = WebCore::frameFromFrameIndex(page.corePage(), m_frameIndex);
+    ASSERT(frame);
+    if (!frame)
+        return;
+
+    page.handleFrameStop(*frame, WebPage::ActionSource::Synthetic);
+}
+
+void TryClosePage::dispatchOnWebPage(WebPage& page)
+{
+    page.handleTryClose(WebPage::ActionSource::Synthetic);
+}
+
 } // namespace WebKit
 
 #endif // ENABLE(WEB_REPLAY)
diff --git a/Source/WebKit2/WebProcess/WebPage/WebPage.cpp b/Source/WebKit2/WebProcess/WebPage/WebPage.cpp
index 60c7c7b..ad0bf50 100644
--- a/Source/WebKit2/WebProcess/WebPage/WebPage.cpp
+++ b/Source/WebKit2/WebProcess/WebPage/WebPage.cpp
@@ -142,21 +142,20 @@
 #include <WebCore/ScriptController.h>
 #include <WebCore/SerializedScriptValue.h>
 #include <WebCore/SessionID.h>
 #include <WebCore/Settings.h>
 #include <WebCore/ShadowRoot.h>
 #include <WebCore/SharedBuffer.h>
 #include <WebCore/StyleProperties.h>
 #include <WebCore/SubframeLoader.h>
 #include <WebCore/SubstituteData.h>
 #include <WebCore/TextIterator.h>
-#include <WebCore/UserInputBridge.h>
 #include <WebCore/VisiblePosition.h>
 #include <WebCore/VisibleUnits.h>
 #include <WebCore/markup.h>
 #include <bindings/ScriptValue.h>
 #include <profiler/ProfilerDatabase.h>
 #include <runtime/JSCInlines.h>
 #include <runtime/JSCJSValue.h>
 #include <runtime/JSLock.h>
 #include <wtf/RunLoop.h>
 
@@ -985,66 +984,98 @@ void WebPage::close()
     bool isRunningModal = m_isRunningModal;
     m_isRunningModal = false;
 
     // The WebPage can be destroyed by this call.
     WebProcess::shared().removeWebPage(m_pageID);
 
     if (isRunningModal)
         RunLoop::main().stop();
 }
 
+bool WebPage::handleTryClose(ActionSource source)
+{
+#if ENABLE(WEB_REPLAY)
+    InputCursor& cursor = corePage()->replayController().activeInputCursor();
+    if (cursor.isReplaying() && source != ActionSource::Synthetic)
+        return false;
+    if (cursor.isCapturing())
+        cursor.appendInput<TryClosePage>();
+    EventLoopInputExtent extent(cursor);
+#else
+    UNUSED_PARAM(source);
+#endif
+
+    bool shouldClose = m_mainFrame->coreFrame()->loader().shouldClose();
+    if (shouldClose)
+        send(Messages::WebPageProxy::ClosePage(true));
+
+    return shouldClose;
+}
+
 void WebPage::tryClose()
 {
     SendStopResponsivenessTimer stopper(this);
 
-    if (!corePage()->userInputBridge().tryClosePage()) {
+    if (!handleTryClose(ActionSource::User)) {
         send(Messages::WebPageProxy::StopResponsivenessTimer());
         return;
     }
-
-    send(Messages::WebPageProxy::ClosePage(true));
 }
 
 void WebPage::sendClose()
 {
     send(Messages::WebPageProxy::ClosePage(false));
 }
 
 void WebPage::loadURLInFrame(const String& url, uint64_t frameID)
 {
     WebFrame* frame = WebProcess::shared().webFrame(frameID);
     if (!frame)
         return;
 
     frame->coreFrame()->loader().load(FrameLoadRequest(frame->coreFrame(), ResourceRequest(URL(URL(), url))));
 }
 
+void WebPage::handleFrameLoad(const FrameLoadRequest& loadRequest, ActionSource source)
+{
+#if ENABLE(WEB_REPLAY)
+    InputCursor& cursor = corePage()->replayController().activeInputCursor();
+    if (cursor.isReplaying() && source != ActionSource::Synthetic)
+        return;
+    if (cursor.isCapturing())
+        cursor.appendInput<HandleFrameLoad>(std::make_unique<FrameLoadRequest>(loadRequest));
+    EventLoopInputExtent extent(cursor);
+#else
+    UNUSED_PARAM(source);
+#endif
+
+    m_mainFrame->coreFrame()->loader().load(loadRequest);
+}
+
 void WebPage::loadRequest(uint64_t navigationID, const ResourceRequest& request, const SandboxExtension::Handle& sandboxExtensionHandle, IPC::MessageDecoder& decoder)
 {
     SendStopResponsivenessTimer stopper(this);
 
     RefPtr<API::Object> userData;
     InjectedBundleUserMessageDecoder userMessageDecoder(userData);
     if (!decoder.decode(userMessageDecoder))
         return;
 
     m_pendingNavigationID = navigationID;
 
     m_sandboxExtensionTracker.beginLoad(m_mainFrame.get(), sandboxExtensionHandle);
 
     // Let the InjectedBundle know we are about to start the load, passing the user data from the UIProcess
     // to all the client to set up any needed state.
     m_loaderClient.willLoadURLRequest(this, request, userData.get());
-
     // Initate the load in WebCore.
-    corePage()->userInputBridge().loadRequest(FrameLoadRequest(m_mainFrame->coreFrame(), request));
-
+    handleFrameLoad(FrameLoadRequest(m_mainFrame->coreFrame(), request), ActionSource::User);
     ASSERT(!m_pendingNavigationID);
 }
 
 void WebPage::loadDataImpl(uint64_t navigationID, PassRefPtr<SharedBuffer> sharedBuffer, const String& MIMEType, const String& encodingName, const URL& baseURL, const URL& unreachableURL, IPC::MessageDecoder& decoder)
 {
     SendStopResponsivenessTimer stopper(this);
 
     RefPtr<API::Object> userData;
     InjectedBundleUserMessageDecoder userMessageDecoder(userData);
     if (!decoder.decode(userMessageDecoder))
@@ -1098,55 +1129,89 @@ void WebPage::loadPlainTextString(const String& string, IPC::MessageDecoder& dec
 {
     loadString(0, string, ASCIILiteral("text/plain"), blankURL(), URL(), decoder);
 }
 
 void WebPage::loadWebArchiveData(const IPC::DataReference& webArchiveData, IPC::MessageDecoder& decoder)
 {
     RefPtr<SharedBuffer> sharedBuffer = SharedBuffer::create(reinterpret_cast<const char*>(webArchiveData.data()), webArchiveData.size() * sizeof(uint8_t));
     loadDataImpl(0, sharedBuffer, ASCIILiteral("application/x-webarchive"), ASCIILiteral("utf-16"), blankURL(), URL(), decoder);
 }
 
+void WebPage::handleFrameStop(WebCore::Frame& frame, ActionSource source)
+{
+#if ENABLE(WEB_REPLAY)
+    // Don't try to handle any user events if the web content is being replayed.
+    InputCursor& cursor = corePage()->replayController().activeInputCursor();
+    if (cursor.isReplaying() && source != ActionSource::Synthetic)
+        return;
+    if (cursor.isCapturing())
+        cursor.appendInput<HandleFrameStop>(WebCore::frameIndexFromFrame(&frame));
+    EventLoopInputExtent extent(cursor);
+#else
+    UNUSED_PARAM(source);
+#endif
+
+    frame.loader().stopForUserCancel();
+}
+
 void WebPage::stopLoadingFrame(uint64_t frameID)
 {
     WebFrame* frame = WebProcess::shared().webFrame(frameID);
     if (!frame)
         return;
 
-    corePage()->userInputBridge().stopLoadingFrame(frame->coreFrame());
+    handleFrameStop(*frame->coreFrame(), ActionSource::User);
 }
 
 void WebPage::stopLoading()
 {
     SendStopResponsivenessTimer stopper(this);
 
-    corePage()->userInputBridge().stopLoadingFrame(m_mainFrame->coreFrame());
+    handleFrameStop(*m_mainFrame->coreFrame(), ActionSource::User);
 }
 
 bool WebPage::defersLoading() const
 {
     return m_page->defersLoading();
 }
 
 void WebPage::setDefersLoading(bool defersLoading)
 {
     m_page->setDefersLoading(defersLoading);
 }
 
+void WebPage::handleFrameReload(WebCore::Frame& frame, bool endToEndReload, ActionSource source)
+{
+#if ENABLE(WEB_REPLAY)
+    // Don't try to handle any user events if the web content is being replayed.
+    InputCursor& cursor = corePage()->replayController().activeInputCursor();
+    if (cursor.isReplaying() && source != ActionSource::Synthetic)
+        return;
+    if (cursor.isCapturing())
+        cursor.appendInput<HandleFrameReload>(WebCore::frameIndexFromFrame(&frame), endToEndReload);
+    EventLoopInputExtent extent(cursor);
+#else
+    UNUSED_PARAM(source);
+#endif
+
+    frame.loader().reload(endToEndReload);
+}
+
 void WebPage::reload(uint64_t navigationID, bool reloadFromOrigin, const SandboxExtension::Handle& sandboxExtensionHandle)
 {
     SendStopResponsivenessTimer stopper(this);
 
     ASSERT(!m_pendingNavigationID);
     m_pendingNavigationID = navigationID;
 
     m_sandboxExtensionTracker.beginLoad(m_mainFrame.get(), sandboxExtensionHandle);
-    corePage()->userInputBridge().reloadFrame(m_mainFrame->coreFrame(), reloadFromOrigin);
+    handleFrameReload(*m_mainFrame->coreFrame(), reloadFromOrigin, ActionSource::User);
 }
 
 void WebPage::goForward(uint64_t navigationID, uint64_t backForwardItemID)
 {
     SendStopResponsivenessTimer stopper(this);
 
     HistoryItem* item = WebBackForwardListProxy::itemForID(backForwardItemID);
     ASSERT(item);
     if (!item)
         return;
diff --git a/Source/WebKit2/WebProcess/WebPage/WebPage.h b/Source/WebKit2/WebProcess/WebPage/WebPage.h
index 2b30a1c..a6579ab 100644
--- a/Source/WebKit2/WebProcess/WebPage/WebPage.h
+++ b/Source/WebKit2/WebProcess/WebPage/WebPage.h
@@ -122,20 +122,21 @@ class KeyboardEvent;
 class Page;
 class PrintContext;
 class Range;
 class ResourceResponse;
 class ResourceRequest;
 class SharedBuffer;
 class SubstituteData;
 class TextCheckingRequest;
 class URL;
 class VisibleSelection;
+struct FrameLoadRequest;
 struct Highlight;
 struct KeypressCommand;
 struct TextCheckingResult;
 }
 
 namespace WebKit {
 
 class DrawingArea;
 class InjectedBundleBackForwardList;
 class NotificationPermissionRequestManager;
@@ -846,20 +847,26 @@ public:
         User,
         Synthetic
     };
 
     // Entry points for actions that can be simulated during web replay.
     bool handleMouseEvent(const WebMouseEvent&, ActionSource);
     bool handleKeyEvent(const WebKeyboardEvent&, ActionSource);
     bool handleWheelEvent(const WebWheelEvent&, ActionSource);
     bool handleScroll(WebCore::ScrollDirection, WebCore::ScrollGranularity, ActionSource = ActionSource::User);
 
+    void handleFrameLoad(const WebCore::FrameLoadRequest&, ActionSource);
+    void handleFrameReload(WebCore::Frame&, bool endToEndReload, ActionSource);
+    void handleFrameStop(WebCore::Frame&, ActionSource);
+    bool handleTryClose(ActionSource);
+
+    
 private:
     WebPage(uint64_t pageID, const WebPageCreationParameters&);
 
     // IPC::MessageSender
     virtual IPC::Connection* messageSenderConnection() override;
     virtual uint64_t messageSenderDestinationID() override;
 
     void platformInitialize();
     void platformDetach();
 
-- 
2.0.1

