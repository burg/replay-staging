From ef3f9a3215a44189e45616b540560f0a14c58263 Mon Sep 17 00:00:00 2001
From: "Brian J. Burg" <burg@cs.washington.edu>
Date: Thu, 18 Sep 2014 22:17:34 -0700
Subject: [PATCH] Web Replay: NavigationScheduler should use a deterministic
 timer Need the bug URL (OOPS!).

Reviewed by NOBODY (OOPS!).

Asynchronously-scheduled navigations should be deterministic during playback.

Make ReplayableTimer support the nextFireInterval() API by memoizing its results. It is used by
NavigationScheduler to compute the navigation action time, and forwarded to FrameLoaderClient
(and on to delegates). It's also used elsewhere to implement simple threshold throttling
which could affect JavaScript execution.

No new tests (OOPS!).

[TEST STRATEGY] Do some navigations(?). Not sure how to test interleaving.

* WebCore.exp.in:
* loader/NavigationScheduler.cpp:
(WebCore::ScheduledNavigation::didStartTimer):
(WebCore::NavigationScheduler::startTimer):
* loader/NavigationScheduler.h:
* replay/ReplayableTimer.cpp:
(WebCore::ReplayableTimerBase::nextFireInterval):
* replay/ReplayableTimer.h:
(WebCore::ReplayableTimerBase::nextFireInterval): Add forwarding for !ENABLE(WEB_REPLAY).
* replay/WebInputs.json:
---
 Source/WebCore/ChangeLog                      | 29 +++++++++++++++++++++++++++
 Source/WebCore/WebCore.exp.in                 |  3 +++
 Source/WebCore/loader/NavigationScheduler.cpp | 10 ++++-----
 Source/WebCore/loader/NavigationScheduler.h   |  4 ++--
 Source/WebCore/replay/ReplayableTimer.cpp     | 27 +++++++++++++++++++++++++
 Source/WebCore/replay/ReplayableTimer.h       |  7 +++++++
 Source/WebCore/replay/WebInputs.json          |  8 ++++++++
 7 files changed, 81 insertions(+), 7 deletions(-)

diff --git a/Source/WebCore/ChangeLog b/Source/WebCore/ChangeLog
index 6422df7..dc3e18b 100644
--- a/Source/WebCore/ChangeLog
+++ b/Source/WebCore/ChangeLog
@@ -1,12 +1,41 @@
 2015-01-12  Brian J. Burg  <burg@cs.washington.edu>
 
+        Web Replay: NavigationScheduler should use a deterministic timer
+        Need the bug URL (OOPS!).
+
+        Reviewed by NOBODY (OOPS!).
+
+        Asynchronously-scheduled navigations should be deterministic during playback.
+
+        Make ReplayableTimer support the nextFireInterval() API by memoizing its results. It is used by
+        NavigationScheduler to compute the navigation action time, and forwarded to FrameLoaderClient
+        (and on to delegates). It's also used elsewhere to implement simple threshold throttling
+        which could affect JavaScript execution.
+
+        No new tests (OOPS!).
+
+        [TEST STRATEGY] Do some navigations(?). Not sure how to test interleaving.
+
+        * WebCore.exp.in:
+        * loader/NavigationScheduler.cpp:
+        (WebCore::ScheduledNavigation::didStartTimer):
+        (WebCore::NavigationScheduler::startTimer):
+        * loader/NavigationScheduler.h:
+        * replay/ReplayableTimer.cpp:
+        (WebCore::ReplayableTimerBase::nextFireInterval):
+        * replay/ReplayableTimer.h:
+        (WebCore::ReplayableTimerBase::nextFireInterval): Add forwarding for !ENABLE(WEB_REPLAY).
+        * replay/WebInputs.json:
+
+2015-01-12  Brian J. Burg  <burg@cs.washington.edu>
+
         Web Replay: ScriptRunner should use a deterministic timer
         Need the bug URL (OOPS!).
 
         Reviewed by NOBODY (OOPS!).
 
         Scripts should run in a deterministic order.
 
         No new tests (OOPS!).
 
         [TEST STRATEGY] Find a small test case where we reliably hit ScriptRunner asynchrony.
diff --git a/Source/WebCore/WebCore.exp.in b/Source/WebCore/WebCore.exp.in
index b151368..3f48bda 100644
--- a/Source/WebCore/WebCore.exp.in
+++ b/Source/WebCore/WebCore.exp.in
@@ -3542,20 +3542,23 @@ __ZN3JSC11InputTraitsIN7WebCore18EndSegmentSentinelEE6decodeERNS_12EncodedValueE
 __ZN3JSC11InputTraitsIN7WebCore18EndSegmentSentinelEE6encodeERNS_12EncodedValueERKS2_
 __ZN3JSC11InputTraitsIN7WebCore20BeginSegmentSentinelEE4typeEv
 __ZN3JSC11InputTraitsIN7WebCore20BeginSegmentSentinelEE6decodeERNS_12EncodedValueERNSt3__110unique_ptrIS2_NS6_14default_deleteIS2_EEEE
 __ZN3JSC11InputTraitsIN7WebCore20BeginSegmentSentinelEE6encodeERNS_12EncodedValueERKS2_
 __ZN3JSC11InputTraitsIN7WebCore21MemoizedDOMResultBaseEE4typeEv
 __ZN3JSC11InputTraitsIN7WebCore21MemoizedDOMResultBaseEE6decodeERNS_12EncodedValueERNSt3__110unique_ptrIS2_NS6_14default_deleteIS2_EEEE
 __ZN3JSC11InputTraitsIN7WebCore21MemoizedDOMResultBaseEE6encodeERNS_12EncodedValueERKS2_
 __ZN3JSC11InputTraitsIN7WebCore21ResourceLoaderDidFailEE4typeEv
 __ZN3JSC11InputTraitsIN7WebCore21ResourceLoaderDidFailEE6decodeERNS_12EncodedValueERNSt3__110unique_ptrIS2_NS6_14default_deleteIS2_EEEE
 __ZN3JSC11InputTraitsIN7WebCore21ResourceLoaderDidFailEE6encodeERNS_12EncodedValueERKS2_
+__ZN3JSC11InputTraitsIN7WebCore22AsyncTimerNextIntervalEE4typeEv
+__ZN3JSC11InputTraitsIN7WebCore22AsyncTimerNextIntervalEE6decodeERNS_12EncodedValueERNSt3__110unique_ptrIS2_NS6_14default_deleteIS2_EEEE
+__ZN3JSC11InputTraitsIN7WebCore22AsyncTimerNextIntervalEE6encodeERNS_12EncodedValueERKS2_
 __ZN3JSC11InputTraitsIN7WebCore24DocumentLastModifiedDateEE4typeEv
 __ZN3JSC11InputTraitsIN7WebCore24DocumentLastModifiedDateEE6decodeERNS_12EncodedValueERNSt3__110unique_ptrIS2_NS6_14default_deleteIS2_EEEE
 __ZN3JSC11InputTraitsIN7WebCore24DocumentLastModifiedDateEE6encodeERNS_12EncodedValueERKS2_
 __ZN3JSC11InputTraitsIN7WebCore25ResourceLoaderDidSendDataEE4typeEv
 __ZN3JSC11InputTraitsIN7WebCore25ResourceLoaderDidSendDataEE6decodeERNS_12EncodedValueERNSt3__110unique_ptrIS2_NS6_14default_deleteIS2_EEEE
 __ZN3JSC11InputTraitsIN7WebCore25ResourceLoaderDidSendDataEE6encodeERNS_12EncodedValueERKS2_
 __ZN3JSC11InputTraitsIN7WebCore28ResourceLoaderDidReceiveDataEE4typeEv
 __ZN3JSC11InputTraitsIN7WebCore28ResourceLoaderDidReceiveDataEE6decodeERNS_12EncodedValueERNSt3__110unique_ptrIS2_NS6_14default_deleteIS2_EEEE
 __ZN3JSC11InputTraitsIN7WebCore28ResourceLoaderDidReceiveDataEE6encodeERNS_12EncodedValueERKS2_
 __ZN3JSC11InputTraitsIN7WebCore30ResourceLoaderDidFinishLoadingEE4typeEv
diff --git a/Source/WebCore/loader/NavigationScheduler.cpp b/Source/WebCore/loader/NavigationScheduler.cpp
index 91cba06..9641fe5 100644
--- a/Source/WebCore/loader/NavigationScheduler.cpp
+++ b/Source/WebCore/loader/NavigationScheduler.cpp
@@ -67,21 +67,21 @@ public:
         , m_wasDuringLoad(wasDuringLoad)
         , m_isLocationChange(isLocationChange)
         , m_wasUserGesture(ScriptController::processingUserGesture())
     {
     }
     virtual ~ScheduledNavigation() { }
 
     virtual void fire(Frame&) = 0;
 
     virtual bool shouldStartTimer(Frame&) { return true; }
-    virtual void didStartTimer(Frame&, Timer&) { }
+    virtual void didStartTimer(Frame&, ReplayableTimer&) { }
     virtual void didStopTimer(Frame&, bool /* newLoadInProgress */) { }
 
     double delay() const { return m_delay; }
     LockHistory lockHistory() const { return m_lockHistory; }
     LockBackForwardList lockBackForwardList() const { return m_lockBackForwardList; }
     bool wasDuringLoad() const { return m_wasDuringLoad; }
     bool isLocationChange() const { return m_isLocationChange; }
     bool wasUserGesture() const { return m_wasUserGesture; }
 
 protected:
@@ -106,21 +106,21 @@ protected:
         , m_haveToldClient(false)
     {
     }
 
     virtual void fire(Frame& frame) override
     {
         UserGestureIndicator gestureIndicator(wasUserGesture() ? DefinitelyProcessingUserGesture : DefinitelyNotProcessingUserGesture);
         frame.loader().changeLocation(m_securityOrigin.get(), m_url, m_referrer, lockHistory(), lockBackForwardList(), false);
     }
 
-    virtual void didStartTimer(Frame& frame, Timer& timer) override
+    virtual void didStartTimer(Frame& frame, ReplayableTimer& timer) override
     {
         if (m_haveToldClient)
             return;
         m_haveToldClient = true;
 
         UserGestureIndicator gestureIndicator(wasUserGesture() ? DefinitelyProcessingUserGesture : DefinitelyNotProcessingUserGesture);
         frame.loader().clientRedirected(m_url, delay(), currentTime() + timer.nextFireInterval(), lockBackForwardList());
     }
 
     virtual void didStopTimer(Frame& frame, bool newLoadInProgress) override
@@ -241,22 +241,22 @@ public:
         // Now that the timer has fired, we need to repeat the security check which normally is done when
         // selecting a target, in case conditions have changed. Other code paths avoid this by targeting
         // without leaving a time window. If we fail the check just silently drop the form submission.
         Document* requestingDocument = m_submission->state()->sourceDocument();
         if (!requestingDocument->canNavigate(&frame))
             return;
         FrameLoadRequest frameRequest(requestingDocument->securityOrigin());
         m_submission->populateFrameLoadRequest(frameRequest);
         frame.loader().loadFrameRequest(frameRequest, lockHistory(), lockBackForwardList(), m_submission->event(), m_submission->state(), MaybeSendReferrer, AllowNavigationToInvalidURL::Yes);
     }
-    
-    virtual void didStartTimer(Frame& frame, Timer& timer) override
+
+    virtual void didStartTimer(Frame& frame, ReplayableTimer& timer) override
     {
         if (m_haveToldClient)
             return;
         m_haveToldClient = true;
 
         UserGestureIndicator gestureIndicator(wasUserGesture() ? DefinitelyProcessingUserGesture : DefinitelyNotProcessingUserGesture);
         frame.loader().clientRedirected(m_submission->requestURL(), delay(), currentTime() + timer.nextFireInterval(), lockBackForwardList());
     }
 
     virtual void didStopTimer(Frame& frame, bool newLoadInProgress) override
@@ -478,21 +478,21 @@ void NavigationScheduler::startTimer()
     if (!m_redirect)
         return;
 
     ASSERT(m_frame.page());
     if (m_timer.isActive())
         return;
     if (!m_redirect->shouldStartTimer(m_frame))
         return;
 
     double delay = m_redirect->delay();
-    m_timer.startOneShot(delay);
+    m_timer.startOneShot(delay, m_frame.document());
     InspectorInstrumentation::frameScheduledNavigation(m_frame, delay);
     m_redirect->didStartTimer(m_frame, m_timer); // m_redirect may be null on return (e.g. the client canceled the load)
 }
 
 void NavigationScheduler::cancel(bool newLoadInProgress)
 {
     if (m_timer.isActive())
         InspectorInstrumentation::frameClearedScheduledNavigation(m_frame);
     m_timer.stop();
 
diff --git a/Source/WebCore/loader/NavigationScheduler.h b/Source/WebCore/loader/NavigationScheduler.h
index 8522840..bf34706 100644
--- a/Source/WebCore/loader/NavigationScheduler.h
+++ b/Source/WebCore/loader/NavigationScheduler.h
@@ -25,21 +25,21 @@
  * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
  * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
  * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  */
 
 #ifndef NavigationScheduler_h
 #define NavigationScheduler_h
 
 #include "FrameLoaderTypes.h"
-#include "Timer.h"
+#include "ReplayableTimer.h"
 #include <wtf/Forward.h>
 
 namespace WebCore {
 
 class FormSubmission;
 class Frame;
 class ScheduledNavigation;
 class SecurityOrigin;
 class URL;
 
@@ -82,17 +82,17 @@ public:
 private:
     bool shouldScheduleNavigation() const;
     bool shouldScheduleNavigation(const URL&) const;
 
     void timerFired();
     void schedule(std::unique_ptr<ScheduledNavigation>);
 
     static LockBackForwardList mustLockBackForwardList(Frame& targetFrame);
 
     Frame& m_frame;
-    Timer m_timer;
+    ReplayableTimer m_timer;
     std::unique_ptr<ScheduledNavigation> m_redirect;
 };
 
 } // namespace WebCore
 
 #endif // NavigationScheduler_h
diff --git a/Source/WebCore/replay/ReplayableTimer.cpp b/Source/WebCore/replay/ReplayableTimer.cpp
index 6e6bee9..04523f0 100644
--- a/Source/WebCore/replay/ReplayableTimer.cpp
+++ b/Source/WebCore/replay/ReplayableTimer.cpp
@@ -93,13 +93,40 @@ void ReplayableTimerBase::stop()
 #if !LOG_DISABLED
     if (cursor.isCapturing() || cursor.isReplaying())
         LOG(WebReplay, "ReplayableTimer(%p)::stop m_document=%p, ordinal=%" PRIu64, this, m_document, m_ordinal);
 #endif
     if (!cursor.isReplaying())
         m_timer.stop();
 
     m_document = nullptr;
 }
 
+double ReplayableTimerBase::nextFireInterval()
+{
+    ASSERT(m_document);
+
+    InputCursor& cursor = m_document->inputCursor();
+
+    double interval = NAN;
+    if (cursor.isReplaying()) {
+        if (AsyncTimerNextInterval* input = cursor.fetchInput<AsyncTimerNextInterval>())
+            interval = input->nextInterval();
+        else // TODO: error handling
+            interval = 0;
+    } else {
+        interval = m_timer.nextFireInterval();
+        if (cursor.isCapturing())
+            cursor.appendInput<AsyncTimerNextInterval>(interval);
+    }
+
+#if !LOG_DISABLED
+    if (cursor.isCapturing() || cursor.isReplaying())
+        LOG(WebReplay, "ReplayableTimer(%p)::nextFireInterval m_document=%p, ordinal=%" PRIu64 ", interval=%f", this, m_document, m_ordinal, interval);
+#endif
+
+    ASSERT(!isnan(interval));
+    return interval;
+}
+
 } // namespace WebCore
 
 #endif // ENABLE(WEB_REPLAY)
diff --git a/Source/WebCore/replay/ReplayableTimer.h b/Source/WebCore/replay/ReplayableTimer.h
index 9b2a927..cf1b6cb 100644
--- a/Source/WebCore/replay/ReplayableTimer.h
+++ b/Source/WebCore/replay/ReplayableTimer.h
@@ -44,20 +44,22 @@ friend class ReplayableTimers;
 public:
     ReplayableTimerBase();
     virtual ~ReplayableTimerBase();
 
     void startOneShot(double interval, Document*);
     void startOneShot(std::chrono::milliseconds interval, Document* document) { startOneShot(interval.count() * 0.001, document); }
 
     void stop();
     bool isActive() const;
 
+    double nextFireInterval();
+
 #if ENABLE(WEB_REPLAY)
     uint64_t ordinal() const { return m_ordinal; }
 #endif
 protected:
     virtual void fired() =0;
 private:
     void timerFired();
 
     Timer m_timer;
 
@@ -101,15 +103,20 @@ inline bool ReplayableTimerBase::isActive() const
 inline bool ReplayableTimerBase::isActive() const
 {
     return m_timer.isActive();
 }
 
 inline void ReplayableTimerBase::startOneShot(double interval, Document*)
 {
     m_timer.startOneShot(interval);
 }
 
+inline void ReplayableTimerBase::nextFireInterval()
+{
+    return m_timer.nextFireInterval();
+}
+
 #endif // !ENABLE(WEB_REPLAY)
 
 } // namespace WebCore
 
 #endif // ReplayableTimer_h
diff --git a/Source/WebCore/replay/WebInputs.json b/Source/WebCore/replay/WebInputs.json
index 24ae72f..5329e14 100644
--- a/Source/WebCore/replay/WebInputs.json
+++ b/Source/WebCore/replay/WebInputs.json
@@ -158,20 +158,28 @@
         {
             "name": "AsyncTimerFired",
             "description": "A ReplayableTimer instance fired that was associated with the specified frame.",
             "queue": "EVENT_LOOP",
             "members": [
                 { "name": "frameIndex", "type": "uint32_t" },
                 { "name": "ordinal", "type": "uint64_t" }
             ]
         },
         {
+            "name": "AsyncTimerNextInterval",
+            "description": "The time until the next fire interval for a timer.",
+            "queue": "SCRIPT_MEMOIZED",
+            "members": [
+                { "name": "nextInterval", "type": "double" }
+            ]
+        },
+        {
             "name": "BeginSegmentSentinel",
             "description": "A sentinel input to signal the start of a segment.",
             "queue": "EVENT_LOOP",
             "members": [ ]
         },
         {
             "name": "DocumentLastModifiedDate",
             "description": "A fallback value used for the document's last modified date if the Last-Modified header can't be found or used.",
             "queue": "SCRIPT_MEMOIZED",
             "members": [
-- 
2.0.1

