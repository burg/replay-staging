From ac7547a8ac1de01876979d5f83b830948d86c923 Mon Sep 17 00:00:00 2001
From: "Brian J. Burg" <burg@cs.washington.edu>
Date: Thu, 31 Jul 2014 09:54:28 -0700
Subject: [PATCH] WIP - new dashboard timeline

---
 Source/WebInspectorUI/UserInterface/Main.html      |   3 +
 .../Views/DashboardTimelineOverview.css            | 114 +++++++
 .../Views/DashboardTimelineOverview.js             | 362 +++++++++++++++++++++
 .../UserInterface/Views/ReplayDashboardView.css    |  17 +-
 .../UserInterface/Views/ReplayDashboardView.js     | 121 ++++++-
 .../Views/SimpleNetworkTimelineOverviewGraph.js    |  95 ++++++
 6 files changed, 694 insertions(+), 18 deletions(-)
 create mode 100644 Source/WebInspectorUI/UserInterface/Views/DashboardTimelineOverview.css
 create mode 100644 Source/WebInspectorUI/UserInterface/Views/DashboardTimelineOverview.js
 create mode 100644 Source/WebInspectorUI/UserInterface/Views/SimpleNetworkTimelineOverviewGraph.js

diff --git a/Source/WebInspectorUI/UserInterface/Main.html b/Source/WebInspectorUI/UserInterface/Main.html
index 7b91555..69863b5 100644
--- a/Source/WebInspectorUI/UserInterface/Main.html
+++ b/Source/WebInspectorUI/UserInterface/Main.html
@@ -49,20 +49,21 @@
     <link rel="stylesheet" href="Views/CompletionSuggestionsView.css">
     <link rel="stylesheet" href="Views/ComputedStyleDetailsPanel.css">
     <link rel="stylesheet" href="Views/ConsolePrompt.css">
     <link rel="stylesheet" href="Views/ContentBrowser.css">
     <link rel="stylesheet" href="Views/ContentFlowIcon.css">
     <link rel="stylesheet" href="Views/ContentView.css">
     <link rel="stylesheet" href="Views/ContentViewContainer.css">
     <link rel="stylesheet" href="Views/ControlToolbarItem.css">
     <link rel="stylesheet" href="Views/CookieIcon.css">
     <link rel="stylesheet" href="Views/CookieStorageContentView.css">
+    <link rel="stylesheet" href="Views/DashboardTimelineOverview.css">
     <link rel="stylesheet" href="Views/DOMStorageContentView.css">
     <link rel="stylesheet" href="Views/DOMStorageIcons.css">
     <link rel="stylesheet" href="Views/DOMTreeContentView.css">
     <link rel="stylesheet" href="Views/DOMTreeDataGrid.css">
     <link rel="stylesheet" href="Views/DOMTreeOutline.css">
     <link rel="stylesheet" href="Views/DashboardContainerView.css">
     <link rel="stylesheet" href="Views/DebuggerDashboardView.css">
     <link rel="stylesheet" href="Views/DefaultDashboardView.css">
     <link rel="stylesheet" href="Views/DataGrid.css">
     <link rel="stylesheet" href="Views/DatabaseContentView.css">
@@ -346,20 +347,21 @@
     <script src="Views/DOMNodeDetailsSidebarPanel.js"></script>
     <script src="Views/DOMStorageContentView.js"></script>
     <script src="Views/DOMStorageTreeElement.js"></script>
     <script src="Views/DOMTreeDataGrid.js"></script>
     <script src="Views/DOMTreeDataGridNode.js"></script>
     <script src="Views/DOMTreeElement.js"></script>
     <script src="Views/DOMTreeElementPathComponent.js"></script>
     <script src="Views/DOMTreeOutline.js"></script>
     <script src="Views/DOMTreeUpdater.js"></script>
     <script src="Views/DashboardContainerView.js"></script>
+    <script src="Views/DashboardTimelineOverview.js"></script>
     <script src="Views/DatabaseContentView.js"></script>
     <script src="Views/DatabaseHostTreeElement.js"></script>
     <script src="Views/DatabaseTableContentView.js"></script>
     <script src="Views/DatabaseTableTreeElement.js"></script>
     <script src="Views/DatabaseTreeElement.js"></script>
     <script src="Views/DebuggerSidebarPanel.js"></script>
     <script src="Views/DetailsSection.js"></script>
     <script src="Views/DashboardView.js"></script>
     <script src="Views/DebuggerDashboardView.js"></script>
     <script src="Views/DefaultDashboardView.js"></script>
@@ -431,20 +433,21 @@
     <script src="Views/ScopeVariableTreeElement.js"></script>
     <script src="Views/ScriptContentView.js"></script>
     <script src="Views/ScriptTimelineDataGrid.js"></script>
     <script src="Views/ScriptTimelineDataGridNode.js"></script>
     <script src="Views/ScriptTimelineOverviewGraph.js"></script>
     <script src="Views/ScriptTimelineView.js"></script>
     <script src="Views/ScriptTreeElement.js"></script>
     <script src="Views/SearchBar.js"></script>
     <script src="Views/SearchResultTreeElement.js"></script>
     <script src="Views/Sidebar.js"></script>
+    <script src="Views/SimpleNetworkTimelineOverviewGraph.js"></script>
     <script src="Views/Slider.js"></script>
     <script src="Views/SourceCodeTextEditor.js"></script>
     <script src="Views/SourceCodeTimelineTimelineDataGridNode.js"></script>
     <script src="Views/SourceCodeTimelineTreeElement.js"></script>
     <script src="Views/SourceMapResourceTreeElement.js"></script>
     <script src="Views/SyntaxHighlightingSupport.js"></script>
     <script src="Views/TextContentView.js"></script>
     <script src="Views/TextResourceContentView.js"></script>
     <script src="Views/TimelineContentView.js"></script>
     <script src="Views/TimelineOverview.js"></script>
diff --git a/Source/WebInspectorUI/UserInterface/Views/DashboardTimelineOverview.css b/Source/WebInspectorUI/UserInterface/Views/DashboardTimelineOverview.css
new file mode 100644
index 0000000..da97827
--- /dev/null
+++ b/Source/WebInspectorUI/UserInterface/Views/DashboardTimelineOverview.css
@@ -0,0 +1,114 @@
+/*
+ * Copyright (C) 2013 Apple Inc. All rights reserved.
+ * Copyright (C) 2014 University of Washington.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in the
+ *    documentation and/or other materials provided with the distribution.
+ *
+ * THIS SOFTWARE IS PROVIDED BY APPLE INC. AND ITS CONTRIBUTORS ``AS IS''
+ * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
+ * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
+ * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL APPLE INC. OR ITS CONTRIBUTORS
+ * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
+ * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
+ * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
+ * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
+ * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
+ * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF
+ * THE POSSIBILITY OF SUCH DAMAGE.
+ */
+
+.toolbar .dashboard-timeline-overview {
+    height: 22px;
+    position: relative;
+}
+
+.toolbar.label-only .dashboard-timeline-overview {
+    height: 16px;
+}
+
+.dashboard-timeline-overview > .scroll-container {
+    position: absolute;
+    left: 0;
+    right: 0;
+    bottom: 0;
+    height: 1px;
+    overflow-x: auto;
+    overflow-y: hidden;
+    opacity: 0;
+}
+
+.dashboard-timeline-overview:hover > .scroll-container {
+    opacity: 0;
+}
+
+.dashboard-timeline-overview > .scroll-container:hover {
+    opacity: 0;
+}
+
+.dashboard-timeline-overview > .timeline-ruler {
+    display: none; /* HACK */
+
+    position: absolute;
+    top: 0;
+    left: 0;
+    bottom: 0;
+    right: 0;
+}
+
+.dashboard-timeline-overview > .graphs-container {
+    position: absolute;
+    top: 0;
+    left: 0;
+    bottom: 0;
+    right: 0;
+    overflow: hidden;
+}
+
+.dashboard-timeline-overview > .graphs-container > .timeline-overview-graph {
+    background: default;
+    border: none;
+}
+
+.dashboard-timeline-overview > .graphs-container > .timeline-overview-graph > .timeline-record-bar {
+    height: 6px;
+    margin-top: 1px;
+}
+
+.dashboard-timeline-overview > .graphs-container > .timeline-overview-graph > .timeline-record-bar > .segment {
+    border-radius: 1px;
+}
+
+.dashboard-timeline-overview > .scroll-container > .scroll-width-sizer {
+    position: absolute;
+    top: 0;
+    left: 0;
+    height: 1px;
+    visibility: hidden;
+    pointer-events: none;
+}
+
+.dashboard-timeline-overview .timeline-overview-graph {
+    height: 6px;
+    margin-top: 1px;
+    margin-bottom: 1px;
+    padding-top: 0 !important;
+}
+
+.dashboard-timeline-overview .timeline-overview-graph.network {
+    top: 0%;
+}
+
+.dashboard-timeline-overview .timeline-overview-graph.layout {
+    top: 33%;
+}
+
+.dashboard-timeline-overview .timeline-overview-graph.script {
+    top: 66%;
+}
diff --git a/Source/WebInspectorUI/UserInterface/Views/DashboardTimelineOverview.js b/Source/WebInspectorUI/UserInterface/Views/DashboardTimelineOverview.js
new file mode 100644
index 0000000..87d1566
--- /dev/null
+++ b/Source/WebInspectorUI/UserInterface/Views/DashboardTimelineOverview.js
@@ -0,0 +1,362 @@
+/*
+ * Copyright (C) 2013 Apple Inc. All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in the
+ *    documentation and/or other materials provided with the distribution.
+ *
+ * THIS SOFTWARE IS PROVIDED BY APPLE INC. AND ITS CONTRIBUTORS ``AS IS''
+ * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
+ * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
+ * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL APPLE INC. OR ITS CONTRIBUTORS
+ * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
+ * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
+ * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
+ * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
+ * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
+ * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF
+ * THE POSSIBILITY OF SUCH DAMAGE.
+ */
+
+WebInspector.DashboardTimelineOverview = function(timelineOverviewGraphsMap)
+{
+    WebInspector.Object.call(this);
+
+    this._element = document.createElement("div");
+    this._element.className = WebInspector.DashboardTimelineOverview.StyleClassName;
+    this._element.addEventListener("wheel", this._handleWheelEvent.bind(this));
+
+    this._graphsContainer = document.createElement("div");
+    this._graphsContainer.className = WebInspector.DashboardTimelineOverview.GraphsContainerStyleClassName;
+    this._element.appendChild(this._graphsContainer);
+
+    this._timelineOverviewGraphsMap = timelineOverviewGraphsMap;
+
+    for (var timelineOverviewGraph of this._timelineOverviewGraphsMap.values()) {
+        timelineOverviewGraph.timelineOverview = this;
+        this._graphsContainer.appendChild(timelineOverviewGraph.element);
+    }
+
+    this._timelineRuler = new WebInspector.TimelineRuler;
+    this._timelineRuler.allowsClippedLabels = true;
+    this._timelineRuler.allowsTimeRangeSelection = true;
+    this._timelineRuler.addEventListener(WebInspector.TimelineRuler.Event.TimeRangeSelectionChanged, this._timeRangeSelectionChanged, this);
+    this._element.appendChild(this._timelineRuler.element);
+
+    this._currentTimeMarker = new WebInspector.TimelineMarker(0, WebInspector.TimelineMarker.Type.CurrentTime);
+    this._timelineRuler.addMarker(this._currentTimeMarker);
+
+    this._scrollContainer = document.createElement("div");
+    this._scrollContainer.className = WebInspector.DashboardTimelineOverview.ScrollContainerStyleClassName;
+    this._scrollContainer.addEventListener("scroll", this._handleScrollEvent.bind(this));
+    this._element.appendChild(this._scrollContainer);
+
+    this._scrollWidthSizer = document.createElement("div");
+    this._scrollWidthSizer.className = WebInspector.DashboardTimelineOverview.ScrollWidthSizerStyleClassName;
+    this._scrollContainer.appendChild(this._scrollWidthSizer);
+
+    this._secondsPerPixelSetting = new WebInspector.Setting("dashboard-timeline-overview-seconds-per-pixel", 0.05);
+    this._selectionStartTimeSetting = new WebInspector.Setting("dashboard-timeline-overview-selection-start-time", 0);
+    this._selectionDurationSetting = new WebInspector.Setting("dashboard-timeline-overview-selection-duration", 5);
+
+    this._startTime = 0;
+    this._currentTime = 0;
+    this._endTime = 0;
+    this._secondsPerPixel = this._secondsPerPixelSetting.value;
+    this._scrollStartTime = 0;
+    this._cachedScrollContainerWidth = NaN;
+
+    this.selectionStartTime = this._selectionStartTimeSetting.value;
+    this.selectionDuration = this._selectionDurationSetting.value;
+};
+
+WebInspector.DashboardTimelineOverview.StyleClassName = "dashboard-timeline-overview";
+WebInspector.DashboardTimelineOverview.GraphsContainerStyleClassName = "graphs-container";
+WebInspector.DashboardTimelineOverview.ScrollContainerStyleClassName = "scroll-container";
+WebInspector.DashboardTimelineOverview.ScrollWidthSizerStyleClassName = "scroll-width-sizer";
+WebInspector.DashboardTimelineOverview.MinimumSecondsPerPixel = 0.001;
+WebInspector.DashboardTimelineOverview.ScrollDeltaDenominator = 500;
+
+WebInspector.DashboardTimelineOverview.Event = {
+    TimeRangeSelectionChanged: "timeline-overview-time-range-selection-changed"
+};
+
+WebInspector.DashboardTimelineOverview.prototype = {
+    constructor: WebInspector.DashboardTimelineOverview,
+    __proto__: WebInspector.Object.prototype,
+
+    // Public
+
+    get element()
+    {
+        return this._element;
+    },
+
+    get startTime()
+    {
+        return this._startTime;
+    },
+
+    set startTime(x)
+    {
+        if (this._startTime === x)
+            return;
+
+        this._startTime = x || 0;
+
+        this._needsLayout();
+    },
+
+    get currentTime()
+    {
+        return this._currentTime;
+    },
+
+    set currentTime(x)
+    {
+        if (this._currentTime === x)
+            return;
+
+        this._currentTime = x || 0;
+        this._revealCurrentTime = true;
+
+        this._needsLayout();
+    },
+
+    get secondsPerPixel()
+    {
+        return this._secondsPerPixel;
+    },
+
+    set secondsPerPixel(x)
+    {
+        x = Math.max(WebInspector.DashboardTimelineOverview.MinimumSecondsPerPixel, x);
+
+        if (this._secondsPerPixel === x)
+            return;
+
+        this._secondsPerPixel = x;
+        this._secondsPerPixelSetting.value = x;
+
+        this._needsLayout();
+    },
+
+    get endTime()
+    {
+        return this._endTime;
+    },
+
+    set endTime(x)
+    {
+        if (this._endTime === x)
+            return;
+
+        this._endTime = x || 0;
+
+        this._needsLayout();
+    },
+
+    get scrollStartTime()
+    {
+        return this._scrollStartTime;
+    },
+
+    set scrollStartTime(x)
+    {
+        if (this._scrollStartTime === x)
+            return;
+
+        this._scrollStartTime = x || 0;
+
+        this._needsLayout();
+    },
+
+    get visibleDuration()
+    {
+        if (isNaN(this._cachedScrollContainerWidth)) {
+            this._cachedScrollContainerWidth = this._scrollContainer.offsetWidth;
+            console.assert(this._cachedScrollContainerWidth > 0);
+        }
+
+        return this._cachedScrollContainerWidth * this._secondsPerPixel;
+    },
+
+    get selectionStartTime()
+    {
+        return this._timelineRuler.selectionStartTime;
+    },
+
+    set selectionStartTime(x)
+    {
+        x = x || 0;
+
+        var selectionDuration = this.selectionDuration;
+        this._timelineRuler.selectionStartTime = x;
+        this._timelineRuler.selectionEndTime = x + selectionDuration;
+    },
+
+    get selectionDuration()
+    {
+        return this._timelineRuler.selectionEndTime - this._timelineRuler.selectionStartTime;
+    },
+
+    set selectionDuration(x)
+    {
+        x = Math.max(WebInspector.TimelineRuler.MinimumSelectionTimeRange, x);
+        this._timelineRuler.selectionEndTime = this._timelineRuler.selectionStartTime + x;
+    },
+
+    addMarker: function(marker)
+    {
+        this._timelineRuler.addMarker(marker);
+    },
+
+    revealMarker: function(marker)
+    {
+        this.scrollStartTime = marker.time - (this.visibleDuration / 2);
+    },
+
+    updateLayoutForResize: function()
+    {
+        this._cachedScrollContainerWidth = NaN;
+        this.updateLayout();
+    },
+
+    updateLayout: function()
+    {
+        if (this._scheduledLayoutUpdateIdentifier) {
+            cancelAnimationFrame(this._scheduledLayoutUpdateIdentifier);
+            delete this._scheduledLayoutUpdateIdentifier;
+        }
+
+        // Calculate the required width based on the duration and seconds per pixel.
+        var duration = this._endTime - this._startTime;
+        var newWidth = Math.ceil(duration / this._secondsPerPixel);
+
+        // Update all relevant elements to the new required width.
+        this._updateElementWidth(this._scrollWidthSizer, newWidth);
+
+        this._currentTimeMarker.time = this._currentTime;
+
+        if (this._revealCurrentTime) {
+            this.revealMarker(this._currentTimeMarker);
+            delete this._revealCurrentTime;
+        }
+
+        const visibleDuration = this.visibleDuration;
+
+        // Clamp the scroll start time to match what the scroll bar would allow.
+        var scrollStartTime = Math.min(this._scrollStartTime, this._endTime - visibleDuration);
+        scrollStartTime = Math.max(this._startTime, scrollStartTime);
+
+        this._timelineRuler.zeroTime = this._startTime;
+        this._timelineRuler.startTime = scrollStartTime;
+        this._timelineRuler.secondsPerPixel = this._secondsPerPixel;
+
+        if (!this._dontUpdateScrollLeft) {
+            this._ignoreNextScrollEvent = true;
+            this._scrollContainer.scrollLeft = Math.ceil((scrollStartTime - this._startTime) / this._secondsPerPixel);
+        }
+
+        this._timelineRuler.updateLayout();
+
+        for (var DashboardTimelineOverviewGraph of this._timelineOverviewGraphsMap.values()) {
+            DashboardTimelineOverviewGraph.zeroTime = this._startTime;
+            DashboardTimelineOverviewGraph.startTime = scrollStartTime;
+            DashboardTimelineOverviewGraph.currentTime = this._currentTime;
+            DashboardTimelineOverviewGraph.endTime = scrollStartTime + visibleDuration;
+            DashboardTimelineOverviewGraph.updateLayout();
+        }
+    },
+
+    updateLayoutIfNeeded: function()
+    {
+        if (this._scheduledLayoutUpdateIdentifier) {
+            this.updateLayout();
+            return;
+        }
+
+        this._timelineRuler.updateLayoutIfNeeded();
+
+        for (var DashboardTimelineOverviewGraph of this._timelineOverviewGraphsMap.values())
+            DashboardTimelineOverviewGraph.updateLayoutIfNeeded();
+    },
+
+    // Private
+
+    _updateElementWidth: function(element, newWidth)
+    {
+        var currentWidth = parseInt(element.style.width);
+        if (currentWidth !== newWidth)
+            element.style.width = newWidth + "px";
+    },
+
+    _needsLayout: function()
+    {
+        if (this._scheduledLayoutUpdateIdentifier)
+            return;
+        this._scheduledLayoutUpdateIdentifier = requestAnimationFrame(this.updateLayout.bind(this));
+    },
+
+    _handleScrollEvent: function(event)
+    {
+        if (this._ignoreNextScrollEvent) {
+            delete this._ignoreNextScrollEvent;
+            return;
+        }
+
+        this._dontUpdateScrollLeft = true;
+
+        var scrollOffset = this._scrollContainer.scrollLeft;
+        this.scrollStartTime = this._startTime + (scrollOffset * this._secondsPerPixel);
+
+        // Force layout so we can update with the scroll position synchronously.
+        this.updateLayoutIfNeeded();
+
+        delete this._dontUpdateScrollLeft;
+    },
+
+    _handleWheelEvent: function(event)
+    {
+        // Ignore cloned events that come our way, we already handled the original.
+        if (event.__cloned)
+            return;
+
+        // Require twice the vertical delta to overcome horizontal scrolling. This prevents most
+        // cases of inadvertent zooming for slightly diagonal scrolls.
+        if (Math.abs(event.deltaX) >= Math.abs(event.deltaY) * 0.5) {
+            // Clone the event to dispatch it on the scroll container. Mark it as cloned so we don't get into a loop.
+            var newWheelEvent = new event.constructor(event.type, event);
+            newWheelEvent.__cloned = true;
+
+            this._scrollContainer.dispatchEvent(newWheelEvent);
+            return;
+        }
+
+        // Remember the mouse position in time.
+        var mouseOffset = event.pageX - this._element.totalOffsetLeft;
+        var mousePositionTime = this._scrollStartTime + (mouseOffset * this._secondsPerPixel);
+        var deviceDirection = event.webkitDirectionInvertedFromDevice ? 1 : -1;
+
+        this.secondsPerPixel += event.deltaY * (this._secondsPerPixel / WebInspector.DashboardTimelineOverview.ScrollDeltaDenominator) * deviceDirection;
+
+        // Center the zoom around the mouse based on the remembered mouse position time.
+        this.scrollStartTime = mousePositionTime - (mouseOffset * this._secondsPerPixel);
+
+        event.preventDefault();
+        event.stopPropagation();
+    },
+
+    _timeRangeSelectionChanged: function(event)
+    {
+        this._selectionStartTimeSetting.value = this.selectionStartTime - this._startTime;
+        this._selectionDurationSetting.value = this.selectionDuration;
+
+        this.dispatchEventToListeners(WebInspector.DashboardTimelineOverview.Event.TimeRangeSelectionChanged);
+    }
+};
diff --git a/Source/WebInspectorUI/UserInterface/Views/ReplayDashboardView.css b/Source/WebInspectorUI/UserInterface/Views/ReplayDashboardView.css
index 56def39..d0e13fd 100644
--- a/Source/WebInspectorUI/UserInterface/Views/ReplayDashboardView.css
+++ b/Source/WebInspectorUI/UserInterface/Views/ReplayDashboardView.css
@@ -32,37 +32,30 @@
     text-shadow: rgba(255, 255, 255, 0.5) 0 1px 0;
     color: rgb(60, 60, 60);
     padding: 0 5px;
 }
 
 .toolbar .dashboard.replay div.navigation-bar {
     border-bottom: none !important;
     box-shadow: none !important;
 }
 
-.toolbar .dashboard.replay > .recording-container {
-    -webkit-flex-grow: 1;
-    -webkit-order: 2;
-    border: 1px solid #aaa;
-    height: 22px;
-    margin: 0 14px 0 4px;
-}
-
-.toolbar.small-size .dashboard.replay > .recording-container {
-    height: 16px;
-}
-
 .toolbar .dashboard.replay .item.button > .glyph {
     /* ButtonNavigationItem is not aware of alternate button sizes, so override here. */
     width: 16px !important;
     height: 16px !important;
 }
 
 .toolbar.label-only .dashboard.replay .item.button > .glyph {
     /* The default styles here will try to elide buttons in label-only mode. */
     display: flex !important;
 
     /* ButtonNavigationItem is not aware of alternate button sizes, so override here. */
     width: 14px !important;
     height: 14px !important;
 }
 
+.toolbar .dashboard.replay > .dashboard-timeline-overview {
+    -webkit-flex-grow: 1;
+    -webkit-order: 2;
+    margin-left: 4px;
+}
diff --git a/Source/WebInspectorUI/UserInterface/Views/ReplayDashboardView.js b/Source/WebInspectorUI/UserInterface/Views/ReplayDashboardView.js
index 956da3e..5cbe52f 100644
--- a/Source/WebInspectorUI/UserInterface/Views/ReplayDashboardView.js
+++ b/Source/WebInspectorUI/UserInterface/Views/ReplayDashboardView.js
@@ -38,22 +38,35 @@ WebInspector.ReplayDashboardView = function(representedObject)
     this._replayButtonItem = new WebInspector.ToggleButtonNavigationItem("replay-dashboard-replay", WebInspector.UIString("Start Playback"), WebInspector.UIString("Pause Playback"), "Images/ReplayPlayButton.svg", "Images/ReplayPauseButton.svg", 16, 16);
     this._replayButtonItem.addEventListener(WebInspector.ButtonNavigationItem.Event.Clicked, this._replayButtonItemClicked, this);
     this._replayButtonItem.hidden = true;
     this._navigationBar.addNavigationItem(this._replayButtonItem);
 
     this._ejectButtonItem = new WebInspector.ButtonNavigationItem("replay-dashboard-eject", WebInspector.UIString("Eject Recording"), "Images/ReplayEjectButton.svg", 16, 16);
     this._ejectButtonItem.addEventListener(WebInspector.ButtonNavigationItem.Event.Clicked, this._ejectButtonItemClicked, this);
     this._ejectButtonItem.hidden = true;
     this._navigationBar.addNavigationItem(this._ejectButtonItem);
 
-    var recordingContainerElement = this._recordingContainerElement = this.element.appendChild(document.createElement("div"));
-    recordingContainerElement.className = WebInspector.ReplayDashboardView.RecordingContainerStyleClassName;
+    this._discreteTimelineOverviewGraphMap = new Map;
+    this._discreteTimelineOverviewGraphMap.set(WebInspector.TimelineRecord.Type.Network, new WebInspector.SimpleNetworkTimelineOverviewGraph(WebInspector.timelineManager.activeRecording));
+    this._discreteTimelineOverviewGraphMap.set(WebInspector.TimelineRecord.Type.Layout, new WebInspector.LayoutTimelineOverviewGraph(WebInspector.timelineManager.activeRecording));
+    this._discreteTimelineOverviewGraphMap.set(WebInspector.TimelineRecord.Type.Script, new WebInspector.ScriptTimelineOverviewGraph(WebInspector.timelineManager.activeRecording));
+
+    this._timelineOverview = new WebInspector.DashboardTimelineOverview(this._discreteTimelineOverviewGraphMap);
+//    this._timelineOverview.addEventListener(WebInspector.DashboardTimelineOverview.Event.TimeRangeSelectionChanged, this._timeRangeSelectionChanged, this);
+    this.element.appendChild(this._timelineOverview.element);
+
+    this._updating = false;
+    this._currentTime = NaN;
+    this._lastUpdateTimestamp = NaN;
+    this._startTimeNeedsReset = true;
+
+    WebInspector.timelineManager.activeRecording.addEventListener(WebInspector.TimelineRecording.Event.Reset, this._recordingReset, this);
 
     // Add events required to track capture and replay state.
     WebInspector.replayManager.addEventListener(WebInspector.ReplayManager.Event.CaptureStarted, this._captureStarted, this);
     WebInspector.replayManager.addEventListener(WebInspector.ReplayManager.Event.CaptureStopped, this._captureStopped, this);
     WebInspector.replayManager.addEventListener(WebInspector.ReplayManager.Event.PlaybackStarted, this._playbackStarted, this);
     WebInspector.replayManager.addEventListener(WebInspector.ReplayManager.Event.PlaybackPaused, this._playbackPaused, this);
     WebInspector.replayManager.addEventListener(WebInspector.ReplayManager.Event.PlaybackFinished, this._playbackFinished, this);
     WebInspector.replayManager.addEventListener(WebInspector.ReplayManager.Event.ActiveSessionChanged, this._activeSessionChanged, this);
 
     // Manually initialize style classes by querying current replay state.
@@ -62,23 +75,20 @@ WebInspector.ReplayDashboardView = function(representedObject)
     else if (WebInspector.replayManager.sessionState === WebInspector.ReplayManager.SessionState.Inactive)
         this._activeSessionChanged();
     // ReplayManager.sessionState must be Replaying.
     else if (WebInspector.replayManager.segmentState === WebInspector.ReplayManager.SegmentState.Dispatching)
         this._playbackStarted();
     // ReplayManager.sessionState must be Unloaded or Loaded, so execution is paused.
     else
         this._playbackPaused();
 };
 
-// Class names for top-level flex items within the replay dashboard.
-WebInspector.ReplayDashboardView.RecordingContainerStyleClassName = "recording-container";
-
 // Class names for single buttons.
 WebInspector.ReplayDashboardView.RecordButtonStyleClassName = "record-button";
 WebInspector.ReplayDashboardView.ReplayButtonStyleClassName = "replay-button";
 
 WebInspector.ReplayDashboardView.prototype = {
     constructor: WebInspector.ReplayDashboardView,
     __proto__: WebInspector.DashboardView.prototype,
 
     // Private
 
@@ -119,28 +129,32 @@ WebInspector.ReplayDashboardView.prototype = {
             console.error("Failed to eject current recording: ", error);
         });
     },
 
     _captureStarted: function()
     {
         this._captureButtonItem.hidden = false;
         this._captureButtonItem.activated = true;
         this._replayButtonItem.hidden = true;
         this._ejectButtonItem.hidden = true;
+
+        this._startUpdatingCurrentTime();
     },
 
     _captureStopped: function()
     {
         this._captureButtonItem.activated = false;
         this._captureButtonItem.hidden = true;
         this._replayButtonItem.hidden = false;
         this._ejectButtonItem.hidden = false;
+
+        this._stopUpdatingCurrentTime();
     },
 
     _playbackStarted: function()
     {
         this._replayButtonItem.toggled = true;
     },
 
     _playbackPaused: function()
     {
         this._replayButtonItem.toggled = false;
@@ -159,12 +173,107 @@ WebInspector.ReplayDashboardView.prototype = {
                 if (!session.segments.length) {
                     view._captureButtonItem.hidden = false;
                     view._replayButtonItem.hidden = true;
                     view._ejectButtonItem.hidden = true;
                 } else {
                     view._captureButtonItem.hidden = true;
                     view._replayButtonItem.hidden = false;
                     view._ejectButtonItem.hidden = false;
                 }
             });
-    }
+    },
+
+    _recordingReset: function(event)
+    {
+        this._currentTime = NaN;
+
+        if (!this._updating) {
+            // Force the time ruler and views to reset to 0.
+            this._startTimeNeedsReset = true;
+            this._updateTimes(0, 0, 0);
+        }
+
+        this._lastUpdateTimestamp = NaN;
+        this._startTimeNeedsReset = true;
+
+        WebInspector.timelineManager.activeRecording.removeEventListener(WebInspector.TimelineRecording.Event.TimesUpdated, this._recordingTimesUpdated, this);
+        delete this._waitingToResetCurrentTime;
+
+        for (var timelineOverviewGraph of this._discreteTimelineOverviewGraphMap.values())
+            timelineOverviewGraph.reset();
+    },
+
+    _update: function(timestamp)
+    {
+        if (this._waitingToResetCurrentTime) {
+            requestAnimationFrame(this._updateCallback);
+            return;
+        }
+
+        var startTime = WebInspector.timelineManager.activeRecording.startTime;
+        var endTime = WebInspector.timelineManager.activeRecording.endTime;
+        var currentTime = this._currentTime || startTime;
+        var timespanSinceLastUpdate = (timestamp - this._lastUpdateTimestamp) / 1000 || 0;
+
+        currentTime += timespanSinceLastUpdate;
+
+        this._updateTimes(startTime, currentTime, endTime);
+
+        // Only stop updating if the current time is greater than the end time.
+        if (!this._updating && currentTime >= endTime) {
+            this._lastUpdateTimestamp = NaN;
+            return;
+        }
+
+        this._lastUpdateTimestamp = timestamp;
+
+        requestAnimationFrame(this._updateCallback);
+    },
+
+    _updateTimes: function(startTime, currentTime, endTime)
+    {
+        if (this._startTimeNeedsReset && !isNaN(startTime)) {
+            var selectionOffset = this._timelineOverview.selectionStartTime - this._timelineOverview.startTime;
+
+            this._timelineOverview.zeroTime = startTime;
+            this._timelineOverview.startTime = startTime;
+            this._timelineOverview.selectionStartTime = startTime + selectionOffset;
+
+            delete this._startTimeNeedsReset;
+        }
+
+        this._timelineOverview.endTime = Math.max(endTime, currentTime);
+
+        this._currentTime = currentTime;
+        this._timelineOverview.currentTime = currentTime;
+
+        // Force a layout now since we are already in an animation frame and don't need to delay it until the next.
+        this._timelineOverview.updateLayoutIfNeeded();
+    },
+
+    _startUpdatingCurrentTime: function()
+    {
+        console.assert(!this._updating);
+        if (this._updating)
+            return;
+
+        if (!isNaN(this._currentTime)) {
+            // We have a current time already, so we likely need to jump into the future to a better current time.
+            // This happens when you stop and later restart recording.
+            this._waitingToResetCurrentTime = true;
+            WebInspector.timelineManager.activeRecording.addEventListener(WebInspector.TimelineRecording.Event.TimesUpdated, this._recordingTimesUpdated, this);
+        }
+
+        this._updating = true;
+
+        if (!this._updateCallback)
+            this._updateCallback = this._update.bind(this);
+
+        requestAnimationFrame(this._updateCallback);
+    },
+
+    _stopUpdatingCurrentTime: function()
+    {
+        console.assert(this._updating);
+        this._updating = false;
+    },
 };
diff --git a/Source/WebInspectorUI/UserInterface/Views/SimpleNetworkTimelineOverviewGraph.js b/Source/WebInspectorUI/UserInterface/Views/SimpleNetworkTimelineOverviewGraph.js
new file mode 100644
index 0000000..071ba95
--- /dev/null
+++ b/Source/WebInspectorUI/UserInterface/Views/SimpleNetworkTimelineOverviewGraph.js
@@ -0,0 +1,95 @@
+/*
+ * Copyright (C) 2014 Apple Inc. All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in the
+ *    documentation and/or other materials provided with the distribution.
+ *
+ * THIS SOFTWARE IS PROVIDED BY APPLE INC. AND ITS CONTRIBUTORS ``AS IS''
+ * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
+ * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
+ * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL APPLE INC. OR ITS CONTRIBUTORS
+ * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
+ * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
+ * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
+ * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
+ * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
+ * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF
+ * THE POSSIBILITY OF SUCH DAMAGE.
+ */
+
+WebInspector.SimpleNetworkTimelineOverviewGraph = function(recording)
+{
+    WebInspector.TimelineOverviewGraph.call(this, recording);
+
+    this.element.classList.add(WebInspector.SimpleNetworkTimelineOverviewGraph.StyleClassName);
+
+    this._networkTimeline = recording.timelines.get(WebInspector.TimelineRecord.Type.Network);
+    this._networkTimeline.addEventListener(WebInspector.Timeline.Event.RecordAdded, this._networkTimelineRecordAdded, this);
+
+    this._timelineRecordBars = [];
+
+    this.reset();
+};
+
+WebInspector.SimpleNetworkTimelineOverviewGraph.StyleClassName = "network";
+
+WebInspector.SimpleNetworkTimelineOverviewGraph.prototype = {
+    constructor: WebInspector.SimpleNetworkTimelineOverviewGraph,
+    __proto__: WebInspector.TimelineOverviewGraph.prototype,
+
+    // Public
+
+    reset: function()
+    {
+        WebInspector.TimelineOverviewGraph.prototype.reset.call(this);
+
+        this._timelineRecordBarMap = new Map;
+
+        this.element.removeChildren();
+    },
+
+    updateLayout: function()
+    {
+        WebInspector.TimelineOverviewGraph.prototype.updateLayout.call(this);
+
+        var secondsPerPixel = this.timelineOverview.secondsPerPixel;
+
+        var recordBarIndex = 0;
+
+        function createBar(records, renderMode)
+        {
+            var timelineRecordBar = this._timelineRecordBars[recordBarIndex];
+            if (!timelineRecordBar)
+                timelineRecordBar = this._timelineRecordBars[recordBarIndex] = new WebInspector.TimelineRecordBar(records, renderMode);
+            else {
+                timelineRecordBar.renderMode = renderMode;
+                timelineRecordBar.records = records;
+            }
+            timelineRecordBar.refresh(this);
+            if (!timelineRecordBar.element.parentNode)
+                this.element.appendChild(timelineRecordBar.element);
+            ++recordBarIndex;
+        }
+
+        WebInspector.TimelineRecordBar.createCombinedBars(this._networkTimeline.records, secondsPerPixel, this, createBar.bind(this));
+
+        // Remove the remaining unused TimelineRecordBars.
+        for (; recordBarIndex < this._timelineRecordBars.length; ++recordBarIndex) {
+            this._timelineRecordBars[recordBarIndex].records = null;
+            this._timelineRecordBars[recordBarIndex].element.remove();
+        }
+    },
+
+    // Private
+
+    _networkTimelineRecordAdded: function(event)
+    {
+        this.needsLayout();
+    }
+};
-- 
2.2.2

