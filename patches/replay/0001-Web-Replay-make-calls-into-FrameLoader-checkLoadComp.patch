From 4a6eb25d90f48682ca557a2ebc82ad267d03ff9c Mon Sep 17 00:00:00 2001
From: "Brian J. Burg" <burg@cs.washington.edu>
Date: Tue, 15 Jul 2014 14:34:56 -0700
Subject: [PATCH] Web Replay: make calls into FrameLoader::checkLoadComplete()
 deterministic https://bugs.webkit.org/show_bug.cgi?id=129451

Reviewed by NOBODY (OOPS!).

Source/WebCore:

To ensure deterministic JavaScript execution, calls to checkLoadComplete()
that originate from asynchronous Timer firings should be captured and replayed.

This patch introduces the ReplayableTimer class, which can be used as a drop-in
replacement for one-shot timers. It will automatically capture or replay the
timer depending on the replay session state. During capturing, it forwards calls
to a real Timer instance and records when callbacks fire. During playback, the
Timer instance is not used, and dispatch is initiated by EventLoopInputDispatcher.

If replay is not active, the timer will forward all calls to a regular Timer instance.
If !ENABLE(WEB_REPLAY), then calls unconditionally forward to a real Timer instance.

No new tests. Testing this relies on deterministic resource loading, DOM timers,
and initial back/forward history, none of which have landed yet. Once they do land,
nondeterminism of checkLoadComplete() will be caught by divergence assertions.

[TEST STRATEGY] Write a test page which induces many calls to checkLoadComplete().
Capture and replay it back; rely on divergence assertions to catch nondeterminism.

* CMakeLists.txt:
* WebCore.vcxproj/WebCore.vcxproj:
* WebCore.vcxproj/WebCore.vcxproj.filters:
* WebCore.vcxproj/copyForwardingHeaders.cmd:
* WebCore.xcodeproj/project.pbxproj:
* css/CSSFontSelector.cpp:
(WebCore::CSSFontSelector::beginLoadingFontSoon):
(WebCore::CSSFontSelector::beginLoadTimerFired):
* css/CSSFontSelector.h: Use a ReplayableTimer for m_beginLoadingTimer.

* dom/Document.cpp: Use a ReplayableTimer for m_loadEventDelayTimer. Keep
a map of replayable timers active for the current document.
(WebCore::Document::Document):
(WebCore::Document::decrementLoadEventDelayCount):
(WebCore::Document::loadEventDelayTimerFired):
* dom/Document.h:
(WebCore::Document::replayableTimers):

* loader/FrameLoader.cpp: Use a ReplayableTimer for m_checkLoadTimer.
(WebCore::FrameLoader::checkTimerFired):
(WebCore::FrameLoader::startCheckCompleteTimer):
* loader/FrameLoader.h:

* replay/ReplayInputDispatchMethods.cpp:
(WebCore::AsyncTimerFired::dispatch): Added.

* replay/ReplayableTimer.cpp: Added.
(WebCore::ReplayableTimerBase::ReplayableTimerBase):
(WebCore::ReplayableTimerBase::~ReplayableTimerBase):
(WebCore::ReplayableTimerBase::timerFired):
(WebCore::ReplayableTimerBase::startOneShot):
(WebCore::ReplayableTimerBase::stop):
* replay/ReplayableTimer.h: Added.
(WebCore::ReplayableTimerBase::isActive):
(WebCore::ReplayableTimerBase::ordinal):
(WebCore::ReplayableTimerBase::setOrdinal):
(WebCore::ReplayableTimer::ReplayableTimer):
(WebCore::ReplayableTimerBase::startOneShot):
* replay/ReplayableTimers.cpp: Added.
(WebCore::ReplayableTimers::ReplayableTimers):
(WebCore::ReplayableTimers::registerTimer):
(WebCore::ReplayableTimers::fireTimer):
* replay/ReplayableTimers.h: Added.

* replay/WebInputs.json:

Source/WebKit:

* CMakeLists.txt: Add replay/ directory to header include paths, since
ReplayableTimer.h is included by Document.h.

Source/WebKit2:

* CMakeLists.txt: Add replay/ directory to header include paths.
---
 Source/WebCore/CMakeLists.txt                      |   1 +
 Source/WebCore/ChangeLog                           |  72 +++++++++++++
 Source/WebCore/WebCore.vcxproj/WebCore.vcxproj     |   4 +-
 .../WebCore.vcxproj/WebCore.vcxproj.filters        |   8 +-
 .../WebCore.vcxproj/copyForwardingHeaders.cmd      |   1 +
 Source/WebCore/WebCore.xcodeproj/project.pbxproj   |  16 +++
 Source/WebCore/css/CSSFontSelector.cpp             |   2 +-
 Source/WebCore/css/CSSFontSelector.h               |   4 +-
 Source/WebCore/dom/Document.cpp                    |   4 +-
 Source/WebCore/dom/Document.h                      |  10 +-
 Source/WebCore/loader/FrameLoader.cpp              |   2 +-
 Source/WebCore/loader/FrameLoader.h                |   4 +-
 .../WebCore/replay/ReplayInputDispatchMethods.cpp  |  12 +++
 Source/WebCore/replay/ReplayableTimer.cpp          | 105 +++++++++++++++++++
 Source/WebCore/replay/ReplayableTimer.h            | 115 +++++++++++++++++++++
 Source/WebCore/replay/ReplayableTimers.cpp         |  79 ++++++++++++++
 Source/WebCore/replay/ReplayableTimers.h           |  55 ++++++++++
 Source/WebCore/replay/WebInputs.json               |   9 ++
 Source/WebKit/CMakeLists.txt                       |   1 +
 Source/WebKit/ChangeLog                            |  10 ++
 Source/WebKit2/CMakeLists.txt                      |   1 +
 Source/WebKit2/ChangeLog                           |   9 ++
 22 files changed, 514 insertions(+), 10 deletions(-)
 create mode 100644 Source/WebCore/replay/ReplayableTimer.cpp
 create mode 100644 Source/WebCore/replay/ReplayableTimer.h
 create mode 100644 Source/WebCore/replay/ReplayableTimers.cpp
 create mode 100644 Source/WebCore/replay/ReplayableTimers.h

diff --git a/Source/WebCore/CMakeLists.txt b/Source/WebCore/CMakeLists.txt
index ef64afb..fddff1e 100644
--- a/Source/WebCore/CMakeLists.txt
+++ b/Source/WebCore/CMakeLists.txt
@@ -2455,20 +2455,21 @@ set(WebCore_SOURCES
     rendering/svg/SVGTextLayoutAttributes.cpp
     rendering/svg/SVGTextLayoutAttributesBuilder.cpp
     rendering/svg/SVGTextLayoutEngine.cpp
     rendering/svg/SVGTextLayoutEngineBaseline.cpp
     rendering/svg/SVGTextLayoutEngineSpacing.cpp
     rendering/svg/SVGTextMetrics.cpp
     rendering/svg/SVGTextMetricsBuilder.cpp
     rendering/svg/SVGTextQuery.cpp
     rendering/svg/SVGTextRunRenderingContext.cpp
 
+    replay/ReplayableTimer.cpp
     replay/UserInputBridge.cpp
 
     storage/Storage.cpp
     storage/StorageEvent.cpp
     storage/StorageEventDispatcher.cpp
     storage/StorageMap.cpp
     storage/StorageNamespaceProvider.cpp
 
     style/InlineTextBoxStyle.cpp
     style/StyleFontSizeFunctions.cpp
diff --git a/Source/WebCore/ChangeLog b/Source/WebCore/ChangeLog
index 61369cf..cc1d365 100644
--- a/Source/WebCore/ChangeLog
+++ b/Source/WebCore/ChangeLog
@@ -1,10 +1,82 @@
+2014-07-15  Brian J. Burg  <burg@cs.washington.edu>
+
+        Web Replay: make calls into FrameLoader::checkLoadComplete() deterministic
+        https://bugs.webkit.org/show_bug.cgi?id=129451
+
+        Reviewed by NOBODY (OOPS!).
+
+        To ensure deterministic JavaScript execution, calls to checkLoadComplete()
+        that originate from asynchronous Timer firings should be captured and replayed.
+
+        This patch introduces the ReplayableTimer class, which can be used as a drop-in
+        replacement for one-shot timers. It will automatically capture or replay the
+        timer depending on the replay session state. During capturing, it forwards calls
+        to a real Timer instance and records when callbacks fire. During playback, the
+        Timer instance is not used, and dispatch is initiated by EventLoopInputDispatcher.
+
+        If replay is not active, the timer will forward all calls to a regular Timer instance.
+        If !ENABLE(WEB_REPLAY), then calls unconditionally forward to a real Timer instance.
+
+        No new tests. Testing this relies on deterministic resource loading, DOM timers,
+        and initial back/forward history, none of which have landed yet. Once they do land,
+        nondeterminism of checkLoadComplete() will be caught by divergence assertions.
+
+        [TEST STRATEGY] Write a test page which induces many calls to checkLoadComplete().
+        Capture and replay it back; rely on divergence assertions to catch nondeterminism.
+
+        * CMakeLists.txt:
+        * WebCore.vcxproj/WebCore.vcxproj:
+        * WebCore.vcxproj/WebCore.vcxproj.filters:
+        * WebCore.vcxproj/copyForwardingHeaders.cmd:
+        * WebCore.xcodeproj/project.pbxproj:
+        * css/CSSFontSelector.cpp:
+        (WebCore::CSSFontSelector::beginLoadingFontSoon):
+        (WebCore::CSSFontSelector::beginLoadTimerFired):
+        * css/CSSFontSelector.h: Use a ReplayableTimer for m_beginLoadingTimer.
+
+        * dom/Document.cpp: Use a ReplayableTimer for m_loadEventDelayTimer. Keep
+        a map of replayable timers active for the current document.
+        (WebCore::Document::Document):
+        (WebCore::Document::decrementLoadEventDelayCount):
+        (WebCore::Document::loadEventDelayTimerFired):
+        * dom/Document.h:
+        (WebCore::Document::replayableTimers):
+
+        * loader/FrameLoader.cpp: Use a ReplayableTimer for m_checkLoadTimer.
+        (WebCore::FrameLoader::checkTimerFired):
+        (WebCore::FrameLoader::startCheckCompleteTimer):
+        * loader/FrameLoader.h:
+
+        * replay/ReplayInputDispatchMethods.cpp:
+        (WebCore::AsyncTimerFired::dispatch): Added.
+
+        * replay/ReplayableTimer.cpp: Added.
+        (WebCore::ReplayableTimerBase::ReplayableTimerBase):
+        (WebCore::ReplayableTimerBase::~ReplayableTimerBase):
+        (WebCore::ReplayableTimerBase::timerFired):
+        (WebCore::ReplayableTimerBase::startOneShot):
+        (WebCore::ReplayableTimerBase::stop):
+        * replay/ReplayableTimer.h: Added.
+        (WebCore::ReplayableTimerBase::isActive):
+        (WebCore::ReplayableTimerBase::ordinal):
+        (WebCore::ReplayableTimerBase::setOrdinal):
+        (WebCore::ReplayableTimer::ReplayableTimer):
+        (WebCore::ReplayableTimerBase::startOneShot):
+        * replay/ReplayableTimers.cpp: Added.
+        (WebCore::ReplayableTimers::ReplayableTimers):
+        (WebCore::ReplayableTimers::registerTimer):
+        (WebCore::ReplayableTimers::fireTimer):
+        * replay/ReplayableTimers.h: Added.
+
+        * replay/WebInputs.json:
+
 2015-01-21  Manuel Rego Casasnovas  <rego@igalia.com>
 
         first-letter pseudo-element from ancestors is not being ignored in grids and flexboxes
         https://bugs.webkit.org/show_bug.cgi?id=138424
 
         Reviewed by Benjamin Poulain.
 
         Source/WebCore:
 
         According to the grid and flexbox specs:
diff --git a/Source/WebCore/WebCore.vcxproj/WebCore.vcxproj b/Source/WebCore/WebCore.vcxproj/WebCore.vcxproj
index dab07db..4c01e6d 100644
--- a/Source/WebCore/WebCore.vcxproj/WebCore.vcxproj
+++ b/Source/WebCore/WebCore.vcxproj/WebCore.vcxproj
@@ -12374,20 +12374,21 @@ ﻿<?xml version="1.0" encoding="utf-8"?>
       <ExcludedFromBuild Condition="'$(Configuration)|$(Platform)'=='Debug_WinCairo|x64'">true</ExcludedFromBuild>
       <ExcludedFromBuild Condition="'$(Configuration)|$(Platform)'=='DebugSuffix|Win32'">true</ExcludedFromBuild>
       <ExcludedFromBuild Condition="'$(Configuration)|$(Platform)'=='DebugSuffix|x64'">true</ExcludedFromBuild>
       <ExcludedFromBuild Condition="'$(Configuration)|$(Platform)'=='Release|Win32'">true</ExcludedFromBuild>
       <ExcludedFromBuild Condition="'$(Configuration)|$(Platform)'=='Release|x64'">true</ExcludedFromBuild>
       <ExcludedFromBuild Condition="'$(Configuration)|$(Platform)'=='Release_WinCairo|Win32'">true</ExcludedFromBuild>
       <ExcludedFromBuild Condition="'$(Configuration)|$(Platform)'=='Release_WinCairo|x64'">true</ExcludedFromBuild>
       <ExcludedFromBuild Condition="'$(Configuration)|$(Platform)'=='Production|Win32'">true</ExcludedFromBuild>
       <ExcludedFromBuild Condition="'$(Configuration)|$(Platform)'=='Production|x64'">true</ExcludedFromBuild>
     </ClCompile>
+    <ClCompile Include="..\replay\ReplayableTimer.cpp" />
     <ClCompile Include="..\replay\UserInputBridge.cpp" />
     <ClCompile Include="..\xml\DOMParser.cpp" />
     <ClCompile Include="..\xml\NativeXPathNSResolver.cpp" />
     <ClCompile Include="..\xml\XMLErrors.cpp" />
     <ClCompile Include="..\xml\XMLHttpRequest.cpp" />
     <ClCompile Include="..\xml\XMLHttpRequestException.cpp" />
     <ClCompile Include="..\xml\XMLHttpRequestProgressEventThrottle.cpp" />
     <ClCompile Include="..\xml\XMLHttpRequestUpload.cpp" />
     <ClCompile Include="..\xml\XMLSerializer.cpp" />
     <ClCompile Include="..\xml\XMLTreeViewer.cpp" />
@@ -20391,20 +20392,21 @@ ﻿<?xml version="1.0" encoding="utf-8"?>
     <ClInclude Include="..\rendering\svg\SVGTextFragment.h" />
     <ClInclude Include="..\rendering\svg\SVGTextLayoutAttributes.h" />
     <ClInclude Include="..\rendering\svg\SVGTextLayoutAttributesBuilder.h" />
     <ClInclude Include="..\rendering\svg\SVGTextLayoutEngine.h" />
     <ClInclude Include="..\rendering\svg\SVGTextLayoutEngineBaseline.h" />
     <ClInclude Include="..\rendering\svg\SVGTextLayoutEngineSpacing.h" />
     <ClInclude Include="..\rendering\svg\SVGTextMetrics.h" />
     <ClInclude Include="..\rendering\svg\SVGTextMetricsBuilder.h" />
     <ClInclude Include="..\rendering\svg\SVGTextQuery.h" />
     <ClInclude Include="..\rendering\svg\SVGTextRunRenderingContext.h" />
+    <ClInclude Include="..\replay\ReplayableTimer.h" />
     <ClInclude Include="..\replay\UserInputBridge.h" />
     <ClInclude Include="..\xml\DOMParser.h" />
     <ClInclude Include="..\xml\NativeXPathNSResolver.h" />
     <ClInclude Include="..\xml\XMLErrors.h" />
     <ClInclude Include="..\xml\XMLHttpRequest.h" />
     <ClInclude Include="..\xml\XMLHttpRequestException.h" />
     <ClInclude Include="..\xml\XMLHttpRequestProgressEvent.h" />
     <ClInclude Include="..\xml\XMLHttpRequestProgressEventThrottle.h" />
     <ClInclude Include="..\xml\XMLHttpRequestUpload.h" />
     <ClInclude Include="..\xml\XMLSerializer.h" />
@@ -21316,11 +21318,11 @@ ﻿<?xml version="1.0" encoding="utf-8"?>
       <ExcludedFromBuild Condition="'$(Configuration)|$(Platform)'=='DebugSuffix|x64'">true</ExcludedFromBuild>
       <ExcludedFromBuild Condition="'$(Configuration)|$(Platform)'=='Release|x64'">true</ExcludedFromBuild>
       <ExcludedFromBuild Condition="'$(Configuration)|$(Platform)'=='Release_WinCairo|x64'">true</ExcludedFromBuild>
       <ExcludedFromBuild Condition="'$(Configuration)|$(Platform)'=='Production|x64'">true</ExcludedFromBuild>
     </MASM>
   </ItemGroup>
   <Import Project="$(VCTargetsPath)\Microsoft.Cpp.targets" />
   <ImportGroup Label="ExtensionTargets">
     <Import Project="$(VCTargetsPath)\BuildCustomizations\masm.targets" />
   </ImportGroup>
-</Project>
\ No newline at end of file
+</Project>
diff --git a/Source/WebCore/WebCore.vcxproj/WebCore.vcxproj.filters b/Source/WebCore/WebCore.vcxproj/WebCore.vcxproj.filters
index 2f92d91..c2753fc 100644
--- a/Source/WebCore/WebCore.vcxproj/WebCore.vcxproj.filters
+++ b/Source/WebCore/WebCore.vcxproj/WebCore.vcxproj.filters
@@ -2897,20 +2897,23 @@ ﻿<?xml version="1.0" encoding="utf-8"?>
     </ClCompile>
     <ClCompile Include="..\rendering\svg\SVGTextQuery.cpp">
       <Filter>rendering\svg</Filter>
     </ClCompile>
     <ClCompile Include="..\rendering\svg\SVGTextRunRenderingContext.cpp">
       <Filter>rendering\svg</Filter>
     </ClCompile>
     <ClCompile Include="..\rendering\TextPainter.cpp">
       <Filter>rendering</Filter>
     </ClCompile>
+    <ClCompile Include="..\replay\ReplayableTimer.cpp">
+      <Filter>replay</Filter>
+    </ClCompile>
     <ClCompile Include="..\replay\UserInputBridge.cpp">
       <Filter>replay</Filter>
     </ClCompile>
     <ClCompile Include="..\xml\DOMParser.cpp">
       <Filter>xml</Filter>
     </ClCompile>
     <ClCompile Include="..\xml\NativeXPathNSResolver.cpp">
       <Filter>xml</Filter>
     </ClCompile>
     <ClCompile Include="..\xml\XMLErrors.cpp">
@@ -9881,20 +9884,23 @@ ﻿<?xml version="1.0" encoding="utf-8"?>
     </ClInclude>
     <ClInclude Include="..\rendering\svg\SVGTextMetricsBuilder.h">
       <Filter>rendering\svg</Filter>
     </ClInclude>
     <ClInclude Include="..\rendering\svg\SVGTextQuery.h">
       <Filter>rendering\svg</Filter>
     </ClInclude>
     <ClInclude Include="..\rendering\svg\SVGTextRunRenderingContext.h">
       <Filter>rendering\svg</Filter>
     </ClInclude>
+    <ClInclude Include="..\replay\ReplayableTimer.h">
+      <Filter>replay</Filter>
+    </ClInclude>
     <ClInclude Include="..\replay\UserInputBridge.h">
       <Filter>replay</Filter>
     </ClInclude>
     <ClInclude Include="..\xml\DOMParser.h">
       <Filter>xml</Filter>
     </ClInclude>
     <ClInclude Include="..\xml\NativeXPathNSResolver.h">
       <Filter>xml</Filter>
     </ClInclude>
     <ClInclude Include="..\xml\XMLErrors.h">
@@ -15295,11 +15301,11 @@ ﻿<?xml version="1.0" encoding="utf-8"?>
     </CustomBuildStep>
     <CustomBuildStep Include="..\rendering\RenderThemeWin.h">
       <Filter>rendering</Filter>
     </CustomBuildStep>
   </ItemGroup>
   <ItemGroup>
     <MASM Include="..\platform\win\makesafeseh.asm">
       <Filter>platform\win</Filter>
     </MASM>
   </ItemGroup>
-</Project>
\ No newline at end of file
+</Project>
diff --git a/Source/WebCore/WebCore.vcxproj/copyForwardingHeaders.cmd b/Source/WebCore/WebCore.vcxproj/copyForwardingHeaders.cmd
index 525b940..6b52f2d 100644
--- a/Source/WebCore/WebCore.vcxproj/copyForwardingHeaders.cmd
+++ b/Source/WebCore/WebCore.vcxproj/copyForwardingHeaders.cmd
@@ -81,20 +81,21 @@ xcopy /y /d "%ProjectDir%..\page\win\*.h" "%CONFIGURATIONBUILDDIR%\include\WebCo
 xcopy /y /d "%ProjectDir%..\bridge\*.h" "%CONFIGURATIONBUILDDIR%\include\WebCore"
 xcopy /y /d "%ProjectDir%..\bridge\c\*.h" "%CONFIGURATIONBUILDDIR%\include\WebCore"
 xcopy /y /d "%ProjectDir%..\bridge\jsc\*.h" "%CONFIGURATIONBUILDDIR%\include\WebCore"
 xcopy /y /d "%ProjectDir%..\plugins\*.h" "%CONFIGURATIONBUILDDIR%\include\WebCore"
 xcopy /y /d "%ProjectDir%..\plugins\win\*.h" "%CONFIGURATIONBUILDDIR%\include\WebCore"
 xcopy /y /d "%ProjectDir%..\rendering\*.h" "%CONFIGURATIONBUILDDIR%\include\WebCore"
 xcopy /y /d "%ProjectDir%..\rendering\line\*.h" "%CONFIGURATIONBUILDDIR%\include\WebCore"
 xcopy /y /d "%ProjectDir%..\rendering\style\*.h" "%CONFIGURATIONBUILDDIR%\include\WebCore"
 xcopy /y /d "%ProjectDir%..\rendering\shapes\*.h" "%CONFIGURATIONBUILDDIR%\include\WebCore"
 xcopy /y /d "%ProjectDir%..\rendering\svg\*.h" "%CONFIGURATIONBUILDDIR%\include\WebCore"
+xcopy /y /d "%ProjectDir%..\replay\*.h" "%CONFIGURATIONBUILDDIR%\include\WebCore"
 xcopy /y /d "%ProjectDir%..\editing\*.h" "%CONFIGURATIONBUILDDIR%\include\WebCore"
 xcopy /y /d "%ProjectDir%..\dom\*.h" "%CONFIGURATIONBUILDDIR%\include\WebCore"
 xcopy /y /d "%ProjectDir%..\xml\parser\*.h" "%CONFIGURATIONBUILDDIR%\include\WebCore"
 xcopy /y /d "%ProjectDir%..\xml\*.h" "%CONFIGURATIONBUILDDIR%\include\WebCore"
 xcopy /y /d "%ProjectDir%..\svg\animation\*.h" "%CONFIGURATIONBUILDDIR%\include\WebCore"
 xcopy /y /d "%ProjectDir%..\svg\graphics\*.h" "%CONFIGURATIONBUILDDIR%\include\WebCore"
 xcopy /y /d "%ProjectDir%..\svg\properties\*.h" "%CONFIGURATIONBUILDDIR%\include\WebCore"
 xcopy /y /d "%ProjectDir%..\svg\*.h" "%CONFIGURATIONBUILDDIR%\include\WebCore"
 xcopy /y /d "%ProjectDir%..\storage\*.h" "%CONFIGURATIONBUILDDIR%\include\WebCore"
 xcopy /y /d "%ProjectDir%..\style\*.h" "%CONFIGURATIONBUILDDIR%\include\WebCore"
diff --git a/Source/WebCore/WebCore.xcodeproj/project.pbxproj b/Source/WebCore/WebCore.xcodeproj/project.pbxproj
index e134609..368275e 100644
--- a/Source/WebCore/WebCore.xcodeproj/project.pbxproj
+++ b/Source/WebCore/WebCore.xcodeproj/project.pbxproj
@@ -5534,20 +5534,24 @@
 		C375D7FD16639519006184AB /* TypeAhead.cpp in Sources */ = {isa = PBXBuildFile; fileRef = C375D7FB16639519006184AB /* TypeAhead.cpp */; };
 		C375D7FE16639519006184AB /* TypeAhead.h in Headers */ = {isa = PBXBuildFile; fileRef = C375D7FC16639519006184AB /* TypeAhead.h */; settings = {ATTRIBUTES = (Private, ); }; };
 		C37CDEBD149EF2030042090D /* ColorChooserClient.h in Headers */ = {isa = PBXBuildFile; fileRef = C37CDEBC149EF2030042090D /* ColorChooserClient.h */; settings = {ATTRIBUTES = (Private, ); }; };
 		C3CF17A415B0063F00276D39 /* IdTargetObserver.cpp in Sources */ = {isa = PBXBuildFile; fileRef = C3CF17A015B0063F00276D39 /* IdTargetObserver.cpp */; };
 		C3CF17A515B0063F00276D39 /* IdTargetObserver.h in Headers */ = {isa = PBXBuildFile; fileRef = C3CF17A115B0063F00276D39 /* IdTargetObserver.h */; settings = {ATTRIBUTES = (Private, ); }; };
 		C3CF17A615B0063F00276D39 /* IdTargetObserverRegistry.cpp in Sources */ = {isa = PBXBuildFile; fileRef = C3CF17A215B0063F00276D39 /* IdTargetObserverRegistry.cpp */; };
 		C3CF17A715B0063F00276D39 /* IdTargetObserverRegistry.h in Headers */ = {isa = PBXBuildFile; fileRef = C3CF17A315B0063F00276D39 /* IdTargetObserverRegistry.h */; settings = {ATTRIBUTES = (Private, ); }; };
 		C400D10918F1C8F60090D863 /* EventLoopInput.cpp in Sources */ = {isa = PBXBuildFile; fileRef = C400D10818F1C8F60090D863 /* EventLoopInput.cpp */; };
 		C4CD629A18383766007EBAF1 /* FrameSnapshotting.cpp in Sources */ = {isa = PBXBuildFile; fileRef = C4CD629818383766007EBAF1 /* FrameSnapshotting.cpp */; };
 		C4CD629B18383766007EBAF1 /* FrameSnapshotting.h in Headers */ = {isa = PBXBuildFile; fileRef = C4CD629918383766007EBAF1 /* FrameSnapshotting.h */; settings = {ATTRIBUTES = (Private, ); }; };
+		C4D4F52B1975C88B003EF5BC /* ReplayableTimer.cpp in Sources */ = {isa = PBXBuildFile; fileRef = C4D4F5271975C88B003EF5BC /* ReplayableTimer.cpp */; };
+		C4D4F52C1975C88B003EF5BC /* ReplayableTimer.h in Headers */ = {isa = PBXBuildFile; fileRef = C4D4F5281975C88B003EF5BC /* ReplayableTimer.h */; settings = {ATTRIBUTES = (Private, ); }; };
+		C4D4F52D1975C88B003EF5BC /* ReplayableTimers.cpp in Sources */ = {isa = PBXBuildFile; fileRef = C4D4F5291975C88B003EF5BC /* ReplayableTimers.cpp */; };
+		C4D4F52E1975C88B003EF5BC /* ReplayableTimers.h in Headers */ = {isa = PBXBuildFile; fileRef = C4D4F52A1975C88B003EF5BC /* ReplayableTimers.h */; settings = {ATTRIBUTES = (Private, ); }; };
 		C50D0E830FF4272900AC2644 /* StorageNamespace.h in Headers */ = {isa = PBXBuildFile; fileRef = C50D0E810FF4272900AC2644 /* StorageNamespace.h */; settings = {ATTRIBUTES = (Private, ); }; };
 		C5137CF211A58378004ADB99 /* JSDOMStringList.cpp in Sources */ = {isa = PBXBuildFile; fileRef = C5137CF011A58378004ADB99 /* JSDOMStringList.cpp */; };
 		C5137CF311A58378004ADB99 /* JSDOMStringList.h in Headers */ = {isa = PBXBuildFile; fileRef = C5137CF111A58378004ADB99 /* JSDOMStringList.h */; };
 		C5278B0C17F212EA003A2998 /* PlatformPasteboardIOS.mm in Sources */ = {isa = PBXBuildFile; fileRef = C5278B0B17F212EA003A2998 /* PlatformPasteboardIOS.mm */; };
 		C544274B11A57E7A0063A749 /* DOMStringList.h in Headers */ = {isa = PBXBuildFile; fileRef = C544274911A57E7A0063A749 /* DOMStringList.h */; settings = {ATTRIBUTES = (Private, ); }; };
 		C55610F111A704EB00B82D27 /* DOMStringList.cpp in Sources */ = {isa = PBXBuildFile; fileRef = C55610F011A704EB00B82D27 /* DOMStringList.cpp */; };
 		C55C7BA11718AFBA001327E4 /* RenderThemeIOS.mm in Sources */ = {isa = PBXBuildFile; fileRef = C55C7BA01718AFBA001327E4 /* RenderThemeIOS.mm */; };
 		C572EE1F1201C9BC007D8F82 /* JSIDBIndex.h in Headers */ = {isa = PBXBuildFile; fileRef = C572EE1D1201C9BC007D8F82 /* JSIDBIndex.h */; };
 		C57FEDE11212EE9C0097BE65 /* FileSystem.cpp in Sources */ = {isa = PBXBuildFile; fileRef = C57FEDE01212EE9C0097BE65 /* FileSystem.cpp */; };
 		C58361A91744523F00173511 /* FontServicesIOS.h in Headers */ = {isa = PBXBuildFile; fileRef = C58361A71744523F00173511 /* FontServicesIOS.h */; };
@@ -12961,20 +12965,24 @@
 		C375D7FC16639519006184AB /* TypeAhead.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = TypeAhead.h; sourceTree = "<group>"; };
 		C37CDEBC149EF2030042090D /* ColorChooserClient.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = ColorChooserClient.h; sourceTree = "<group>"; };
 		C3CF17A015B0063F00276D39 /* IdTargetObserver.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = IdTargetObserver.cpp; sourceTree = "<group>"; };
 		C3CF17A115B0063F00276D39 /* IdTargetObserver.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = IdTargetObserver.h; sourceTree = "<group>"; };
 		C3CF17A215B0063F00276D39 /* IdTargetObserverRegistry.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = IdTargetObserverRegistry.cpp; sourceTree = "<group>"; };
 		C3CF17A315B0063F00276D39 /* IdTargetObserverRegistry.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = IdTargetObserverRegistry.h; sourceTree = "<group>"; };
 		C3E61C653A64807A83E76FB8 /* MathMLMencloseElement.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = MathMLMencloseElement.cpp; sourceTree = "<group>"; };
 		C400D10818F1C8F60090D863 /* EventLoopInput.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = EventLoopInput.cpp; sourceTree = "<group>"; };
 		C4CD629818383766007EBAF1 /* FrameSnapshotting.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = FrameSnapshotting.cpp; sourceTree = "<group>"; };
 		C4CD629918383766007EBAF1 /* FrameSnapshotting.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = FrameSnapshotting.h; sourceTree = "<group>"; };
+		C4D4F5271975C88B003EF5BC /* ReplayableTimer.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = ReplayableTimer.cpp; sourceTree = "<group>"; };
+		C4D4F5281975C88B003EF5BC /* ReplayableTimer.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = ReplayableTimer.h; sourceTree = "<group>"; };
+		C4D4F5291975C88B003EF5BC /* ReplayableTimers.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = ReplayableTimers.cpp; sourceTree = "<group>"; };
+		C4D4F52A1975C88B003EF5BC /* ReplayableTimers.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = ReplayableTimers.h; sourceTree = "<group>"; };
 		C50D0E810FF4272900AC2644 /* StorageNamespace.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = StorageNamespace.h; sourceTree = "<group>"; };
 		C5137CF011A58378004ADB99 /* JSDOMStringList.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = JSDOMStringList.cpp; sourceTree = "<group>"; };
 		C5137CF111A58378004ADB99 /* JSDOMStringList.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = JSDOMStringList.h; sourceTree = "<group>"; };
 		C5278B0B17F212EA003A2998 /* PlatformPasteboardIOS.mm */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.objcpp; name = PlatformPasteboardIOS.mm; path = ios/PlatformPasteboardIOS.mm; sourceTree = "<group>"; };
 		C544274911A57E7A0063A749 /* DOMStringList.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = DOMStringList.h; sourceTree = "<group>"; };
 		C544274A11A57E7A0063A749 /* DOMStringList.idl */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = text; path = DOMStringList.idl; sourceTree = "<group>"; };
 		C55610F011A704EB00B82D27 /* DOMStringList.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = DOMStringList.cpp; sourceTree = "<group>"; };
 		C55C7BA01718AFBA001327E4 /* RenderThemeIOS.mm */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.objcpp; path = RenderThemeIOS.mm; sourceTree = "<group>"; };
 		C572EE1D1201C9BC007D8F82 /* JSIDBIndex.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = JSIDBIndex.h; sourceTree = "<group>"; };
 		C57FEDE01212EE9C0097BE65 /* FileSystem.cpp */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = FileSystem.cpp; sourceTree = "<group>"; };
@@ -18413,20 +18421,24 @@
 				99CC0B3818BE9849006CEBCC /* AllReplayInputs.h */,
 				99CC0B3918BE9849006CEBCC /* CapturingInputCursor.cpp */,
 				99CC0B3A18BE9849006CEBCC /* CapturingInputCursor.h */,
 				C400D10818F1C8F60090D863 /* EventLoopInput.cpp */,
 				99E45A1618A063BE0026D88F /* EventLoopInput.h */,
 				99CC0B3B18BE9849006CEBCC /* EventLoopInputDispatcher.cpp */,
 				99CC0B3C18BE9849006CEBCC /* EventLoopInputDispatcher.h */,
 				99CC0B3D18BE9849006CEBCC /* FunctorInputCursor.h */,
 				99C7CCB418C6B8990032E413 /* MemoizedDOMResult.cpp */,
 				99C7CCB218C663E40032E413 /* MemoizedDOMResult.h */,
+				C4D4F5271975C88B003EF5BC /* ReplayableTimer.cpp */,
+				C4D4F5281975C88B003EF5BC /* ReplayableTimer.h */,
+				C4D4F5291975C88B003EF5BC /* ReplayableTimers.cpp */,
+				C4D4F52A1975C88B003EF5BC /* ReplayableTimers.h */,
 				99CC0B3E18BE9849006CEBCC /* ReplayController.cpp */,
 				99CC0B3F18BE9849006CEBCC /* ReplayController.h */,
 				99CC0B4018BE9849006CEBCC /* ReplayingInputCursor.cpp */,
 				99CC0B4118BE9849006CEBCC /* ReplayingInputCursor.h */,
 				99CC0B4218BE9849006CEBCC /* ReplayInputCreationMethods.cpp */,
 				99CC0B4318BE9849006CEBCC /* ReplayInputDispatchMethods.cpp */,
 				99CC0B4418BE9849006CEBCC /* ReplaySession.cpp */,
 				99CC0B4518BE9849006CEBCC /* ReplaySession.h */,
 				99CC0B4618BE9849006CEBCC /* ReplaySessionSegment.cpp */,
 				99CC0B4718BE9849006CEBCC /* ReplaySessionSegment.h */,
@@ -25831,20 +25843,22 @@
 				BCEA488A097D93020094C9E4 /* RenderTheme.h in Headers */,
 				FED13D520CEA949700D89466 /* RenderThemeIOS.h in Headers */,
 				BCEA4887097D93020094C9E4 /* RenderThemeMac.h in Headers */,
 				93F1998C08245E59001E9ABC /* RenderTreeAsText.h in Headers */,
 				E44614520CD68A3500FADA75 /* RenderVideo.h in Headers */,
 				BCEA4868097D93020094C9E4 /* RenderView.h in Headers */,
 				BE20507E18A458C20080647E /* RenderVTTCue.h in Headers */,
 				A871DFE40A15376B00B12A68 /* RenderWidget.h in Headers */,
 				A89CCC530F44E98100B5DA10 /* ReplaceNodeWithSpanCommand.h in Headers */,
 				93309E0A099E64920056E581 /* ReplaceSelectionCommand.h in Headers */,
+				C4D4F52C1975C88B003EF5BC /* ReplayableTimer.h in Headers */,
+				C4D4F52E1975C88B003EF5BC /* ReplayableTimers.h in Headers */,
 				99CC0B5418BE9849006CEBCC /* ReplayController.h in Headers */,
 				99CC0B5618BE984A006CEBCC /* ReplayingInputCursor.h in Headers */,
 				99CC0B5A18BE984A006CEBCC /* ReplaySession.h in Headers */,
 				99CC0B5C18BE984A006CEBCC /* ReplaySessionSegment.h in Headers */,
 				4998AEC613F9D0EA0090B1AA /* RequestAnimationFrameCallback.h in Headers */,
 				F55B3DD01251F12D003EF269 /* ResetInputType.h in Headers */,
 				7EE6846A12D26E3800E79415 /* ResourceError.h in Headers */,
 				934F713C0D5A6F1900018D69 /* ResourceErrorBase.h in Headers */,
 				514C76790CE923A1007EF3CD /* ResourceHandle.h in Headers */,
 				26FAE4CD1852E3A5004C8C46 /* ResourceHandleCFURLConnectionDelegate.h in Headers */,
@@ -29280,20 +29294,22 @@
 				BCEA4889097D93020094C9E4 /* RenderTheme.cpp in Sources */,
 				C55C7BA11718AFBA001327E4 /* RenderThemeIOS.mm in Sources */,
 				BCEA4888097D93020094C9E4 /* RenderThemeMac.mm in Sources */,
 				93F19AD508245E59001E9ABC /* RenderTreeAsText.cpp in Sources */,
 				E44614510CD68A3500FADA75 /* RenderVideo.cpp in Sources */,
 				BCEA4867097D93020094C9E4 /* RenderView.cpp in Sources */,
 				BE20507D18A458BF0080647E /* RenderVTTCue.cpp in Sources */,
 				A871DFE50A15376B00B12A68 /* RenderWidget.cpp in Sources */,
 				A89CCC520F44E98100B5DA10 /* ReplaceNodeWithSpanCommand.cpp in Sources */,
 				93309E09099E64920056E581 /* ReplaceSelectionCommand.cpp in Sources */,
+				C4D4F52B1975C88B003EF5BC /* ReplayableTimer.cpp in Sources */,
+				C4D4F52D1975C88B003EF5BC /* ReplayableTimers.cpp in Sources */,
 				99CC0B5318BE9849006CEBCC /* ReplayController.cpp in Sources */,
 				99CC0B5518BE9849006CEBCC /* ReplayingInputCursor.cpp in Sources */,
 				267725FC1A5B3AD9003C24DD /* DFA.cpp in Sources */,
 				99CC0B5718BE984A006CEBCC /* ReplayInputCreationMethods.cpp in Sources */,
 				99CC0B5818BE984A006CEBCC /* ReplayInputDispatchMethods.cpp in Sources */,
 				99CC0B5918BE984A006CEBCC /* ReplaySession.cpp in Sources */,
 				99CC0B5B18BE984A006CEBCC /* ReplaySessionSegment.cpp in Sources */,
 				F55B3DCF1251F12D003EF269 /* ResetInputType.cpp in Sources */,
 				934F713E0D5A6F2800018D69 /* ResourceErrorBase.cpp in Sources */,
 				7EE6846B12D26E3800E79415 /* ResourceErrorCF.cpp in Sources */,
diff --git a/Source/WebCore/css/CSSFontSelector.cpp b/Source/WebCore/css/CSSFontSelector.cpp
index 3cb7cf2..f5564f0 100644
--- a/Source/WebCore/css/CSSFontSelector.cpp
+++ b/Source/WebCore/css/CSSFontSelector.cpp
@@ -564,21 +564,21 @@ void CSSFontSelector::clearDocument()
 void CSSFontSelector::beginLoadingFontSoon(CachedFont* font)
 {
     if (!m_document)
         return;
 
     m_fontsToBeginLoading.append(font);
     // Increment the request count now, in order to prevent didFinishLoad from being dispatched
     // after this font has been requested but before it began loading. Balanced by
     // decrementRequestCount() in beginLoadTimerFired() and in clearDocument().
     m_document->cachedResourceLoader()->incrementRequestCount(font);
-    m_beginLoadingTimer.startOneShot(0);
+    m_beginLoadingTimer.startOneShot(0, m_document);
 }
 
 void CSSFontSelector::beginLoadTimerFired()
 {
     Vector<CachedResourceHandle<CachedFont>> fontsToBeginLoading;
     fontsToBeginLoading.swap(m_fontsToBeginLoading);
 
     // CSSFontSelector could get deleted via beginLoadIfNeeded() or loadDone() unless protected.
     Ref<CSSFontSelector> protect(*this);
 
diff --git a/Source/WebCore/css/CSSFontSelector.h b/Source/WebCore/css/CSSFontSelector.h
index 93383f4..280c907 100644
--- a/Source/WebCore/css/CSSFontSelector.h
+++ b/Source/WebCore/css/CSSFontSelector.h
@@ -21,22 +21,22 @@
  * OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  */
 
 #ifndef CSSFontSelector_h
 #define CSSFontSelector_h
 
 #include "CachedResourceHandle.h"
 #include "FontSelector.h"
+#include "ReplayableTimer.h"
 #include "SimpleFontData.h"
-#include "Timer.h"
 #include <memory>
 #include <wtf/Forward.h>
 #include <wtf/HashMap.h>
 #include <wtf/HashSet.h>
 #include <wtf/RefPtr.h>
 #include <wtf/text/StringHash.h>
 
 namespace WebCore {
 
 class CSSFontFace;
@@ -88,19 +88,19 @@ private:
 
     void beginLoadTimerFired();
 
     Document* m_document;
     HashMap<String, std::unique_ptr<Vector<RefPtr<CSSFontFace>>>, CaseFoldingHash> m_fontFaces;
     HashMap<String, std::unique_ptr<Vector<RefPtr<CSSFontFace>>>, CaseFoldingHash> m_locallyInstalledFontFaces;
     HashMap<String, std::unique_ptr<HashMap<unsigned, RefPtr<CSSSegmentedFontFace>>>, CaseFoldingHash> m_fonts;
     HashSet<FontSelectorClient*> m_clients;
 
     Vector<CachedResourceHandle<CachedFont>> m_fontsToBeginLoading;
-    Timer m_beginLoadingTimer;
+    ReplayableTimer m_beginLoadingTimer;
 
     unsigned m_uniqueId;
     unsigned m_version;
 };
 
 } // namespace WebCore
 
 #endif // CSSFontSelector_h
diff --git a/Source/WebCore/dom/Document.cpp b/Source/WebCore/dom/Document.cpp
index 865c191..5d1efb9 100644
--- a/Source/WebCore/dom/Document.cpp
+++ b/Source/WebCore/dom/Document.cpp
@@ -213,20 +213,21 @@
 
 #if ENABLE(CSP_NEXT)
 #include "DOMSecurityPolicy.h"
 #endif
 
 #if ENABLE(VIDEO_TRACK)
 #include "CaptionUserPreferences.h"
 #endif
 
 #if ENABLE(WEB_REPLAY)
+#include "ReplayableTimers.h"
 #include "WebReplayInputs.h"
 #include <replay/EmptyInputCursor.h>
 #include <replay/InputCursor.h>
 #endif
 
 using namespace WTF;
 using namespace Unicode;
 
 namespace WebCore {
 
@@ -500,20 +501,21 @@ Document::Document(Frame* frame, const URL& url, unsigned documentClasses, unsig
     , m_visualUpdatesSuppressionTimer(*this, &Document::visualUpdatesSuppressionTimerFired)
     , m_sharedObjectPoolClearTimer(*this, &Document::sharedObjectPoolClearTimerFired)
 #ifndef NDEBUG
     , m_didDispatchViewportPropertiesChanged(false)
 #endif
 #if ENABLE(TEMPLATE_ELEMENT)
     , m_templateDocumentHost(nullptr)
 #endif
 #if ENABLE(WEB_REPLAY)
     , m_inputCursor(EmptyInputCursor::create())
+    , m_replayableTimers(std::make_unique<ReplayableTimers>())
 #endif
     , m_didAssociateFormControlsTimer(*this, &Document::didAssociateFormControlsTimerFired)
     , m_cookieCacheExpiryTimer(*this, &Document::domCookieCacheExpiryTimerFired)
     , m_disabledFieldsetElementsCount(0)
     , m_hasInjectedPlugInsScript(false)
     , m_renderTreeBeingDestroyed(false)
     , m_hasPreparedForDestruction(false)
     , m_hasStyleWithViewportUnits(false)
     , m_isPlayingAudio(false)
 {
@@ -5667,21 +5669,21 @@ Element* Document::pointerLockElement() const
     return nullptr;
 }
 #endif
 
 void Document::decrementLoadEventDelayCount()
 {
     ASSERT(m_loadEventDelayCount);
     --m_loadEventDelayCount;
 
     if (frame() && !m_loadEventDelayCount && !m_loadEventDelayTimer.isActive())
-        m_loadEventDelayTimer.startOneShot(0);
+        m_loadEventDelayTimer.startOneShot(0, this);
 }
 
 void Document::loadEventDelayTimerFired()
 {
     if (frame())
         frame()->loader().checkCompleted();
 }
 
 #if ENABLE(REQUEST_ANIMATION_FRAME)
 int Document::requestAnimationFrame(PassRefPtr<RequestAnimationFrameCallback> callback)
diff --git a/Source/WebCore/dom/Document.h b/Source/WebCore/dom/Document.h
index f1b7d3f..5d34e86 100644
--- a/Source/WebCore/dom/Document.h
+++ b/Source/WebCore/dom/Document.h
@@ -34,20 +34,21 @@
 #include "DocumentEventQueue.h"
 #include "DocumentStyleSheetCollection.h"
 #include "DocumentTiming.h"
 #include "FocusDirection.h"
 #include "IconURL.h"
 #include "MutationObserver.h"
 #include "PageVisibilityState.h"
 #include "PlatformScreen.h"
 #include "ReferrerPolicy.h"
 #include "RenderPtr.h"
+#include "ReplayableTimer.h"
 #include "ScriptExecutionContext.h"
 #include "StringWithDirection.h"
 #include "StyleResolveTree.h"
 #include "Timer.h"
 #include "TreeScope.h"
 #include "UserActionElementSet.h"
 #include "ViewportArguments.h"
 #include <chrono>
 #include <memory>
 #include <wtf/Deque.h>
@@ -187,20 +188,24 @@ class TextAutosizer;
 #endif
 
 #if ENABLE(CSP_NEXT)
 class DOMSecurityPolicy;
 #endif
 
 #if ENABLE(FONT_LOAD_EVENTS)
 class FontLoader;
 #endif
 
+#if ENABLE(WEB_REPLAY)
+class ReplayableTimers;
+#endif
+
 typedef int ExceptionCode;
 
 #if PLATFORM(IOS)
 class DeviceMotionClient;
 class DeviceMotionController;
 class DeviceOrientationClient;
 class DeviceOrientationController;
 #endif
 
 #if ENABLE(IOS_TEXT_AUTOSIZING)
@@ -484,20 +489,22 @@ public:
     void setHasXMLDeclaration(bool hasXMLDeclaration) { m_hasXMLDeclaration = hasXMLDeclaration ? 1 : 0; }
 
     String documentURI() const { return m_documentURI; }
     void setDocumentURI(const String&);
 
     virtual URL baseURI() const override final;
 
 #if ENABLE(WEB_REPLAY)
     JSC::InputCursor& inputCursor() const { return *m_inputCursor; }
     void setInputCursor(PassRefPtr<JSC::InputCursor>);
+
+    ReplayableTimers& replayableTimers() const { return *m_replayableTimers; }
 #endif
 
     void visibilityStateChanged();
     String visibilityState() const;
     bool hidden() const;
 
 #if ENABLE(CSP_NEXT)
     DOMSecurityPolicy& securityPolicy();
 #endif
 
@@ -1580,21 +1587,21 @@ private:
     RenderFullScreen* m_fullScreenRenderer;
     Timer m_fullScreenChangeDelayTimer;
     Deque<RefPtr<Node>> m_fullScreenChangeEventTargetQueue;
     Deque<RefPtr<Node>> m_fullScreenErrorEventTargetQueue;
     bool m_isAnimatingFullScreen;
     LayoutRect m_savedPlaceholderFrameRect;
     RefPtr<RenderStyle> m_savedPlaceholderRenderStyle;
 #endif
 
     int m_loadEventDelayCount;
-    Timer m_loadEventDelayTimer;
+    ReplayableTimer m_loadEventDelayTimer;
 
     ViewportArguments m_viewportArguments;
 
     ReferrerPolicy m_referrerPolicy;
 
     bool m_directionSetOnDocumentElement;
     bool m_writingModeSetOnDocumentElement;
 
 #if ENABLE(WEB_TIMING)
     DocumentTiming m_documentTiming;
@@ -1690,20 +1697,21 @@ private:
     RefPtr<Document> m_templateDocument;
     Document* m_templateDocumentHost; // Manually managed weakref (backpointer from m_templateDocument).
 #endif
 
 #if ENABLE(FONT_LOAD_EVENTS)
     RefPtr<FontLoader> m_fontloader;
 #endif
 
 #if ENABLE(WEB_REPLAY)
     RefPtr<JSC::InputCursor> m_inputCursor;
+    std::unique_ptr<ReplayableTimers> m_replayableTimers;
 #endif
 
     Timer m_didAssociateFormControlsTimer;
     Timer m_cookieCacheExpiryTimer;
     String m_cachedDOMCookies;
     HashSet<RefPtr<Element>> m_associatedFormControls;
     unsigned m_disabledFieldsetElementsCount;
 
     bool m_hasInjectedPlugInsScript;
     bool m_renderTreeBeingDestroyed;
diff --git a/Source/WebCore/loader/FrameLoader.cpp b/Source/WebCore/loader/FrameLoader.cpp
index b3ce20e..c1b1871 100644
--- a/Source/WebCore/loader/FrameLoader.cpp
+++ b/Source/WebCore/loader/FrameLoader.cpp
@@ -866,21 +866,21 @@ void FrameLoader::checkTimerFired()
     if (m_shouldCallCheckLoadComplete)
         checkLoadComplete();
 }
 
 void FrameLoader::startCheckCompleteTimer()
 {
     if (!(m_shouldCallCheckCompleted || m_shouldCallCheckLoadComplete))
         return;
     if (m_checkTimer.isActive())
         return;
-    m_checkTimer.startOneShot(0);
+    m_checkTimer.startOneShot(0, m_frame.document());
 }
 
 void FrameLoader::scheduleCheckCompleted()
 {
     m_shouldCallCheckCompleted = true;
     startCheckCompleteTimer();
 }
 
 void FrameLoader::scheduleCheckLoadComplete()
 {
diff --git a/Source/WebCore/loader/FrameLoader.h b/Source/WebCore/loader/FrameLoader.h
index 6d55806..81af379 100644
--- a/Source/WebCore/loader/FrameLoader.h
+++ b/Source/WebCore/loader/FrameLoader.h
@@ -32,24 +32,24 @@
 #ifndef FrameLoader_h
 #define FrameLoader_h
 
 #include "CachePolicy.h"
 #include "FrameLoaderStateMachine.h"
 #include "FrameLoaderTypes.h"
 #include "IconURL.h"
 #include "LayoutMilestones.h"
 #include "MixedContentChecker.h"
 #include "PageThrottler.h"
+#include "ReplayableTimer.h"
 #include "ResourceHandleTypes.h"
 #include "ResourceLoadNotifier.h"
 #include "SecurityContext.h"
-#include "Timer.h"
 #include <wtf/Forward.h>
 #include <wtf/HashSet.h>
 
 namespace WebCore {
 
 class Archive;
 class CachedFrameBase;
 class CachedPage;
 class CachedResource;
 class Chrome;
@@ -414,21 +414,21 @@ private:
     bool m_wasUnloadEventEmitted;
     PageDismissalType m_pageDismissalEventBeingDispatched;
     bool m_isComplete;
 
     RefPtr<SerializedScriptValue> m_pendingStateObject;
 
     bool m_needsClear;
 
     URL m_submittedFormURL;
 
-    Timer m_checkTimer;
+    ReplayableTimer m_checkTimer;
     bool m_shouldCallCheckCompleted;
     bool m_shouldCallCheckLoadComplete;
 
     Frame* m_opener;
     HashSet<Frame*> m_openedFrames;
 
     bool m_loadingFromCachedPage;
     bool m_suppressOpenerInNewFrame;
 
     bool m_currentNavigationHasShownBeforeUnloadConfirmPanel;
diff --git a/Source/WebCore/replay/ReplayInputDispatchMethods.cpp b/Source/WebCore/replay/ReplayInputDispatchMethods.cpp
index 6454a48..a17801e3 100644
--- a/Source/WebCore/replay/ReplayInputDispatchMethods.cpp
+++ b/Source/WebCore/replay/ReplayInputDispatchMethods.cpp
@@ -22,26 +22,30 @@
  * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  */
 
 #include "config.h"
 
 #if ENABLE(WEB_REPLAY)
 
 #include "AllReplayInputs.h"
+#include "Document.h"
 #include "MainFrame.h"
 #include "NavigationScheduler.h"
 #include "Page.h"
 #include "ReplayController.h"
+#include "ReplayableTimers.h"
+#include "SerializationMethods.h"
 #include "URL.h"
 #include "UserInputBridge.h"
+#include <cinttypes>
 
 namespace WebCore {
 
 // Sentinel inputs.
 void BeginSegmentSentinel::dispatch(ReplayController&)
 {
 }
 
 void EndSegmentSentinel::dispatch(ReplayController&)
 {
@@ -85,13 +89,21 @@ void HandleWheelEvent::dispatch(ReplayController& controller)
 void LogicalScrollPage::dispatch(ReplayController& controller)
 {
     controller.page().userInputBridge().logicalScrollRecursively(direction(), granularity(), InputSource::Synthetic);
 }
 
 void ScrollPage::dispatch(ReplayController& controller)
 {
     controller.page().userInputBridge().scrollRecursively(direction(), granularity(), InputSource::Synthetic);
 }
 
+// Other event loop inputs.
+void AsyncTimerFired::dispatch(ReplayController& controller)
+{
+    Document* document = documentFromFrameIndex(&controller.page(), m_frameIndex);
+    if (!document || !document->replayableTimers().fireTimer(m_ordinal))
+        LOG_ERROR("%-30s REPLAY DIVERGENCE! Couldn't find async timer %d/%" PRIu64 ".\n", "[ReplayController]", m_frameIndex, m_ordinal);
+}
+
 } // namespace WebCore
 
 #endif // ENABLE(WEB_REPLAY)
diff --git a/Source/WebCore/replay/ReplayableTimer.cpp b/Source/WebCore/replay/ReplayableTimer.cpp
new file mode 100644
index 0000000..37faf2c
--- /dev/null
+++ b/Source/WebCore/replay/ReplayableTimer.cpp
@@ -0,0 +1,105 @@
+/*
+ * Copyright (C) 2013-2015 University of Washington. All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in the
+ *    documentation and/or other materials provided with the distribution.
+ *
+ * THIS SOFTWARE IS PROVIDED BY APPLE COMPUTER, INC. ``AS IS'' AND ANY
+ * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+ * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
+ * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL APPLE COMPUTER, INC. OR
+ * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
+ * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
+ * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
+ * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
+ * OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
+ * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ */
+
+#include "config.h"
+#include "ReplayableTimer.h"
+
+#if ENABLE(WEB_REPLAY)
+
+#include "CapturingInputCursor.h"
+#include "Document.h"
+#include "Logging.h"
+#include "ReplayableTimers.h"
+#include "SerializationMethods.h"
+#include "WebReplayInputs.h"
+#include <replay/InputCursor.h>
+
+namespace WebCore {
+
+ReplayableTimerBase::ReplayableTimerBase()
+    : m_timer(*this, &ReplayableTimerBase::timerFired)
+{
+}
+
+ReplayableTimerBase::~ReplayableTimerBase()
+{
+}
+
+void ReplayableTimerBase::timerFired()
+{
+    ASSERT(m_ordinal);
+    ASSERT(m_document);
+
+    Document* document = m_document;
+    m_document = nullptr;
+
+    InputCursor& cursor = document->inputCursor();
+    ASSERT(!cursor.isReplaying());
+
+    if (cursor.isCapturing()) {
+        LOG(WebReplay, "ReplayableTimer(%p)::timerFired m_document=%p, ordinal=%" PRIu64, this, document, m_ordinal);
+        cursor.appendInput<AsyncTimerFired>(frameIndexFromDocument(document), m_ordinal);
+    }
+
+    EventLoopInputExtent extent(cursor);
+    fired();
+}
+
+void ReplayableTimerBase::startOneShot(double interval, Document* document)
+{
+    ASSERT_ARG(document, document);
+    m_document = document;
+
+    if (!m_ordinal)
+        m_ordinal = document->replayableTimers().registerTimer(this);
+
+    InputCursor& cursor = document->inputCursor();
+#if !LOG_DISABLED
+    if (cursor.isCapturing() || cursor.isReplaying())
+        LOG(WebReplay, "ReplayableTimer(%p)::startOneShot interval=%f, document=%p, ordinal=%" PRIu64, this, interval, document, m_ordinal);
+#endif
+    if (!cursor.isReplaying())
+        m_timer.startOneShot(interval);
+}
+
+void ReplayableTimerBase::stop()
+{
+    if (!m_document)
+        return;
+
+    InputCursor& cursor = m_document->inputCursor();
+#if !LOG_DISABLED
+    if (cursor.isCapturing() || cursor.isReplaying())
+        LOG(WebReplay, "ReplayableTimer(%p)::stop m_document=%p, ordinal=%" PRIu64, this, m_document, m_ordinal);
+#endif
+    if (!cursor.isReplaying())
+        m_timer.stop();
+
+    m_document = nullptr;
+}
+
+} // namespace WebCore
+
+#endif // ENABLE(WEB_REPLAY)
diff --git a/Source/WebCore/replay/ReplayableTimer.h b/Source/WebCore/replay/ReplayableTimer.h
new file mode 100644
index 0000000..9b2a927
--- /dev/null
+++ b/Source/WebCore/replay/ReplayableTimer.h
@@ -0,0 +1,115 @@
+/*
+ * Copyright (C) 2006 Apple Computer, Inc.  All rights reserved.
+ * Copyright (C) 2013-2015 University of Washington. All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in the
+ *    documentation and/or other materials provided with the distribution.
+ *
+ * THIS SOFTWARE IS PROVIDED BY APPLE INC. AND ITS CONTRIBUTORS ``AS IS''
+ * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
+ * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
+ * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL APPLE INC. OR ITS CONTRIBUTORS
+ * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
+ * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
+ * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
+ * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
+ * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
+ * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF
+ * THE POSSIBILITY OF SUCH DAMAGE.
+ */
+
+
+#ifndef ReplayableTimer_h
+#define ReplayableTimer_h
+
+#include "Timer.h"
+#include <wtf/Noncopyable.h>
+
+namespace WebCore {
+
+class Document;
+class ReplayableTimers;
+
+class ReplayableTimerBase {
+    WTF_MAKE_NONCOPYABLE(ReplayableTimerBase);
+
+friend class ReplayableTimers;
+
+public:
+    ReplayableTimerBase();
+    virtual ~ReplayableTimerBase();
+
+    void startOneShot(double interval, Document*);
+    void startOneShot(std::chrono::milliseconds interval, Document* document) { startOneShot(interval.count() * 0.001, document); }
+
+    void stop();
+    bool isActive() const;
+
+#if ENABLE(WEB_REPLAY)
+    uint64_t ordinal() const { return m_ordinal; }
+#endif
+protected:
+    virtual void fired() =0;
+private:
+    void timerFired();
+
+    Timer m_timer;
+
+#if ENABLE(WEB_REPLAY)
+    // Timers are often initialized without an associated document, but are always
+    // always fired when one is available. Assign timer ordinals on first fire.
+    Document* m_document = {nullptr};
+    uint64_t m_ordinal = {0};
+#endif // ENABLE(WEB_REPLAY)
+};
+
+class ReplayableTimer : public ReplayableTimerBase {
+public:
+    template <typename TimerFiredClass, typename TimerFiredBaseClass>
+    ReplayableTimer(TimerFiredClass& object, void (TimerFiredBaseClass::*function)())
+        : m_function(std::bind(function, &object))
+    {
+    }
+
+    ReplayableTimer(std::function<void ()> function)
+        : m_function(WTF::move(function))
+    {
+    }
+
+protected:
+    virtual void fired() override
+    {
+        m_function();
+    }
+
+    std::function<void ()> m_function;
+};
+
+#if ENABLE(WEB_REPLAY)
+inline bool ReplayableTimerBase::isActive() const
+{
+    return m_document;
+}
+
+#else // !ENABLE(WEB_REPLAY)
+inline bool ReplayableTimerBase::isActive() const
+{
+    return m_timer.isActive();
+}
+
+inline void ReplayableTimerBase::startOneShot(double interval, Document*)
+{
+    m_timer.startOneShot(interval);
+}
+
+#endif // !ENABLE(WEB_REPLAY)
+
+} // namespace WebCore
+
+#endif // ReplayableTimer_h
diff --git a/Source/WebCore/replay/ReplayableTimers.cpp b/Source/WebCore/replay/ReplayableTimers.cpp
new file mode 100644
index 0000000..3364b4e
--- /dev/null
+++ b/Source/WebCore/replay/ReplayableTimers.cpp
@@ -0,0 +1,79 @@
+/*
+ * Copyright (C) 2013, 2014 University of Washington. All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in the
+ *    documentation and/or other materials provided with the distribution.
+ *
+ * THIS SOFTWARE IS PROVIDED BY APPLE INC. AND ITS CONTRIBUTORS ``AS IS''
+ * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
+ * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
+ * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL APPLE INC. OR ITS CONTRIBUTORS
+ * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
+ * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
+ * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
+ * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
+ * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
+ * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF
+ * THE POSSIBILITY OF SUCH DAMAGE.
+ */
+
+#include "config.h"
+#include "ReplayableTimers.h"
+
+#if ENABLE(WEB_REPLAY)
+
+#include "Logging.h"
+#include "ReplayableTimer.h"
+
+namespace WebCore {
+
+ReplayableTimers::ReplayableTimers()
+    : m_map(TimerMap())
+    , m_nextOrdinal(1)
+{
+}
+
+unsigned long ReplayableTimers::registerTimer(ReplayableTimerBase* timer)
+{
+    ASSERT(timer);
+
+    bool needsOrdinal = false;
+    if (!timer->ordinal())
+        needsOrdinal = true;
+    else {
+        TimerMap::const_iterator it = m_map.find(timer->ordinal());
+        needsOrdinal |= it == m_map.end() || it->value != timer;
+    }
+
+    if (!needsOrdinal)
+        return timer->ordinal();
+
+    unsigned long ordinal = m_nextOrdinal++;
+    TimerMap::AddResult result = m_map.set(ordinal, timer);
+    ASSERT_UNUSED(result, result.isNewEntry);
+
+    LOG(WebReplay, "%-20s Registering async timer %p/%lu.\n", "ReplayableTimers", (void*)this, ordinal);
+    return ordinal;
+}
+
+bool ReplayableTimers::fireTimer(unsigned long ordinal)
+{
+    ASSERT(ordinal);
+
+    TimerMap::iterator result = m_map.find(ordinal);
+    if (result == m_map.end())
+        return false;
+
+    result->value->fired();
+    return true;
+}
+
+} // namespace WebCore
+
+#endif // ENABLE(WEB_REPLAY)
diff --git a/Source/WebCore/replay/ReplayableTimers.h b/Source/WebCore/replay/ReplayableTimers.h
new file mode 100644
index 0000000..3f7fc11
--- /dev/null
+++ b/Source/WebCore/replay/ReplayableTimers.h
@@ -0,0 +1,55 @@
+/*
+ * Copyright (C) 2013, 2014 University of Washington. All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in the
+ *    documentation and/or other materials provided with the distribution.
+ *
+ * THIS SOFTWARE IS PROVIDED BY APPLE INC. AND ITS CONTRIBUTORS ``AS IS''
+ * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
+ * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
+ * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL APPLE INC. OR ITS CONTRIBUTORS
+ * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
+ * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
+ * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
+ * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
+ * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
+ * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF
+ * THE POSSIBILITY OF SUCH DAMAGE.
+ */
+
+#ifndef ReplayableTimers_h
+#define ReplayableTimers_h
+
+#if ENABLE(WEB_REPLAY)
+
+#include <wtf/HashMap.h>
+#include <wtf/Noncopyable.h>
+
+namespace WebCore {
+
+class ReplayableTimerBase;
+
+class ReplayableTimers {
+    WTF_MAKE_NONCOPYABLE(ReplayableTimers);
+public:
+    ReplayableTimers();
+
+    unsigned long registerTimer(ReplayableTimerBase*);
+    bool fireTimer(unsigned long ordinal);
+private:
+    typedef HashMap<unsigned long, ReplayableTimerBase*> TimerMap;
+    TimerMap m_map;
+    unsigned long m_nextOrdinal;
+};
+
+} // namespace WebCore
+
+#endif // ENABLE(WEB_REPLAY)
+
+#endif // ReplayableTimers_h
diff --git a/Source/WebCore/replay/WebInputs.json b/Source/WebCore/replay/WebInputs.json
index b17231e..6ba632d 100644
--- a/Source/WebCore/replay/WebInputs.json
+++ b/Source/WebCore/replay/WebInputs.json
@@ -128,20 +128,29 @@
             {
                 "name": "URL", "mode": "HEAVY_SCALAR",
                 "header": "platform/URL.h"
             }
         ]
     },
 
     "inputs": {
         "WebCore": [
             {
+                "name": "AsyncTimerFired",
+                "description": "A ReplayableTimer instance fired that was associated with the specified frame.",
+                "queue": "EVENT_LOOP",
+                "members": [
+                    { "name": "frameIndex", "type": "uint32_t" },
+                    { "name": "ordinal", "type": "uint64_t" }
+                ]
+            },
+            {
                 "name": "BeginSegmentSentinel",
                 "description": "A sentinel input to signal the start of a segment.",
                 "queue": "EVENT_LOOP",
                 "members": [ ]
             },
             {
                 "name": "DocumentLastModifiedDate",
                 "description": "A fallback value used for the document's last modified date if the Last-Modified header can't be found or used.",
                 "queue": "SCRIPT_MEMOIZED",
                 "members": [
diff --git a/Source/WebKit/CMakeLists.txt b/Source/WebKit/CMakeLists.txt
index e8d692e..f60bc77 100644
--- a/Source/WebKit/CMakeLists.txt
+++ b/Source/WebKit/CMakeLists.txt
@@ -48,20 +48,21 @@ set(WebKit_INCLUDE_DIRECTORIES
     "${WEBCORE_DIR}/platform/mediastream"
     "${WEBCORE_DIR}/platform/mock"
     "${WEBCORE_DIR}/platform/network"
     "${WEBCORE_DIR}/platform/sql"
     "${WEBCORE_DIR}/platform/text"
     "${WEBCORE_DIR}/plugins"
     "${WEBCORE_DIR}/rendering"
     "${WEBCORE_DIR}/rendering/line"
     "${WEBCORE_DIR}/rendering/shapes"
     "${WEBCORE_DIR}/rendering/style"
+    "${WEBCORE_DIR}/replay"
     "${WEBCORE_DIR}/storage"
     "${WEBCORE_DIR}/style"
     "${WEBCORE_DIR}/svg"
     "${WEBCORE_DIR}/svg/animation"
     "${WEBCORE_DIR}/svg/graphics"
     "${WEBCORE_DIR}/svg/properties"
     "${WEBCORE_DIR}/workers"
     "${JAVASCRIPTCORE_DIR}"
     "${JAVASCRIPTCORE_DIR}/API"
     "${JAVASCRIPTCORE_DIR}/assembler"
diff --git a/Source/WebKit/ChangeLog b/Source/WebKit/ChangeLog
index c876b28..d656755 100644
--- a/Source/WebKit/ChangeLog
+++ b/Source/WebKit/ChangeLog
@@ -1,10 +1,20 @@
+2014-07-15  Brian J. Burg  <burg@cs.washington.edu>
+
+        Web Replay: make calls into FrameLoader::checkLoadComplete() deterministic
+        https://bugs.webkit.org/show_bug.cgi?id=129451
+
+        Reviewed by NOBODY (OOPS!).
+
+        * CMakeLists.txt: Add replay/ directory to header include paths, since
+        ReplayableTimer.h is included by Document.h.
+
 2015-01-21  Csaba Osztrogonác  <ossy@webkit.org>
 
         Remove ENABLE(INSPECTOR) ifdef guards
         https://bugs.webkit.org/show_bug.cgi?id=140668
 
         Reviewed by Darin Adler.
 
         * WebKit.vcxproj/WebKitExportGenerator/WebKitExports.def.in:
 
 2015-01-20  David Kilzer  <ddkilzer@apple.com>
diff --git a/Source/WebKit2/CMakeLists.txt b/Source/WebKit2/CMakeLists.txt
index 3f17035..a7ee383 100644
--- a/Source/WebKit2/CMakeLists.txt
+++ b/Source/WebKit2/CMakeLists.txt
@@ -104,20 +104,21 @@ set(WebKit2_INCLUDE_DIRECTORIES
     "${WEBCORE_DIR}/platform/graphics/transforms"
     "${WEBCORE_DIR}/platform/mediastream"
     "${WEBCORE_DIR}/platform/network"
     "${WEBCORE_DIR}/platform/sql"
     "${WEBCORE_DIR}/platform/text"
     "${WEBCORE_DIR}/plugins"
     "${WEBCORE_DIR}/rendering"
     "${WEBCORE_DIR}/rendering/line"
     "${WEBCORE_DIR}/rendering/shapes"
     "${WEBCORE_DIR}/rendering/style"
+    "${WEBCORE_DIR}/replay"
     "${WEBCORE_DIR}/storage"
     "${WEBCORE_DIR}/style"
     "${WEBCORE_DIR}/svg"
     "${WEBCORE_DIR}/svg/graphics"
     "${WEBCORE_DIR}/svg/properties"
     "${JAVASCRIPTCORE_DIR}"
     "${JAVASCRIPTCORE_DIR}/ForwardingHeaders"
     "${JAVASCRIPTCORE_DIR}/API"
     "${JAVASCRIPTCORE_DIR}/assembler"
     "${JAVASCRIPTCORE_DIR}/bytecode"
diff --git a/Source/WebKit2/ChangeLog b/Source/WebKit2/ChangeLog
index 597a4c5..ffd8958 100644
--- a/Source/WebKit2/ChangeLog
+++ b/Source/WebKit2/ChangeLog
@@ -1,10 +1,19 @@
+2014-07-15  Brian J. Burg  <burg@cs.washington.edu>
+
+        Web Replay: make calls into FrameLoader::checkLoadComplete() deterministic
+        https://bugs.webkit.org/show_bug.cgi?id=129451
+
+        Reviewed by NOBODY (OOPS!).
+
+        * CMakeLists.txt: Add replay/ directory to header include paths.
+
 2015-01-21  Zan Dobersek  <zdobersek@igalia.com>
 
         [WK2] Use C++ lambdas in ProcessLauncher class
         https://bugs.webkit.org/show_bug.cgi?id=138186
 
         Reviewed by Darin Adler.
 
         Replace uses of WTF::bind() in the ProcessLauncher class with C++ lambdas.
 
         * UIProcess/Launcher/efl/ProcessLauncherEfl.cpp:
-- 
2.0.1

